0xb3db8 _init
0xb3de0 ftell@plt-0x10
0xb3df0 ftell@plt
0xb3e00 JBIG2Stream::readProfilesSeg(unsigned int)@plt
0xb3e10 Attribute::~Attribute()@plt
0xb3e20 operator new[](unsigned long)@plt
0xb3e30 Parser::getObj(Object*, bool, unsigned char*, CryptAlgorithm, int, int, int, int, bool)@plt
0xb3e40 std::_Rb_tree<int, std::pair<int const, int>, std::_Select1st<std::pair<int const, int> >, std::less<int>, std::allocator<std::pair<int const, int> > >::_M_insert_(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::pair<int const, int> const&)@plt
0xb3e50 AnnotWidget::~AnnotWidget()@plt
0xb3e60 UnicodeMap::UnicodeMap(char const*, bool, UnicodeMapRange*, int)@plt
0xb3e70 GooString::appendfv(char const*, __va_list_tag*)@plt
0xb3e80 Object::fetch(XRef*, Object*, int)@plt
0xb3e90 FT_New_Memory_Face@plt
0xb3ea0 JPXStream::init()@plt
0xb3eb0 GfxFontDict::~GfxFontDict()@plt
0xb3ec0 GooString::format(char const*, ...)@plt
0xb3ed0 Splash::blitImage(SplashBitmap*, bool, int, int, SplashClipResult)@plt
0xb3ee0 GooString::formatDoubleSmallAware(double, char*, int, int, bool, char**, int*)@plt
0xb3ef0 PSOutputDev::writePSFmt(char const*, ...)@plt
0xb3f00 Dict::lookupInt(char const*, char const*, int*)@plt
0xb3f10 GfxPatternColorSpace::GfxPatternColorSpace(GfxColorSpace*)@plt
0xb3f20 AnnotCalloutLine::AnnotCalloutLine(double, double, double, double)@plt
0xb3f30 GfxUnivariateShading::GfxUnivariateShading(GfxUnivariateShading*)@plt
0xb3f40 StructElement::getTextSpansInternal(MarkedContentOutputDev&) const@plt
0xb3f50 PopplerCache::PopplerCache(int)@plt
0xb3f60 Page::getResourceDict()@plt
0xb3f70 BaseCryptStream::BaseCryptStream(Stream*, unsigned char*, CryptAlgorithm, int, int, int)@plt
0xb3f80 png_write_image@plt
0xb3f90 AnnotSound::initialize(PDFDoc*, Dict*)@plt
0xb3fa0 JArithmeticDecoderStats::JArithmeticDecoderStats(int)@plt
0xb3fb0 SplashFTFontEngine::~SplashFTFontEngine()@plt
0xb3fc0 MediaWindowParameters::~MediaWindowParameters()@plt
0xb3fd0 AnnotAppearance::~AnnotAppearance()@plt
0xb3fe0 JBIG2SymbolDict::JBIG2SymbolDict(unsigned int, unsigned int)@plt
0xb3ff0 StitchingFunction::StitchingFunction(Object*, Dict*, std::set<int, std::less<int>, std::allocator<int> >*)@plt
0xb4000 __errno_location@plt
0xb4010 AnnotWidget::AnnotWidget(PDFDoc*, Dict*, Object*)@plt
0xb4020 CMap::parse(CMapCache*, GooString*, Stream*)@plt
0xb4030 printf@plt
0xb4040 FilterStream::~FilterStream()@plt
0xb4050 FoFiBase::getS32BE(int, bool*)@plt
0xb4060 jpeg_CreateCompress@plt
0xb4070 GfxFontDict::GfxFontDict(XRef*, Ref*, Dict*)@plt
0xb4080 Annots::~Annots()@plt
0xb4090 Parser::Parser(XRef*, Lexer*, bool)@plt
0xb40a0 Linearization::getHintsOffset2()@plt
0xb40b0 SecurityHandler::~SecurityHandler()@plt
0xb40c0 PageLabelInfo::indexToLabel(int, GooString*)@plt
0xb40d0 StructElement::appendSubTreeText(GooString*, bool) const@plt
0xb40e0 FcFontSetDestroy@plt
0xb40f0 GooHash::remove(GooString*)@plt
0xb4100 AnnotPath::AnnotPath()@plt
0xb4110 SplashState::setScreen(SplashScreen*)@plt
0xb4120 UnicodeIsValid(unsigned int)@plt
0xb4130 GfxRadialShading::~GfxRadialShading()@plt
0xb4140 Splash::drawPixel(SplashPipe*, int, int, bool)@plt
0xb4150 GfxResources::lookupShading(char*, OutputDev*, GfxState*)@plt
0xb4160 LinkURI::~LinkURI()@plt
0xb4170 GooTimer::getElapsed()@plt
0xb4180 JBIG2HuffmanDecoder::decodeInt(int*, JBIG2HuffmanTable*)@plt
0xb4190 PSOutputDev::opiBegin13(GfxState*, Dict*)@plt
0xb41a0 ViewerPreferences::~ViewerPreferences()@plt
0xb41b0 Splash::shadedFill(SplashPath*, bool, SplashPattern*)@plt
0xb41c0 GfxSubpath::close()@plt
0xb41d0 Dict::remove(char const*)@plt
0xb41e0 MovieActivationParameters::~MovieActivationParameters()@plt
0xb41f0 void std::__heap_select<GfxFontCIDWidthExcep*, __gnu_cxx::__ops::_Iter_comp_iter<cmpWidthExcepFunctor> >(GfxFontCIDWidthExcep*, GfxFontCIDWidthExcep*, GfxFontCIDWidthExcep*, __gnu_cxx::__ops::_Iter_comp_iter<cmpWidthExcepFunctor>)@plt
0xb4200 GfxUnivariateShading::GfxUnivariateShading(int, double, double, Function**, int, bool, bool)@plt
0xb4210 GfxShadingBitBuf::flushBits()@plt
0xb4220 TextLine::cmpYX(TextLine*)@plt
0xb4230 strcspn@plt
0xb4240 Catalog::getPageLabelInfo()@plt
0xb4250 std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_insert_unique(int const&)@plt
0xb4260 XRef::reserve(int)@plt
0xb4270 StructTreeRoot::~StructTreeRoot()@plt
0xb4280 AnnotPolygon::initialize(PDFDoc*, Dict*)@plt
0xb4290 AnnotFileAttachment::~AnnotFileAttachment()@plt
0xb42a0 FormFieldChoice::deselectAll()@plt
0xb42b0 SplashClip::grow(int)@plt
0xb42c0 AnnotBorder::~AnnotBorder()@plt
0xb42d0 jpeg_std_error@plt
0xb42e0 SplashFontFile::decRefCnt()@plt
0xb42f0 atan2@plt
0xb4300 PSOutputDev::setupEmbeddedCIDType0Font(GfxFont*, Ref*, GooString*)@plt
0xb4310 TextPage::~TextPage()@plt
0xb4320 Annot::drawCircleTopLeft(double, double, double)@plt
0xb4330 void std::__introsort_loop<SplashScreenPoint*, long, __gnu_cxx::__ops::_Iter_comp_iter<cmpDistancesFunctor> >(SplashScreenPoint*, SplashScreenPoint*, long, __gnu_cxx::__ops::_Iter_comp_iter<cmpDistancesFunctor>)@plt
0xb4340 GooHash::getNext(GooHashIter**, GooString**, void**)@plt
0xb4350 TextPool::addWord(TextWord*)@plt
0xb4360 GfxState::GfxState(double, double, PDFRectangle*, int, bool)@plt
0xb4370 FT_Set_Pixel_Sizes@plt
0xb4380 GfxCIDFont::getCollection()@plt
0xb4390 SplashRadialPattern::SplashRadialPattern(SplashColorMode, GfxState*, GfxRadialShading*)@plt
0xb43a0 MarkedContentOutputDev::MarkedContentOutputDev(int)@plt
0xb43b0 SecurityHandler::checkEncryption(GooString*, GooString*)@plt
0xb43c0 CharCodeToUnicode::parseCIDToUnicode(GooString*, GooString*)@plt
0xb43d0 __ctype_toupper_loc@plt
0xb43e0 SplashXPath::~SplashXPath()@plt
0xb43f0 Array::~Array()@plt
0xb4400 SplashFontEngine::getFont(SplashFontFile*, double*, double*)@plt
0xb4410 Linearization::Linearization(BaseStream*)@plt
0xb4420 XRef::copy()@plt
0xb4430 FoFiTrueType::charToTag(char const*)@plt
0xb4440 UnicodeMapCache::~UnicodeMapCache()@plt
0xb4450 TextBlock::isBeforeByRule2(TextBlock*)@plt
0xb4460 PageLabelInfo::parse(Object*)@plt
0xb4470 LinkGoToR::LinkGoToR(Object*, Object*)@plt
0xb4480 Array::add(Object*)@plt
0xb4490 Gfx::doPatternImageMask(Object*, Stream*, int, int, bool, bool)@plt
0xb44a0 RGBGrayEncoder::~RGBGrayEncoder()@plt
0xb44b0 ungetc@plt
0xb44c0 GfxPath::lineTo(double, double)@plt
0xb44d0 GfxRadialShading::parse(GfxResources*, Dict*, OutputDev*, GfxState*)@plt
0xb44e0 GfxState::ReusablePathIterator::reset()@plt
0xb44f0 FoFiType1C::getFontMatrix(double*)@plt
0xb4500 GfxCalRGBColorSpace::getXYZ(GfxColor*, double*, double*, double*)@plt
0xb4510 std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)@plt
0xb4520 jpeg_simple_progression@plt
0xb4530 ceil@plt
0xb4540 __ctype_tolower_loc@plt
0xb4550 GfxImageColorMap::getColor(unsigned char*, GfxColor*)@plt
0xb4560 AnnotFileAttachment::initialize(PDFDoc*, Dict*)@plt
0xb4570 AnnotInk::AnnotInk(PDFDoc*, Dict*, Object*)@plt
0xb4580 OCGs::OCGs(Object*, XRef*)@plt
0xb4590 JBIG2PatternDict::~JBIG2PatternDict()@plt
0xb45a0 sprintf@plt
0xb45b0 GfxPath::close()@plt
0xb45c0 GlobalParams::getScreenWhiteThreshold()@plt
0xb45d0 FileStream::FileStream(GooFile*, long long, bool, long long, Object*)@plt
0xb45e0 void std::__heap_select<DictEntry*, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(DictEntry const&, DictEntry const&)> >(DictEntry*, DictEntry*, DictEntry*, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(DictEntry const&, DictEntry const&)>)@plt
0xb45f0 void std::__adjust_heap<SplashScreenPoint*, long, SplashScreenPoint, __gnu_cxx::__ops::_Iter_comp_iter<cmpDistancesFunctor> >(SplashScreenPoint*, long, long, SplashScreenPoint, __gnu_cxx::__ops::_Iter_comp_iter<cmpDistancesFunctor>)@plt
0xb4600 ASCIIHexEncoder::~ASCIIHexEncoder()@plt
0xb4610 PreScanOutputDev::~PreScanOutputDev()@plt
0xb4620 SplashOutputDev::univariateShadedFill(GfxState*, SplashUnivariatePattern*, double, double)@plt
0xb4630 Gfx::doPatternStroke()@plt
0xb4640 AnnotLine::AnnotLine(PDFDoc*, Dict*, Object*)@plt
0xb4650 AnnotMarkup::~AnnotMarkup()@plt
0xb4660 SplashFontEngine::SplashFontEngine(bool, bool, bool, bool)@plt
0xb4670 GfxSubpath::~GfxSubpath()@plt
0xb4680 PostScriptFunction::PostScriptFunction(Object*, Dict*)@plt
0xb4690 AnnotAppearanceCharacs::~AnnotAppearanceCharacs()@plt
0xb46a0 PDFDoc::init()@plt
0xb46b0 FormFieldButton::setNumSiblings(int)@plt
0xb46c0 Gfx::popMarkedContent()@plt
0xb46d0 GfxPath::GfxPath()@plt
0xb46e0 GlobalParams::getMinLineWidth()@plt
0xb46f0 AnnotGeometry::initialize(PDFDoc*, Dict*)@plt
0xb4700 NameTree::lookup(GooString*, Object*)@plt
0xb4710 GfxState::setTransfer(Function**)@plt
0xb4720 AnnotAppearanceBBox::AnnotAppearanceBBox(PDFRectangle*)@plt
0xb4730 CharCodeToUnicode::parseUnicodeToUnicode(GooString*)@plt
0xb4740 Gfx::doRadialShFill(GfxRadialShading*)@plt
0xb4750 Splash::setMatrix(double*)@plt
0xb4760 Gfx::opSetMiterLimit(Object*, int)@plt
0xb4770 PSOutputDev::doImageL3(Object*, GfxImageColorMap*, bool, bool, Stream*, int, int, int, int*, Stream*, int, int, bool)@plt
0xb4780 opj_set_event_mgr@plt
0xb4790 UnicodeMap::decRefCnt()@plt
0xb47a0 XRef::unlock()@plt
0xb47b0 PostScriptFunction::PostScriptFunction(PostScriptFunction const*)@plt
0xb47c0 SplashFontFile::~SplashFontFile()@plt
0xb47d0 PDFDoc::writeXRefStreamTrailer(Dict*, XRef*, Ref*, long long, OutStream*, XRef*)@plt
0xb47e0 SplashFont::SplashFont(SplashFontFile*, double*, double*, bool)@plt
0xb47f0 TextWord::~TextWord()@plt
0xb4800 Annot::Annot(PDFDoc*, Dict*, Object*)@plt
0xb4810 SplashFTFontEngine::loadType1CFont(SplashFontFileID*, SplashFontSrc*, char const**)@plt
0xb4820 GfxRadialShading::GfxRadialShading(GfxRadialShading*)@plt
0xb4830 PSOutputDev::writeTrailer()@plt
0xb4840 FoFiType1C::buildEncoding()@plt
0xb4850 CMYKGrayEncoder::fillBuf()@plt
0xb4860 FoFiType1C::readTopDict()@plt
0xb4870 OptionalContentGroup::~OptionalContentGroup()@plt
0xb4880 ExponentialFunction::ExponentialFunction(ExponentialFunction const*)@plt
0xb4890 JBIG2CodeTable::~JBIG2CodeTable()@plt
0xb48a0 FormFieldSignature::FormFieldSignature(PDFDoc*, Object*, Ref const&, FormField*, std::set<int, std::less<int>, std::allocator<int> >*)@plt
0xb48b0 Stream::fillGooString(GooString*)@plt
0xb48c0 JBIG2Bitmap::duplicateRow(int, int)@plt
0xb48d0 PDFDoc::writeDictionnary(Dict*, OutStream*, XRef*, unsigned int, unsigned char*, CryptAlgorithm, int, int, int)@plt
0xb48e0 FoFiType1C::convertToType0(char*, int*, int, void (*)(void*, char const*, int), void*)@plt
0xb48f0 AnnotPolygon::~AnnotPolygon()@plt
0xb4900 GooHash::find(char const*, int*)@plt
0xb4910 GfxGouraudTriangleShading::getTriangle(int, double*, double*, double*, double*, double*, double*, double*, double*, double*)@plt
0xb4920 sin@plt
0xb4930 CCITTFaxStream::lookBits(int)@plt
0xb4940 SplashClip::clipAALine(SplashBitmap*, int*, int*, int, bool)@plt
0xb4950 GfxState::ReusablePathIterator::isEnd() const@plt
0xb4960 Dict::incRef()@plt
0xb4970 Lexer::skipToNextLine()@plt
0xb4980 SplashClip::SplashClip(double, double, double, double, bool)@plt
0xb4990 PDFDoc::writeObject(Object*, OutStream*, XRef*, unsigned int, unsigned char*, CryptAlgorithm, int, int, int)@plt
0xb49a0 StandardSecurityHandler::StandardSecurityHandler(PDFDoc*, Object*)@plt
0xb49b0 FcPatternGetLangSet@plt
0xb49c0 StructElement::getTypeName() const@plt
0xb49d0 TextBlock::visitSelection(TextSelectionVisitor*, PDFRectangle*, SelectionStyle)@plt
0xb49e0 Splash::scaleImageYdXu(bool (*)(void*, unsigned char*, unsigned char*), void*, SplashColorMode, int, bool, int, int, int, int, SplashBitmap*)@plt
0xb49f0 Splash::scaleMaskYuXd(bool (*)(void*, unsigned char*), void*, int, int, int, int, SplashBitmap*)@plt
0xb4a00 AnnotSound::AnnotSound(PDFDoc*, Dict*, Object*)@plt
0xb4a10 FT_New_Size@plt
0xb4a20 Catalog::getPage(int)@plt
0xb4a30 strstr@plt
0xb4a40 SplashPath::moveTo(double, double)@plt
0xb4a50 FlateStream::startBlock()@plt
0xb4a60 SplashScreen::buildSCDMatrix(int)@plt
0xb4a70 XRef::markUnencrypted()@plt
0xb4a80 SplashPath::offset(double, double)@plt
0xb4a90 Gfx::doFunctionShFill(GfxFunctionShading*)@plt
0xb4aa0 GfxFontLoc::GfxFontLoc()@plt
0xb4ab0 Attribute::parseUserProperty(Dict*)@plt
0xb4ac0 FilterStream::close()@plt
0xb4ad0 Annot::drawCircleBottomRight(double, double, double)@plt
0xb4ae0 TextLine::secondaryCmp(TextLine*)@plt
0xb4af0 XRef::readXRef(long long*, std::vector<long long, std::allocator<long long> >*, std::vector<int, std::allocator<int> >*)@plt
0xb4b00 JPXStream::JPXStream(Stream*)@plt
0xb4b10 BaseCryptStream::setAutoDelete(bool)@plt
0xb4b20 Splash::blitImageClipped(SplashBitmap*, bool, int, int, int, int, int, int)@plt
0xb4b30 GfxState::concatCTM(double, double, double, double, double, double)@plt
0xb4b40 jpeg_destroy_decompress@plt
0xb4b50 grealloc@plt
0xb4b60 AnnotScreen::~AnnotScreen()@plt
0xb4b70 FoFiBase::getU32BE(int, bool*)@plt
0xb4b80 Gfx::contentIsHidden()@plt
0xb4b90 FormField::createWidgetAnnotations()@plt
0xb4ba0 FormField::~FormField()@plt
0xb4bb0 GlobalParams::getCMap(GooString*, GooString*, Stream*)@plt
0xb4bc0 FormFieldChoice::toggle(int)@plt
0xb4bd0 Catalog::getEmbeddedFileNameTree()@plt
0xb4be0 Catalog::~Catalog()@plt
0xb4bf0 TextLine::coalesce(UnicodeMap*)@plt
0xb4c00 PDFDoc::isLinearized(bool)@plt
0xb4c10 void std::__introsort_loop<SplashIntersect*, long, __gnu_cxx::__ops::_Iter_comp_iter<cmpIntersectFunctor> >(SplashIntersect*, SplashIntersect*, long, __gnu_cxx::__ops::_Iter_comp_iter<cmpIntersectFunctor>)@plt
0xb4c20 NameTree::parse(Object*)@plt
0xb4c30 RunLengthEncoder::fillBuf()@plt
0xb4c40 ASCII85Encoder::fillBuf()@plt
0xb4c50 SplashBitmap::getXBGRLine(int, unsigned char*)@plt
0xb4c60 AnnotLink::AnnotLink(PDFDoc*, Dict*, Object*)@plt
0xb4c70 cmsOpenProfileFromMem@plt
0xb4c80 CMap::match(GooString*, GooString*)@plt
0xb4c90 GfxGouraudTriangleShading::getTriangle(int, double*, double*, GfxColor*, double*, double*, GfxColor*, double*, double*, GfxColor*)@plt
0xb4ca0 AnnotWidget::drawFormFieldButton(GfxResources*, GooString*)@plt
0xb4cb0 FixedLengthEncoder::~FixedLengthEncoder()@plt
0xb4cc0 SplashFTFontFile::loadTrueTypeFont(SplashFTFontEngine*, SplashFontFileID*, SplashFontSrc*, int*, int, int)@plt
0xb4cd0 CharCodeToUnicode::parseCMap1(int (*)(void*), void*, int)@plt
0xb4ce0 GooString::hasUnicodeMarker()@plt
0xb4cf0 FormWidgetChoice::~FormWidgetChoice()@plt
0xb4d00 getFileSpecNameForPlatform(Object*, Object*)@plt
0xb4d10 Array::decRef()@plt
0xb4d20 LinkRendition::~LinkRendition()@plt
0xb4d30 AnnotQuadrilaterals::getY2(int)@plt
0xb4d40 void std::__introsort_loop<GfxFontCIDWidthExcep*, long, __gnu_cxx::__ops::_Iter_comp_iter<cmpWidthExcepFunctor> >(GfxFontCIDWidthExcep*, GfxFontCIDWidthExcep*, long, __gnu_cxx::__ops::_Iter_comp_iter<cmpWidthExcepFunctor>)@plt
0xb4d50 Annot::setAppearanceState(char const*)@plt
0xb4d60 FoFiType1C::getOp(int, bool, bool*)@plt
0xb4d70 CachedFile::incRefCnt()@plt
0xb4d80 PSOutputDev::doPath(GfxPath*)@plt
0xb4d90 SplashOutputDev::drawType3Glyph(GfxState*, T3FontCache*, T3FontCacheTag*, unsigned char*)@plt
0xb4da0 SplashOutputDev::setupScreenParams(double, double)@plt
0xb4db0 FoFiTrueType::readPostTable()@plt
0xb4dc0 GlobalParams::getScreenSize()@plt
0xb4dd0 FormFieldButton::~FormFieldButton()@plt
0xb4de0 GlobalParams::getProfileCommands()@plt
0xb4df0 void std::__unguarded_linear_insert<DictEntry*, __gnu_cxx::__ops::_Val_comp_iter<bool (*)(DictEntry const&, DictEntry const&)> >(DictEntry*, __gnu_cxx::__ops::_Val_comp_iter<bool (*)(DictEntry const&, DictEntry const&)>)@plt
0xb4e00 AnnotPath::getX(int) const@plt
0xb4e10 FlateStream::compHuffmanCodes(int*, int, FlateHuffmanTab*)@plt
0xb4e20 AnnotPolygon::AnnotPolygon(PDFDoc*, Dict*, Object*)@plt
0xb4e30 SplashRadialPattern::~SplashRadialPattern()@plt
0xb4e40 PageAttrs::~PageAttrs()@plt
0xb4e50 Page::createGfx(OutputDev*, double, double, int, bool, bool, int, int, int, int, bool, bool (*)(void*), void*, XRef*)@plt
0xb4e60 Splash::fillImageMask(bool (*)(void*, unsigned char*), void*, int, int, double*, bool)@plt
0xb4e70 popen@plt
0xb4e80 XRef::XRef(Object*)@plt
0xb4e90 CachedFileWriter::write(char const*, unsigned long)@plt
0xb4ea0 SecurityHandler::make(PDFDoc*, Object*)@plt
0xb4eb0 jpeg_set_quality@plt
0xb4ec0 GfxGouraudTriangleShading::GfxGouraudTriangleShading(GfxGouraudTriangleShading*)@plt
0xb4ed0 GfxShading::~GfxShading()@plt
0xb4ee0 Attribute::Attribute(Attribute::Type, Object*)@plt
0xb4ef0 jpeg_start_decompress@plt
0xb4f00 FormField::findWidgetByRef(Ref)@plt
0xb4f10 gstrtod@plt
0xb4f20 PDFDoc::checkHeader()@plt
0xb4f30 TextBlock::coalesce(UnicodeMap*, double)@plt
0xb4f40 Lexer::~Lexer()@plt
0xb4f50 mkstemp@plt
0xb4f60 GooString::clear()@plt
0xb4f70 FixedLengthEncoder::FixedLengthEncoder(Stream*, int)@plt
0xb4f80 CMap::useCMap(CMapCache*, char*)@plt
0xb4f90 CMap::copyVector(CMapVectorEntry*, CMapVectorEntry*)@plt
0xb4fa0 log@plt
0xb4fb0 JPXStreamPrivate::init2(unsigned char*, int, CODEC_FORMAT)@plt
0xb4fc0 SplashPath::curveTo(double, double, double, double, double, double)@plt
0xb4fd0 Annot::isVisible(bool)@plt
0xb4fe0 AnnotCaret::~AnnotCaret()@plt
0xb4ff0 StructTreeRoot::parentTreeAdd(Ref const&, StructElement*)@plt
0xb5000 JBIG2Stream::findSegment(unsigned int)@plt
0xb5010 Lexer::getObj(Object*, char const*, int)@plt
0xb5020 FoFiTrueType::doMapToVertGID(unsigned int)@plt
0xb5030 SplashScreen::distance(int, int, int, int)@plt
0xb5040 TIFFSetField@plt
0xb5050 FT_Load_Glyph@plt
0xb5060 strerror@plt
0xb5070 SplashOutputDev::getColor(int)@plt
0xb5080 FoFiTrueType::mapToVertGID(unsigned int)@plt
0xb5090 png_create_write_struct@plt
0xb50a0 UnicodeMap::incRefCnt()@plt
0xb50b0 StitchingFunction::~StitchingFunction()@plt
0xb50c0 AnnotText::AnnotText(PDFDoc*, Dict*, Object*)@plt
0xb50d0 FoFiType1C::eexecWrite(Type1CEexecBuf*, char const*)@plt
0xb50e0 TextPage::addUnderline(double, double, double, double)@plt
0xb50f0 XRef::init()@plt
0xb5100 Dict::Dict(XRef*)@plt
0xb5110 Gfx8BitFont::getResources()@plt
0xb5120 DecryptStream::~DecryptStream()@plt
0xb5130 GooString::GooString(char const*, int)@plt
0xb5140 Gfx::doTilingPatternFill(GfxTilingPattern*, bool, bool, bool)@plt
0xb5150 SplashXPath::SplashXPath(SplashXPath*)@plt
0xb5160 GooString::append(char const*, int)@plt
0xb5170 Sound::getStream()@plt
0xb5180 AnnotLink::initialize(PDFDoc*, Dict*)@plt
0xb5190 CMap::parse(CMapCache*, GooString*, Object*)@plt
0xb51a0 std::__throw_bad_alloc()@plt
0xb51b0 MediaParameters::parseMediaScreenParameters(Object*)@plt
0xb51c0 JBIG2Stream::readPatternDictSeg(unsigned int, unsigned int)@plt
0xb51d0 PDFDoc::saveIncrementalUpdate(OutStream*)@plt
0xb51e0 void std::__adjust_heap<SplashXPathSeg*, long, SplashXPathSeg, __gnu_cxx::__ops::_Iter_comp_iter<cmpXPathSegsFunctor> >(SplashXPathSeg*, long, long, SplashXPathSeg, __gnu_cxx::__ops::_Iter_comp_iter<cmpXPathSegsFunctor>)@plt
0xb51f0 strchr@plt
0xb5200 StreamPredictor::getNextLine()@plt
0xb5210 JBIG2Stream::readTextRegion(bool, bool, int, int, unsigned int, unsigned int, int, JBIG2HuffmanTable*, unsigned int, JBIG2Bitmap**, unsigned int, unsigned int, unsigned int, unsigned int, int, JBIG2HuffmanTable*, JBIG2HuffmanTable*, JBIG2HuffmanTable*, JBIG2HuffmanTable*, JBIG2HuffmanTable*, JBIG2HuffmanTable*, JBIG2HuffmanTable*, JBIG2HuffmanTable*, unsigned int, int*, int*)@plt
0xb5220 FormFieldButton::updateState(char*)@plt
0xb5230 Gfx::opSetLineCap(Object*, int)@plt
0xb5240 JBIG2HuffmanDecoder::readBits(unsigned int)@plt
0xb5250 FcDefaultSubstitute@plt
0xb5260 TextPage::startPage(GfxState*)@plt
0xb5270 longjmp@plt
0xb5280 GfxShadingPattern::parse(GfxResources*, Object*, OutputDev*, GfxState*)@plt
0xb5290 FoFiTrueType::cvtSfnts(void (*)(void*, char const*, int), void*, GooString*, bool, int*)@plt
0xb52a0 GfxICCBasedColorSpace::parse(Array*, OutputDev*, GfxState*, int)@plt
0xb52b0 DCTStream::DCTStream(Stream*, int, Object*, int)@plt
0xb52c0 CharCodeToUnicode::mapToUnicode(unsigned int, unsigned int**)@plt
0xb52d0 EOFStream::EOFStream(Stream*)@plt
0xb52e0 FoFiBase::getS16BE(int, bool*)@plt
0xb52f0 TextBlock::isBelow(TextBlock*)@plt
0xb5300 SplashFTFontFile::~SplashFTFontFile()@plt
0xb5310 std::_Rb_tree<int, std::pair<int const, int>, std::_Select1st<std::pair<int const, int> >, std::less<int>, std::allocator<std::pair<int const, int> > >::_M_get_insert_unique_pos(int const&)@plt
0xb5320 FoFiTrueType::setupGSUB(char const*, char const*)@plt
0xb5330 GlobalParams::mapNameToUnicodeAll(char const*)@plt
0xb5340 NameToCharCode::~NameToCharCode()@plt
0xb5350 Gfx::opSetLineJoin(Object*, int)@plt
0xb5360 Splash::setStrokePattern(SplashPattern*)@plt
0xb5370 Gfx::saveStateStack()@plt
0xb5380 Linearization::getPageFirst()@plt
0xb5390 SplashXPath::addSegment(double, double, double, double)@plt
0xb53a0 gmalloc_checkoverflow@plt
0xb53b0 AnnotAppearance::referencesStream(Object*, Ref)@plt
0xb53c0 OptionalContentGroup::getRef() const@plt
0xb53d0 std::_Rb_tree<unsigned int, std::pair<unsigned int const, unsigned int>, std::_Select1st<std::pair<unsigned int const, unsigned int> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >::find(unsigned int const&)@plt
0xb53e0 TextBlock::~TextBlock()@plt
0xb53f0 TIFFClose@plt
0xb5400 PreScanOutputDev::check(GfxColorSpace*, GfxColor*, double, GfxBlendMode)@plt
0xb5410 SplashFont::initCache()@plt
0xb5420 JBIG2MMRDecoder::~JBIG2MMRDecoder()@plt
0xb5430 JBIG2Bitmap::clearToOne()@plt
0xb5440 GooList::append(void*)@plt
0xb5450 XRef::getEntry(int, bool)@plt
0xb5460 Gfx::doShowText(GooString*)@plt
0xb5470 ProfileData::addElement(double)@plt
0xb5480 Sound::~Sound()@plt
0xb5490 PSOutputDev::maskToClippingPath(Stream*, int, int, bool)@plt
0xb54a0 ActualText::end(GfxState*)@plt
0xb54b0 JBIG2Stream::readUWord(unsigned int*)@plt
0xb54c0 GooHash::~GooHash()@plt
0xb54d0 XRef::getEncryptionParameters(unsigned char**, CryptAlgorithm*, int*)@plt
0xb54e0 JBIG2Stream::readSegments()@plt
0xb54f0 Object::initStream(Stream*)@plt
0xb5500 SplashXPathSeg* std::__unguarded_partition<SplashXPathSeg*, __gnu_cxx::__ops::_Iter_comp_iter<cmpXPathSegsFunctor> >(SplashXPathSeg*, SplashXPathSeg*, SplashXPathSeg*, __gnu_cxx::__ops::_Iter_comp_iter<cmpXPathSegsFunctor>)@plt
0xb5510 TextWordList::TextWordList(TextPage*, bool)@plt
0xb5520 Lexer::getChar(bool)@plt
0xb5530 Splash::pipeSetXY(SplashPipe*, int, int)@plt
0xb5540 FontInfo::FontInfo(GfxFont*, XRef*)@plt
0xb5550 PSOutputDev::setupForms(Dict*)@plt
0xb5560 GfxAxialShading::GfxAxialShading(GfxAxialShading*)@plt
0xb5570 GfxState::clipToRect(double, double, double, double)@plt
0xb5580 FlateStream::getCodeWord(int)@plt
0xb5590 Movie::Movie(Object*)@plt
0xb55a0 FcPatternGetInteger@plt
0xb55b0 SplashFontSrc::~SplashFontSrc()@plt
0xb55c0 Object::initDict(XRef*)@plt
0xb55d0 SplashFTFontFile::SplashFTFontFile(SplashFTFontEngine*, SplashFontFileID*, SplashFontSrc*, FT_FaceRec_*, int*, int, bool, bool)@plt
0xb55e0 Annot3D::Activation::Activation(Dict*)@plt
0xb55f0 CharCodeToUnicode::~CharCodeToUnicode()@plt
0xb5600 PSStack::popNum()@plt
0xb5610 JBIG2MMRDecoder::getWhiteCode()@plt
0xb5620 LinkSound::~LinkSound()@plt
0xb5630 GfxState::clip()@plt
0xb5640 __cxa_finalize@plt
0xb5650 strlen@plt
0xb5660 FT_Set_Transform@plt
0xb5670 pthread_mutexattr_destroy@plt
0xb5680 Gfx::drawAnnot(Object*, AnnotBorder*, AnnotColor*, double, double, double, double, int)@plt
0xb5690 GfxCalGrayColorSpace::parse(Array*, GfxState*)@plt
0xb56a0 Annot::setColor(AnnotColor*, bool)@plt
0xb56b0 GfxImageColorMap::~GfxImageColorMap()@plt
0xb56c0 DCTStream::init()@plt
0xb56d0 memcmp@plt
0xb56e0 FormFieldChoice::getNumSelected()@plt
0xb56f0 Gfx::doPatternFill(bool)@plt
0xb5700 TIFFDefaultStripSize@plt
0xb5710 SysFontInfo::SysFontInfo(GooString*, bool, bool, bool, bool, GooString*, SysFontType, int, GooString*)@plt
0xb5720 void std::__insertion_sort<SplashXPathSeg*, __gnu_cxx::__ops::_Iter_comp_iter<cmpXPathSegsFunctor> >(SplashXPathSeg*, SplashXPathSeg*, __gnu_cxx::__ops::_Iter_comp_iter<cmpXPathSegsFunctor>)@plt
0xb5730 Annot::update(char const*, Object*)@plt
0xb5740 ImageStream::close()@plt
0xb5750 GfxColorTransform::unref()@plt
0xb5760 gfree@plt
0xb5770 png_set_sRGB@plt
0xb5780 unlink@plt
0xb5790 CachedFile::cache(unsigned long, unsigned long)@plt
0xb57a0 TextFontInfo::TextFontInfo(GfxState*)@plt
0xb57b0 CMap::parse(CMapCache*, GooString*, GooString*, Stream*)@plt
0xb57c0 strncmp@plt
0xb57d0 AnnotStamp::AnnotStamp(PDFDoc*, Dict*, Object*)@plt
0xb57e0 Hints::~Hints()@plt
0xb57f0 FormFieldChoice::getSelectedChoice()@plt
0xb5800 PSOutputDev::setupEmbeddedType1CFont(GfxFont*, Ref*, GooString*)@plt
0xb5810 TextPage::addWord(TextWord*)@plt
0xb5820 FormWidgetButton::FormWidgetButton(PDFDoc*, Object*, unsigned int, Ref, FormField*)@plt
0xb5830 ASCIIHexStream::ASCIIHexStream(Stream*)@plt
0xb5840 SplashFontSrc::ref()@plt
0xb5850 SplashXPath::grow(int)@plt
0xb5860 grandom_fill@plt
0xb5870 FormWidget::createWidgetAnnotation()@plt
0xb5880 StructElement::parse(Dict*)@plt
0xb5890 AnnotPath::parsePathArray(Array*)@plt
0xb58a0 ViewerPreferences::init()@plt
0xb58b0 TextSelectionDumper::takeWordList(int*)@plt
0xb58c0 StructTreeRoot::StructTreeRoot(PDFDoc*, Dict*)@plt
0xb58d0 GlobalParams::getUnicodeMap2(GooString*)@plt
0xb58e0 SysFontInfo::match(GooString*, bool, bool)@plt
0xb58f0 GooHash::GooHash(bool)@plt
0xb5900 GfxPath::~GfxPath()@plt
0xb5910 OCGs::allOn(Array*)@plt
0xb5920 FormFieldChoice::select(int)@plt
0xb5930 SplashState::setSoftMask(SplashBitmap*)@plt
0xb5940 Movie::Movie(Object*, Object*)@plt
0xb5950 PDFDoc::writePageObjects(OutStream*, XRef*, unsigned int, bool)@plt
0xb5960 GfxState::textShift(double, double)@plt
0xb5970 FoFiBase::getU32LE(int, bool*)@plt
0xb5980 log10@plt
0xb5990 CachedFileStream::CachedFileStream(CachedFile*, long long, bool, long long, Object*)@plt
0xb59a0 GlobalParams::addUnicodeMap(GooString*, GooString*)@plt
0xb59b0 ASCII85Encoder::~ASCII85Encoder()@plt
0xb59c0 PopplerCacheKey::~PopplerCacheKey()@plt
0xb59d0 FT_Outline_Check@plt
0xb59e0 ImageStream::~ImageStream()@plt
0xb59f0 Splash::~Splash()@plt
0xb5a00 FormFieldButton::getState(char*)@plt
0xb5a10 NameTree::Entry::~Entry()@plt
0xb5a20 GlobalParams::addCMapDir(GooString*, GooString*)@plt
0xb5a30 TextPool::~TextPool()@plt
0xb5a40 SplashXPath::SplashXPath(SplashPath*, double*, double, bool, bool, int)@plt
0xb5a50 SplashPath::grow(int)@plt
0xb5a60 XRef::writeXRef(XRef::XRefWriter*, bool)@plt
0xb5a70 Annot::inRect(double, double) const@plt
0xb5a80 TiffWriter::~TiffWriter()@plt
0xb5a90 std::vector<StructTreeRoot::Parent, std::allocator<StructTreeRoot::Parent> >::operator=(std::vector<StructTreeRoot::Parent, std::allocator<StructTreeRoot::Parent> > const&)@plt
0xb5aa0 Page::displaySlice(OutputDev*, double, double, int, bool, bool, int, int, int, int, bool, bool (*)(void*), void*, bool (*)(Annot*, void*), void*, bool)@plt
0xb5ab0 Linearization::getHintsLength()@plt
0xb5ac0 PreScanOutputDev::PreScanOutputDev(PDFDoc*)@plt
0xb5ad0 AnnotBorderBS::getStyleName() const@plt
0xb5ae0 GfxLabColorSpace::GfxLabColorSpace()@plt
0xb5af0 rewinddir@plt
0xb5b00 FileOutStream::~FileOutStream()@plt
0xb5b10 Linearization::getHintsLength2()@plt
0xb5b20 Splash::makeStrokePath(SplashPath*, double, bool)@plt
0xb5b30 void std::__heap_select<TrueTypeLoca*, __gnu_cxx::__ops::_Iter_comp_iter<cmpTrueTypeLocaOffsetFunctor> >(TrueTypeLoca*, TrueTypeLoca*, TrueTypeLoca*, __gnu_cxx::__ops::_Iter_comp_iter<cmpTrueTypeLocaOffsetFunctor>)@plt
0xb5b40 NameTree::Entry::Entry(Array*, int)@plt
0xb5b50 getcwd@plt
0xb5b60 FoFiTrueType::convertToType0(char*, int*, int, bool, void (*)(void*, char const*, int), void*)@plt
0xb5b70 PageAttrs::clipBoxes()@plt
0xb5b80 SplashFontEngine::getFontFile(SplashFontFileID*)@plt
0xb5b90 Splash::fillGlyph(double, double, SplashGlyphBitmap*)@plt
0xb5ba0 AnnotPopup::initialize(PDFDoc*, Dict*)@plt
0xb5bb0 TextFontInfo::matches(TextFontInfo*)@plt
0xb5bc0 strncpy@plt
0xb5bd0 SplashState::SplashState(int, int, bool, SplashScreen*)@plt
0xb5be0 Gfx::pushMarkedContent()@plt
0xb5bf0 GlobalParams::findToUnicodeFile(GooString*)@plt
0xb5c00 GfxShading::init(GfxResources*, Dict*, OutputDev*, GfxState*)@plt
0xb5c10 XRef::removeIndirectObject(Ref)@plt
0xb5c20 Annot::~Annot()@plt
0xb5c30 LZWStream::LZWStream(Stream*, int, int, int, int, int)@plt
0xb5c40 std::__throw_length_error(char const*)@plt
0xb5c50 BaseStream::~BaseStream()@plt
0xb5c60 Splash::scaleMaskYdXu(bool (*)(void*, unsigned char*), void*, int, int, int, int, SplashBitmap*)@plt
0xb5c70 FormFieldText::FormFieldText(PDFDoc*, Object*, Ref const&, FormField*, std::set<int, std::less<int>, std::allocator<int> >*)@plt
0xb5c80 LinkGoTo::~LinkGoTo()@plt
0xb5c90 GlobalParams::getScreenType()@plt
0xb5ca0 GooHash::hash(GooString*)@plt
0xb5cb0 TextFontInfo::~TextFontInfo()@plt
0xb5cc0 XRef::getCatalog(Object*)@plt
0xb5cd0 fmin@plt
0xb5ce0 TiffWriter::setCompressionString(char const*)@plt
0xb5cf0 CMapCache::getCMap(GooString*, GooString*, Stream*)@plt
0xb5d00 GfxResources::lookupGState(char*, Object*)@plt
0xb5d10 FormWidgetButton::~FormWidgetButton()@plt
0xb5d20 Splash::setTransfer(unsigned char*, unsigned char*, unsigned char*, unsigned char*)@plt
0xb5d30 Gfx8BitFont::getCharProcs()@plt
0xb5d40 BuiltinFontWidths::getWidth(char const*, unsigned short*)@plt
0xb5d50 Annots::appendAnnot(Annot*)@plt
0xb5d60 Splash::restoreState()@plt
0xb5d70 PopplerCacheItem::~PopplerCacheItem()@plt
0xb5d80 Parser::~Parser()@plt
0xb5d90 memset@plt
0xb5da0 abort@plt
0xb5db0 PopplerCache::put(PopplerCacheKey*, PopplerCacheItem*)@plt
0xb5dc0 StructElement::StructElement(Dict*, StructTreeRoot*, StructElement*, std::set<int, std::less<int>, std::allocator<int> >&)@plt
0xb5dd0 GfxUnivariateShading::~GfxUnivariateShading()@plt
0xb5de0 Annots::Annots(PDFDoc*, int, Object*)@plt
0xb5df0 RGBGrayEncoder::RGBGrayEncoder(Stream*)@plt
0xb5e00 PageLabelInfo::Interval::Interval(Object*, int)@plt
0xb5e10 LinkAction::parseDest(Object*)@plt
0xb5e20 PSOutputDev::dumpColorSpaceL2(GfxColorSpace*, bool, bool, bool)@plt
0xb5e30 XRef::getDocInfoNF(Object*)@plt
0xb5e40 JArithmeticDecoder::decodeInt(int*, JArithmeticDecoderStats*)@plt
0xb5e50 CharCodeToUnicodeCache::getCharCodeToUnicode(GooString*)@plt
0xb5e60 FoFiType1C::readFD(int, int, Type1CPrivateDict*)@plt
0xb5e70 Decrypt::makeFileKey2(int, int, int, GooString*, GooString*, int, GooString*, GooString*, unsigned char*, bool)@plt
0xb5e80 OCDisplayNode::takeChildren()@plt
0xb5e90 AnnotStamp::~AnnotStamp()@plt
0xb5ea0 std::vector<PageAttrs*, std::allocator<PageAttrs*> >::_M_insert_aux(__gnu_cxx::__normal_iterator<PageAttrs**, std::vector<PageAttrs*, std::allocator<PageAttrs*> > >, PageAttrs* const&)@plt
0xb5eb0 PDFDoc::getLinearization()@plt
0xb5ec0 AnnotWidget::generateFieldAppearance()@plt
0xb5ed0 void std::__introsort_loop<GfxFontCIDWidthExcepV*, long, __gnu_cxx::__ops::_Iter_comp_iter<cmpWidthExcepVFunctor> >(GfxFontCIDWidthExcepV*, GfxFontCIDWidthExcepV*, long, __gnu_cxx::__ops::_Iter_comp_iter<cmpWidthExcepVFunctor>)@plt
0xb5ee0 cmsSetLogErrorHandler@plt
0xb5ef0 GlobalParams::getPSExpandSmaller()@plt
0xb5f00 Matrix::transform(double, double, double*, double*) const@plt
0xb5f10 Links::Links(Annots*)@plt
0xb5f20 Splash::getScreen()@plt
0xb5f30 TextLine::TextLine(TextBlock*, int, double)@plt
0xb5f40 TextPage::updateFont(GfxState*)@plt
0xb5f50 OptionalContentGroup::getName() const@plt
0xb5f60 DeviceNRecoder::fillBuf()@plt
0xb5f70 XRef::writeTableToFile(OutStream*, bool)@plt
0xb5f80 OCDisplayNode::~OCDisplayNode()@plt
0xb5f90 AnnotLine::initialize(PDFDoc*, Dict*)@plt
0xb5fa0 void std::__heap_select<SplashScreenPoint*, __gnu_cxx::__ops::_Iter_comp_iter<cmpDistancesFunctor> >(SplashScreenPoint*, SplashScreenPoint*, SplashScreenPoint*, __gnu_cxx::__ops::_Iter_comp_iter<cmpDistancesFunctor>)@plt
0xb5fb0 FormField::_createWidget(Object*, Ref)@plt
0xb5fc0 GooHash::add(GooString*, int)@plt
0xb5fd0 FoFiType1C::convertToType1(char*, char const**, bool, void (*)(void*, char const*, int), void*)@plt
0xb5fe0 GlobalParams::parseNameToUnicode(GooString*)@plt
0xb5ff0 FoFiType1::getEncoding()@plt
0xb6000 Linearization::getLength()@plt
0xb6010 FoFiBase::checkRegion(int, int)@plt
0xb6020 fseeko@plt
0xb6030 GlobalParams::getPSResidentFonts()@plt
0xb6040 PDFDoc::checkEncryption(GooString*, GooString*)@plt
0xb6050 png_write_info@plt
0xb6060 Gfx::fillPatch(GfxPatch*, int, int, double, int, GfxPatchMeshShading*)@plt
0xb6070 BuiltinFontWidths::~BuiltinFontWidths()@plt
0xb6080 PDFDoc::writeStream(Stream*, OutStream*)@plt
0xb6090 GfxGouraudTriangleShading::~GfxGouraudTriangleShading()@plt
0xb60a0 void std::__make_heap<SplashXPathSeg*, __gnu_cxx::__ops::_Iter_comp_iter<cmpXPathSegsFunctor> >(SplashXPathSeg*, SplashXPathSeg*, __gnu_cxx::__ops::_Iter_comp_iter<cmpXPathSegsFunctor>)@plt
0xb60b0 cmsDoTransform@plt
0xb60c0 Hints::readBit(Stream*)@plt
0xb60d0 GfxLabColorSpace::getXYZ(GfxColor*, double*, double*, double*)@plt
0xb60e0 CMap::useCMap(CMapCache*, Object*)@plt
0xb60f0 ActualText::addChar(GfxState*, double, double, double, double, unsigned int, int, unsigned int*, int)@plt
0xb6100 AnnotAppearance::AnnotAppearance(PDFDoc*, Object*)@plt
0xb6110 CachedFileStream::~CachedFileStream()@plt
0xb6120 SplashFontFile::SplashFontFile(SplashFontFileID*, SplashFontSrc*)@plt
0xb6130 GfxShading::GfxShading(int)@plt
0xb6140 Catalog::getNumPages()@plt
0xb6150 SplashFontFileID::SplashFontFileID()@plt
0xb6160 GooHash::hash(char const*)@plt
0xb6170 PDFDoc::getHints()@plt
0xb6180 FilterStream::FilterStream(Stream*)@plt
0xb6190 CachedFile::~CachedFile()@plt
0xb61a0 std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)@plt
0xb61b0 LinkNamed::LinkNamed(Object*)@plt
0xb61c0 AnnotAppearance::getNumStates()@plt
0xb61d0 GooHash::startIter(GooHashIter**)@plt
0xb61e0 JBIG2Bitmap::JBIG2Bitmap(unsigned int, int, int)@plt
0xb61f0 FormWidgetChoice::FormWidgetChoice(PDFDoc*, Object*, unsigned int, Ref, FormField*)@plt
0xb6200 PSOutCustomColor::PSOutCustomColor(double, double, double, double, GooString*)@plt
0xb6210 sincos@plt
0xb6220 PDFDoc::markAnnotations(Object*, XRef*, XRef*, unsigned int, int, int)@plt
0xb6230 GfxICCBasedColorSpace::GfxICCBasedColorSpace(int, GfxColorSpace*, Ref*)@plt
0xb6240 SplashPath::close(bool)@plt
0xb6250 FoFiTrueType::computeTableChecksum(unsigned char*, int)@plt
0xb6260 FT_Get_Glyph@plt
0xb6270 AnnotPopup::setParent(Annot*)@plt
0xb6280 NameTree::addEntry(NameTree::Entry*)@plt
0xb6290 CharCodeToUnicode::CharCodeToUnicode(GooString*, unsigned int*, unsigned int, bool, CharCodeToUnicodeString*, int, int)@plt
0xb62a0 ImageStream::reset()@plt
0xb62b0 GfxPattern::~GfxPattern()@plt
0xb62c0 GfxShading::~GfxShading()@plt
0xb62d0 MarkedContentOutputDev::getTextSpans() const@plt
0xb62e0 SplashScreen::SplashScreen(SplashScreenParams*)@plt
0xb62f0 OCGs::findOcgByRef(Ref const&)@plt
0xb6300 OutputDev::getIccColorSpaceCache()@plt
0xb6310 Splash::setMiterLimit(double)@plt
0xb6320 SplashBitmap::writeImgFile(SplashImageFileFormat, _IO_FILE*, int, int, char const*)@plt
0xb6330 FormWidget::FormWidget(PDFDoc*, Object*, unsigned int, Ref, FormField*)@plt
0xb6340 SplashPath::SplashPath()@plt
0xb6350 FoFiType1C::getIndex(int, Type1CIndex*, bool*)@plt
0xb6360 AnnotWidget::getFormAdditionalAction(Annot::FormAdditionalActionsType)@plt
0xb6370 SplashPattern::SplashPattern()@plt
0xb6380 CachedFileStream::close()@plt
0xb6390 FormWidget::~FormWidget()@plt
0xb63a0 FcPatternGetString@plt
0xb63b0 FontInfoScanner::scanFonts(XRef*, Dict*, GooList*)@plt
0xb63c0 PSOutputDev::setupEmbeddedOpenTypeCFFFont(GfxFont*, Ref*, GooString*)@plt
0xb63d0 Sound::parseSound(Object*)@plt
0xb63e0 PopplerObjectCache::put(Ref const&)@plt
0xb63f0 void std::__introsort_loop<SplashXPathSeg*, long, __gnu_cxx::__ops::_Iter_comp_iter<cmpXPathSegsFunctor> >(SplashXPathSeg*, SplashXPathSeg*, long, __gnu_cxx::__ops::_Iter_comp_iter<cmpXPathSegsFunctor>)@plt
0xb6400 __cxa_guard_release@plt
0xb6410 JBIG2MMRDecoder::skipTo(unsigned int)@plt
0xb6420 __assert_fail@plt
0xb6430 AnnotAppearanceCharacs::AnnotAppearanceCharacs(Dict*)@plt
0xb6440 JArithmeticDecoderStats::reset()@plt
0xb6450 MarkedContentOutputDev::needFontChange(GfxFont*) const@plt
0xb6460 JBIG2MMRDecoder::get24Bits()@plt
0xb6470 unicodeTypeL(unsigned int)@plt
0xb6480 CharCodeToUnicode::CharCodeToUnicode()@plt
0xb6490 Splash::scaleMask(bool (*)(void*, unsigned char*), void*, int, int, int, int)@plt
0xb64a0 GfxState::setLineDash(double*, int, double)@plt
0xb64b0 jpeg_read_scanlines@plt
0xb64c0 initBuiltinFontTables()@plt
0xb64d0 GooHash::lookup(GooString*)@plt
0xb64e0 Page::processLinks(OutputDev*)@plt
0xb64f0 GlobalParams::getUnicodeMapFile(GooString*)@plt
0xb6500 AnnotGeometry::~AnnotGeometry()@plt
0xb6510 Function::parse(Object*, std::set<int, std::less<int>, std::allocator<int> >*)@plt
0xb6520 Catalog::getDestNameTree()@plt
0xb6530 Gfx::popStateGuard()@plt
0xb6540 CMap::freeCMapVector(CMapVectorEntry*)@plt
0xb6550 NameTree::~NameTree()@plt
0xb6560 GfxTilingPattern::parse(Object*)@plt
0xb6570 FormFieldButton::FormFieldButton(PDFDoc*, Object*, Ref const&, FormField*, std::set<int, std::less<int>, std::allocator<int> >*)@plt
0xb6580 GlobalParams::getScreenGamma()@plt
0xb6590 GfxResources::lookupMarkedContentNF(char*, Object*)@plt
0xb65a0 ImageStream::getPixel(unsigned char*)@plt
0xb65b0 FoFiType1::undoPFB()@plt
0xb65c0 unicodeTypeR(unsigned int)@plt
0xb65d0 opj_cio_open@plt
0xb65e0 FormWidgetChoice::hasEdit() const@plt
0xb65f0 SplashPath::lineTo(double, double)@plt
0xb6600 PSStack::copy(int)@plt
0xb6610 CharCodeToUnicode::makeIdentityMapping()@plt
0xb6620 GfxResources::~GfxResources()@plt
0xb6630 SplashSolidColor::~SplashSolidColor()@plt
0xb6640 FcFontSort@plt
0xb6650 TextSelectionSizer::TextSelectionSizer(TextPage*, double)@plt
0xb6660 AnnotPopup::AnnotPopup(PDFDoc*, Dict*, Object*)@plt
0xb6670 XRef::getStreamEnd(long long, long long*)@plt
0xb6680 CCITTFaxStream::CCITTFaxStream(Stream*, int, bool, bool, int, int, bool, bool)@plt
0xb6690 Gfx::doPatchMeshShFill(GfxPatchMeshShading*)@plt
0xb66a0 FT_Init_FreeType@plt
0xb66b0 AnnotWidget::AnnotWidget(PDFDoc*, Dict*, Object*, FormField*)@plt
0xb66c0 NameTree::getValue(int)@plt
0xb66d0 GfxState::clearPath()@plt
0xb66e0 GfxPatchMeshShading::GfxPatchMeshShading(GfxPatchMeshShading*)@plt
0xb66f0 TextPage::makeWordList(bool)@plt
0xb6700 std::_Rb_tree_increment(std::_Rb_tree_node_base*)@plt
0xb6710 PDFDoc::saveWithoutChangesAs(OutStream*)@plt
0xb6720 UnicodeMap::mapUnicode(unsigned int, char*, int)@plt
0xb6730 PSOutputDev::writePSString(GooString*)@plt
0xb6740 SplashXPath::sort()@plt
0xb6750 StructElement::~StructElement()@plt
0xb6760 SplashXPathScanner::getBBoxAA(int*, int*, int*, int*)@plt
0xb6770 StructElement::parseChildren(Dict*, std::set<int, std::less<int>, std::allocator<int> >&)@plt
0xb6780 SplashFontSrc::setFile(GooString*, bool)@plt
0xb6790 Splash::getFillPattern()@plt
0xb67a0 StructElement::parseAttributes(Dict*, bool)@plt
0xb67b0 void std::__introsort_loop<DictEntry*, long, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(DictEntry const&, DictEntry const&)> >(DictEntry*, DictEntry*, long, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(DictEntry const&, DictEntry const&)>)@plt
0xb67c0 JBIG2MMRDecoder::get2DCode()@plt
0xb67d0 RunLengthStream::fillBuf()@plt
0xb67e0 GfxState::ReusablePathIterator::ReusablePathIterator(GfxPath*)@plt
0xb67f0 TextSelectionPainter::endPage()@plt
0xb6800 sscanf@plt
0xb6810 GfxGouraudTriangleShading::getParameterizedColor(double, GfxColor*)@plt
0xb6820 TextPage::visitSelection(TextSelectionVisitor*, PDFRectangle*, SelectionStyle)@plt
0xb6830 GfxImageColorMap::getRGBLine(unsigned char*, unsigned char*, int)@plt
0xb6840 StructElement::StructData::~StructData()@plt
0xb6850 EmbFile::EmbFile(Object*)@plt
0xb6860 Gfx::opSetRenderingIntent(Object*, int)@plt
0xb6870 Gfx8BitFont::getCodeToGIDMap(FoFiTrueType*)@plt
0xb6880 LinkURI::LinkURI(Object*, GooString*)@plt
0xb6890 Function::Function()@plt
0xb68a0 PSOutputDev::setupForm(Ref, Object*)@plt
0xb68b0 JBIG2Stream::readPageInfoSeg(unsigned int)@plt
0xb68c0 OCDisplayNode::getNumChildren()@plt
0xb68d0 SplashXPathScanner::computeIntersections()@plt
0xb68e0 PSOutputDev::makePSFontName(GfxFont*, Ref*)@plt
0xb68f0 gstrndup@plt
0xb6900 XRef::XRefStreamWriter::XRefStreamWriter(Object*, GooString*, int)@plt
0xb6910 FoFiBase::~FoFiBase()@plt
0xb6920 SplashXPathScanner::SplashXPathScanner(SplashXPath*, bool, int, int)@plt
0xb6930 open@plt
0xb6940 SysFontList::find(GooString*, bool, bool)@plt
0xb6950 Splash::compositeBackground(unsigned char*)@plt
0xb6960 PSOutputDev::tilingPatternFillL1(GfxState*, Catalog*, Object*, double*, int, int, Dict*, double*, double*, int, int, int, int, double, double)@plt
0xb6970 GfxCalRGBColorSpace::parse(Array*, GfxState*)@plt
0xb6980 TextSelectionDumper::TextSelectionDumper(TextPage*)@plt
0xb6990 GfxPatchMeshShading::GfxPatchMeshShading(int, GfxPatch*, int, Function**, int)@plt
0xb69a0 Annot::createResourcesDict(char const*, Object*, char const*, double, char const*, Object*)@plt
0xb69b0 GfxDeviceRGBColorSpace::GfxDeviceRGBColorSpace()@plt
0xb69c0 FT_Library_Version@plt
0xb69d0 std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase(std::_Rb_tree_node<int>*)@plt
0xb69e0 FcLangSetContains@plt
0xb69f0 JBIG2Stream::readLong(int*)@plt
0xb6a00 PSTokenizer::~PSTokenizer()@plt
0xb6a10 OutlineItem::~OutlineItem()@plt
0xb6a20 AnnotMovie::~AnnotMovie()@plt
0xb6a30 ASCIIHexEncoder::fillBuf()@plt
0xb6a40 Linearization::getEndFirst()@plt
0xb6a50 GfxFunctionShading::~GfxFunctionShading()@plt
0xb6a60 TIFFFdOpen@plt
0xb6a70 PSOutputDev::doImageL1Sep(Object*, GfxImageColorMap*, bool, bool, Stream*, int, int, int, int*, Stream*, int, int, bool)@plt
0xb6a80 GooString::formatUInt(unsigned long long, char*, int, bool, int, int, char**, int*, bool)@plt
0xb6a90 pthread_mutex_unlock@plt
0xb6aa0 GfxCalGrayColorSpace::~GfxCalGrayColorSpace()@plt
0xb6ab0 PSOutputDev::setupEmbeddedTrueTypeFont(GfxFont*, Ref*, GooString*)@plt
0xb6ac0 PDFRectangle::clipTo(PDFRectangle*)@plt
0xb6ad0 Annot::decRefCnt()@plt
0xb6ae0 Catalog::getForm()@plt
0xb6af0 std::vector<Dict*, std::allocator<Dict*> >::_M_insert_aux(__gnu_cxx::__normal_iterator<Dict**, std::vector<Dict*, std::allocator<Dict*> > >, Dict* const&)@plt
0xb6b00 jpeg_set_colorspace@plt
0xb6b10 AnnotInk::~AnnotInk()@plt
0xb6b20 AnnotAppearance::referencesStream(Ref)@plt
0xb6b30 Gfx8BitFont::Gfx8BitFont(XRef*, char const*, Ref, GooString*, GfxFontType, Ref, Dict*)@plt
0xb6b40 Splash::scaleMaskYdXd(bool (*)(void*, unsigned char*), void*, int, int, int, int, SplashBitmap*)@plt
0xb6b50 GfxCalRGBColorSpace::GfxCalRGBColorSpace()@plt
0xb6b60 SplashGouraudPattern::SplashGouraudPattern(bool, GfxState*, GfxGouraudTriangleShading*, SplashColorMode)@plt
0xb6b70 opj_image_destroy@plt
0xb6b80 GlobalParams::getTextPageBreaks()@plt
0xb6b90 SplashOutputDev::setOverprintMask(GfxColorSpace*, bool, int, GfxColor*, bool)@plt
0xb6ba0 png_destroy_write_struct@plt
0xb6bb0 SplashXPathScanner::addIntersection(double, double, unsigned int, int, int, int)@plt
0xb6bc0 FoFiTrueType::getEmbeddingRights()@plt
0xb6bd0 JPXStream::~JPXStream()@plt
0xb6be0 SampledFunction::SampledFunction(Object*, Dict*)@plt
0xb6bf0 void std::__unguarded_linear_insert<SplashXPathSeg*, __gnu_cxx::__ops::_Val_comp_iter<cmpXPathSegsFunctor> >(SplashXPathSeg*, __gnu_cxx::__ops::_Val_comp_iter<cmpXPathSegsFunctor>)@plt
0xb6c00 PSOutputDev::setupFont(GfxFont*, Dict*)@plt
0xb6c10 GfxLabColorSpace::~GfxLabColorSpace()@plt
0xb6c20 Attribute::checkType(StructElement*)@plt
0xb6c30 png_set_iCCP@plt
0xb6c40 MediaParameters::~MediaParameters()@plt
0xb6c50 GDir::GDir(char*, bool)@plt
0xb6c60 Splash::getSoftMask()@plt
0xb6c70 FoFiTrueType::convertToCIDType0(char*, int*, int, void (*)(void*, char const*, int), void*)@plt
0xb6c80 CharCodeToUnicode::parseCMapFromFile(GooString*, int)@plt
0xb6c90 GlobalParams::addCIDToUnicode(GooString*, GooString*)@plt
0xb6ca0 strtod@plt
0xb6cb0 PSTokenizer::lookChar()@plt
0xb6cc0 Hints::readBits(int, Stream*)@plt
0xb6cd0 Stream::addFilters(Object*, int)@plt
0xb6ce0 TextPage::getSelectionText(PDFRectangle*, SelectionStyle)@plt
0xb6cf0 JArithmeticDecoderStats::copy()@plt
0xb6d00 SplashOutputDev::SplashOutputDev(SplashColorMode, int, bool, unsigned char*, bool, SplashThinLineMode, bool)@plt
0xb6d10 GfxColorSpace::~GfxColorSpace()@plt
0xb6d20 hypot@plt
0xb6d30 sqrt@plt
0xb6d40 JBIG2HuffmanDecoder::~JBIG2HuffmanDecoder()@plt
0xb6d50 AnnotTextMarkup::AnnotTextMarkup(PDFDoc*, Dict*, Object*)@plt
0xb6d60 SplashXPathScanner::testSpan(int, int, int)@plt
0xb6d70 Splash::fill(SplashPath*, bool)@plt
0xb6d80 std::vector<Attribute*, std::allocator<Attribute*> >::_M_insert_aux(__gnu_cxx::__normal_iterator<Attribute**, std::vector<Attribute*, std::allocator<Attribute*> > >, Attribute* const&)@plt
0xb6d90 Splash::makeDashedPath(SplashPath*)@plt
0xb6da0 XRef::markUnencrypted(Object*)@plt
0xb6db0 Lexer::Lexer(XRef*, Stream*)@plt
0xb6dc0 PSOutputDev::addProcessColor(double, double, double, double)@plt
0xb6dd0 GooString::Set(char const*, int, char const*, int)@plt
0xb6de0 ExponentialFunction::ExponentialFunction(Object*, Dict*)@plt
0xb6df0 Gfx::buildImageStream()@plt
0xb6e00 PSOutputDev::setupEmbeddedType1Font(Ref*, GooString*)@plt
0xb6e10 PDFDoc::PDFDoc(GooString*, GooString*, GooString*, void*)@plt
0xb6e20 GfxPath::moveTo(double, double)@plt
0xb6e30 SplashScreen::createMatrix()@plt
0xb6e40 Splash::vertFlipImage(SplashBitmap*, int, int, int)@plt
0xb6e50 GfxColorTransform::ref()@plt
0xb6e60 ASCIIHexStream::~ASCIIHexStream()@plt
0xb6e70 Gfx::restoreStateStack(GfxState*)@plt
0xb6e80 PopplerCacheKey::~PopplerCacheKey()@plt
0xb6e90 Annot::setPage(int, bool)@plt
0xb6ea0 AnnotColor::AnnotColor()@plt
0xb6eb0 GfxCIDFont::GfxCIDFont(XRef*, char const*, Ref, GooString*, GfxFontType, Ref, Dict*)@plt
0xb6ec0 Page::getAnnots(XRef*)@plt
0xb6ed0 AnnotMarkup::~AnnotMarkup()@plt
0xb6ee0 TIFFWriteScanline@plt
0xb6ef0 SplashBitmap::SplashBitmap(int, int, int, SplashColorMode, bool, bool, GooList*)@plt
0xb6f00 Gfx::checkTransparencyGroup(Dict*)@plt
0xb6f10 AnnotBorder::~AnnotBorder()@plt
0xb6f20 Annots::removeAnnot(Annot*)@plt
0xb6f30 timeToDateString(long*)@plt
0xb6f40 AnnotCalloutLine::AnnotCalloutLine(double, double, double, double)@plt
0xb6f50 AnnotFileAttachment::AnnotFileAttachment(PDFDoc*, Dict*, Object*)@plt
0xb6f60 OptionalContentGroup::setRef(Ref)@plt
0xb6f70 Catalog::Catalog(PDFDoc*)@plt
0xb6f80 GfxColorTransform::GfxColorTransform(void*, int, unsigned int, unsigned int)@plt
0xb6f90 RunLengthStream::RunLengthStream(Stream*)@plt
0xb6fa0 strftime@plt
0xb6fb0 GfxSubpath::GfxSubpath(GfxSubpath*)@plt
0xb6fc0 Form::Form(PDFDoc*, Object*)@plt
0xb6fd0 Form::fieldLookup(Dict*, char const*, Object*)@plt
0xb6fe0 GfxState::ReusablePathIterator::setCoord(double, double)@plt
0xb6ff0 GfxFont::GfxFont(char const*, Ref, GooString*, GfxFontType, Ref)@plt
0xb7000 md5(unsigned char*, int, unsigned char*)@plt
0xb7010 Outline::Outline(Object*, XRef*)@plt
0xb7020 PSOutputDev::setupType3Font(GfxFont*, GooString*, Dict*)@plt
0xb7030 Gfx::pushResources(Dict*)@plt
0xb7040 memcpy@plt
0xb7050 GlobalParams::findCCFontFile(GooString*)@plt
0xb7060 XRef::addIndirectObject(Object*)@plt
0xb7070 cmsGetColorSpace@plt
0xb7080 TextOutputDev::~TextOutputDev()@plt
0xb7090 GooString::insert(int, char const*, int)@plt
0xb70a0 void std::__adjust_heap<GfxFontCIDWidthExcep*, long, GfxFontCIDWidthExcep, __gnu_cxx::__ops::_Iter_comp_iter<cmpWidthExcepFunctor> >(GfxFontCIDWidthExcep*, long, long, GfxFontCIDWidthExcep, __gnu_cxx::__ops::_Iter_comp_iter<cmpWidthExcepFunctor>)@plt
0xb70b0 StructTreeRoot::parse(Dict*)@plt
0xb70c0 GfxFunctionShading::GfxFunctionShading(double, double, double, double, double*, Function**, int)@plt
0xb70d0 PSOutputDev::addCustomColor(GfxSeparationColorSpace*)@plt
0xb70e0 TextSelectionDumper::~TextSelectionDumper()@plt
0xb70f0 Splash::getStrokePattern()@plt
0xb7100 GfxAxialShading::GfxAxialShading(double, double, double, double, double, double, Function**, int, bool, bool)@plt
0xb7110 TextPage::dump(void*, void (*)(void*, char const*, int), bool)@plt
0xb7120 FoFiType1C::getDeltaIntArray(int*, int)@plt
0xb7130 CharCodeToUnicode::mapToCharCode(unsigned int*, unsigned int*, int)@plt
0xb7140 TextPage::beginWord(GfxState*)@plt
0xb7150 OCDisplayNode::addChildren(GooList*)@plt
0xb7160 GfxPattern::GfxPattern(int)@plt
0xb7170 Parser::shift(int)@plt
0xb7180 AnnotQuadrilaterals::AnnotQuadrilaterals(Array*, PDFRectangle*)@plt
0xb7190 FoFiType1C::cvtGlyphWidth(bool, GooString*, Type1CPrivateDict*)@plt
0xb71a0 SplashFontEngine::loadOpenTypeT1CFont(SplashFontFileID*, SplashFontSrc*, char const**)@plt
0xb71b0 PDFDoc::getMainXRefEntriesOffset(bool)@plt
0xb71c0 AnnotColor::adjustColor(int)@plt
0xb71d0 GfxDeviceCMYKColorSpace::~GfxDeviceCMYKColorSpace()@plt
0xb71e0 GooString::cmpN(GooString*, int) const@plt
0xb71f0 Gfx::bottomGuard()@plt
0xb7200 std::_Rb_tree<unsigned int, std::pair<unsigned int const, unsigned int>, std::_Select1st<std::pair<unsigned int const, unsigned int> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned int const, unsigned int> >*)@plt
0xb7210 Gfx8BitFont::~Gfx8BitFont()@plt
0xb7220 AnnotBorderBS::AnnotBorderBS(Dict*)@plt
0xb7230 XRef::getDocInfo(Object*)@plt
0xb7240 JArithmeticDecoder::~JArithmeticDecoder()@plt
0xb7250 PDFDoc::getStartXRef(bool)@plt
0xb7260 Lexer::getObj(Object*, int)@plt
0xb7270 GfxImageColorMap::getCMYK(unsigned char*, GfxCMYK*)@plt
0xb7280 GfxState::shift(double, double)@plt
0xb7290 GfxCIDFont::~GfxCIDFont()@plt
0xb72a0 FoFiType1C::cvtGlyph(int, int, GooString*, Type1CIndex*, Type1CPrivateDict*, bool)@plt
0xb72b0 PDFDoc::displayPage(OutputDev*, int, double, double, int, bool, bool, bool, bool (*)(void*), void*, bool (*)(Annot*, void*), void*, bool)@plt
0xb72c0 Splash::clipToPath(SplashPath*, bool)@plt
0xb72d0 MediaRendition::~MediaRendition()@plt
0xb72e0 lseek64@plt
0xb72f0 Splash::strokeWide(SplashPath*, double)@plt
0xb7300 GooFile::open(GooString const*)@plt
0xb7310 PDFDoc::writeObjectFooter(OutStream*)@plt
0xb7320 StreamPredictor::getChars(int, unsigned char*)@plt
0xb7330 FoFiType1C::writePSString(char*, void (*)(void*, char const*, int), void*)@plt
0xb7340 OutlineItem::OutlineItem(Dict*, XRef*)@plt
0xb7350 AnnotTextMarkup::initialize(PDFDoc*, Dict*)@plt
0xb7360 Stream::~Stream()@plt
0xb7370 LinkOCGState::~LinkOCGState()@plt
0xb7380 TextBlock::isBeforeByRule1(TextBlock*)@plt
0xb7390 AnnotAppearance::removeAllStreams()@plt
0xb73a0 Linearization::getHintsOffset()@plt
0xb73b0 GfxICCBasedColorSpace::~GfxICCBasedColorSpace()@plt
0xb73c0 GfxFontLoc::~GfxFontLoc()@plt
0xb73d0 JBIG2Stream::readULong(unsigned int*)@plt
0xb73e0 AnnotAppearanceBBox::getPageYMin() const@plt
0xb73f0 GlobalParams::getResidentUnicodeMap(GooString*)@plt
0xb7400 JBIG2Stream::readGenericRefinementRegion(int, int, int, bool, JBIG2Bitmap*, int, int, int*, int*)@plt
0xb7410 GooString::~GooString()@plt
0xb7420 ObjectStream::getObject(int, int, Object*)@plt
0xb7430 GfxState::parseBlendMode(Object*, GfxBlendMode*)@plt
0xb7440 Splash::scaleMaskYuXu(bool (*)(void*, unsigned char*), void*, int, int, int, int, SplashBitmap*)@plt
0xb7450 SplashFont::getGlyph(int, int, int, SplashGlyphBitmap*, int, int, SplashClip*, SplashClipResult*)@plt
0xb7460 FileOutStream::close()@plt
0xb7470 PSOutputDev::setupExternalCIDTrueTypeFont(GfxFont*, GooString*, GooString*, bool)@plt
0xb7480 Splash::getStrokeAdjust()@plt
0xb7490 LinkGoToR::~LinkGoToR()@plt
0xb74a0 Page::Page(PDFDoc*, int, Dict*, Ref, PageAttrs*, Form*)@plt
0xb74b0 StructElement::StructElement(Ref const&, StructTreeRoot*, StructElement*)@plt
0xb74c0 OCGs::evalOCVisibilityExpr(Object*, int)@plt
0xb74d0 XRef::constructXRef(bool*, bool)@plt
0xb74e0 AnnotQuadrilaterals::getY1(int)@plt
0xb74f0 AnnotCaret::AnnotCaret(PDFDoc*, Dict*, Object*)@plt
0xb7500 SplashState::setStrokePattern(SplashPattern*)@plt
0xb7510 Form::createFieldFromDict(Object*, PDFDoc*, Ref const&, FormField*, std::set<int, std::less<int>, std::allocator<int> >*)@plt
0xb7520 ASCII85Encoder::ASCII85Encoder(Stream*)@plt
0xb7530 Gfx::doImage(Object*, Stream*, bool)@plt
0xb7540 SampledFunction::~SampledFunction()@plt
0xb7550 OutStream::~OutStream()@plt
0xb7560 void std::__move_median_to_first<DictEntry*, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(DictEntry const&, DictEntry const&)> >(DictEntry*, DictEntry*, DictEntry*, DictEntry*, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(DictEntry const&, DictEntry const&)>)@plt
0xb7570 UTF16toUCS4(unsigned int const*, int, unsigned int**)@plt
0xb7580 TextWord::TextWord(GfxState*, int, double)@plt
0xb7590 GfxSeparationColorSpace::parse(GfxResources*, Array*, OutputDev*, GfxState*, int)@plt
0xb75a0 unicodeTypeNum(unsigned int)@plt
0xb75b0 PreScanOutputDev::clearStats()@plt
0xb75c0 Annot::setLineStyleForBorder(AnnotBorder*)@plt
0xb75d0 pow@plt
0xb75e0 CMap::CMap(GooString*, GooString*)@plt
0xb75f0 SplashScreen::buildClusteredMatrix()@plt
0xb7600 MediaWindowParameters::parseFWParams(Object*)@plt
0xb7610 GooString::cmp(char const*) const@plt
0xb7620 SplashFTFontEngine::loadOpenTypeCFFFont(SplashFontFileID*, SplashFontSrc*, int*, int)@plt
0xb7630 TiffWriter::TiffWriter(TiffWriter::Format)@plt
0xb7640 CMap::~CMap()@plt
0xb7650 OCDisplayNode::OCDisplayNode(OptionalContentGroup*)@plt
0xb7660 Splash::flattenPath(SplashPath*, double*, double)@plt
0xb7670 LinkDest::LinkDest(Array*)@plt
0xb7680 PDFDoc::writeString(GooString*, OutStream*, unsigned char*, CryptAlgorithm, int, int, int)@plt
0xb7690 GfxState::ReusablePathIterator::next()@plt
0xb76a0 JArithmeticDecoder::start()@plt
0xb76b0 GfxShadingBitBuf::GfxShadingBitBuf(Stream*)@plt
0xb76c0 JArithmeticDecoderStats::~JArithmeticDecoderStats()@plt
0xb76d0 BaseCryptStream::~BaseCryptStream()@plt
0xb76e0 FoFiTrueType::getCIDToGIDMap(int*)@plt
0xb76f0 GlobalParams::getTextKeepTinyChars()@plt
0xb7700 GfxIndexedColorSpace::parse(GfxResources*, Array*, OutputDev*, GfxState*, int)@plt
0xb7710 PSOutputDev::writePageTrailer()@plt
0xb7720 SplashClip::clipToPath(SplashPath*, double*, double, bool)@plt
0xb7730 time@plt
0xb7740 parseAnnotLineEndingStyle(GooString*)@plt
0xb7750 CCITTFaxStream::getWhiteCode()@plt
0xb7760 GfxImageColorMap::GfxImageColorMap(int, Object*, GfxColorSpace*)@plt
0xb7770 AnnotWidget::drawListBox(FormFieldChoice*, GooString*, GfxResources*, int)@plt
0xb7780 strcpy@plt
0xb7790 GfxUnivariateShading::~GfxUnivariateShading()@plt
0xb77a0 PDFDoc::markDictionnary(Dict*, XRef*, XRef*, unsigned int, int, int)@plt
0xb77b0 Splash::setFillOverprint(bool)@plt
0xb77c0 Stream::makeFilter(char*, Stream*, Object*, int, Object*)@plt
0xb77d0 StitchingFunction::StitchingFunction(StitchingFunction const*)@plt
0xb77e0 GfxResources::lookupPattern(char*, OutputDev*, GfxState*)@plt
0xb77f0 GooHash::add(GooString*, void*)@plt
0xb7800 OutlineItem::close()@plt
0xb7810 AnnotPopup::~AnnotPopup()@plt
0xb7820 FoFiType1C::getDeltaFPArray(double*, int)@plt
0xb7830 PSOutputDev::setupImages(Dict*)@plt
0xb7840 ImageStream::getLine()@plt
0xb7850 StreamPredictor::lookChar()@plt
0xb7860 FoFiTrueType::convertToCIDType2(char*, int*, int, bool, void (*)(void*, char const*, int), void*)@plt
0xb7870 operator delete(void*)@plt
0xb7880 Splash::setLineDash(double*, int, double)@plt
0xb7890 PSOutputDev::setupExternalType1Font(GooString*, GooString*)@plt
0xb78a0 Annot::incRefCnt()@plt
0xb78b0 XRef::readXRefStreamSection(Stream*, int*, int, int)@plt
0xb78c0 TextLine::addWord(TextWord*)@plt
0xb78d0 void std::__adjust_heap<TrueTypeLoca*, long, TrueTypeLoca, __gnu_cxx::__ops::_Iter_comp_iter<cmpTrueTypeLocaIdxFunctor> >(TrueTypeLoca*, long, long, TrueTypeLoca, __gnu_cxx::__ops::_Iter_comp_iter<cmpTrueTypeLocaIdxFunctor>)@plt
0xb78e0 cmsCreateXYZProfile@plt
0xb78f0 acos@plt
0xb7900 CachedFile::decRefCnt()@plt
0xb7910 RunLengthEncoder::~RunLengthEncoder()@plt
0xb7920 JBIG2Bitmap::~JBIG2Bitmap()@plt
0xb7930 SplashFontSrc::SplashFontSrc()@plt
0xb7940 AnnotAppearance::getAppearanceStream(AnnotAppearance::AnnotAppearanceType, char const*, Object*)@plt
0xb7950 StandardSecurityHandler::~StandardSecurityHandler()@plt
0xb7960 Hints::readSharedObjectsTable(Stream*)@plt
0xb7970 FoFiTrueType::getCmapPlatform(int)@plt
0xb7980 PSTokenizer::consumeChar()@plt
0xb7990 SplashFTFont::SplashFTFont(SplashFTFontFile*, double*, double*)@plt
0xb79a0 std::_Rb_tree<int, std::pair<int const, int>, std::_Select1st<std::pair<int const, int> >, std::less<int>, std::allocator<std::pair<int const, int> > >::_M_erase(std::_Rb_tree_node<std::pair<int const, int> >*)@plt
0xb79b0 Array::get(int, Object*, int)@plt
0xb79c0 SplashFTFont::~SplashFTFont()@plt
0xb79d0 LinkAction::parseAction(Object*, GooString*)@plt
0xb79e0 PSOutputDev::setupExternalTrueTypeFont(GfxFont*, GooString*, GooString*)@plt
0xb79f0 Gfx::doFunctionShFill1(GfxFunctionShading*, double, double, double, double, GfxColor*, int)@plt
0xb7a00 OutlineItem::readItemList(Object*, Object*, XRef*)@plt
0xb7a10 Page::makeBox(double, double, int, bool, bool, double, double, double, double, PDFRectangle*, bool*)@plt
0xb7a20 FormWidgetButton::getOnStr()@plt
0xb7a30 PDFDoc::ErrorPDFDoc(int, GooString*)@plt
0xb7a40 UnicodeMap::~UnicodeMap()@plt
0xb7a50 GfxFont::readFontDescriptor(XRef*, Dict*)@plt
0xb7a60 TextPage::TextPage(bool)@plt
0xb7a70 XRef::writeStreamToBuffer(GooString*, Dict*, XRef*)@plt
0xb7a80 PostScriptFunction::resizeCode(int)@plt
0xb7a90 GlobalParams::setupBaseFonts(char*)@plt
0xb7aa0 GfxDeviceGrayColorSpace::~GfxDeviceGrayColorSpace()@plt
0xb7ab0 FoFiType1C::FoFiType1C(char*, int, bool)@plt
0xb7ac0 FormWidget::~FormWidget()@plt
0xb7ad0 Gfx::doGouraudTriangleShFill(GfxGouraudTriangleShading*)@plt
0xb7ae0 GlobalParams::findFontFile(GooString*)@plt
0xb7af0 GooString::GooString(char const*)@plt
0xb7b00 Splash::drawImage(bool (*)(void*, unsigned char*, unsigned char*), void*, SplashColorMode, bool, int, int, double*, bool, bool)@plt
0xb7b10 PopplerObjectCache::lookup(Ref const&, Object*)@plt
0xb7b20 Page::replaceXRef(XRef*)@plt
0xb7b30 Splash::pipeInit(SplashPipe*, int, int, SplashPattern*, unsigned char*, unsigned char, bool, bool, bool, unsigned char)@plt
0xb7b40 GfxRadialShading::GfxRadialShading(double, double, double, double, double, double, double, double, Function**, int, bool, bool)@plt
0xb7b50 Function::Function(Function const*)@plt
0xb7b60 AnnotCalloutMultiLine::AnnotCalloutMultiLine(double, double, double, double, double, double)@plt
0xb7b70 SplashPath::addStrokeAdjustHint(int, int, int, int)@plt
0xb7b80 SplashXPathScanner::test(int, int)@plt
0xb7b90 TextPage::dumpFragment(unsigned int*, int, UnicodeMap*, GooString*)@plt
0xb7ba0 LinkRendition::LinkRendition(Object*)@plt
0xb7bb0 fclose@plt
0xb7bc0 operator new(unsigned long)@plt
0xb7bd0 SplashBitmap::getPixel(int, int, unsigned char*)@plt
0xb7be0 Movie::copy()@plt
0xb7bf0 rand_r@plt
0xb7c00 cmsCreateTransform@plt
0xb7c10 GfxShadingPattern::~GfxShadingPattern()@plt
0xb7c20 GfxShading::parse(GfxResources*, Object*, OutputDev*, GfxState*)@plt
0xb7c30 __xstat@plt
0xb7c40 GfxPatchMeshShading::~GfxPatchMeshShading()@plt
0xb7c50 grandom_double@plt
0xb7c60 SplashPath::~SplashPath()@plt
0xb7c70 Attribute::Attribute(char const*, int, Object*)@plt
0xb7c80 FoFiTrueType::checkGIDInCoverage(unsigned int, unsigned int)@plt
0xb7c90 TextPool::TextPool()@plt
0xb7ca0 JBIG2HuffmanDecoder::buildTable(JBIG2HuffmanTable*, unsigned int)@plt
0xb7cb0 Splash::saveState()@plt
0xb7cc0 FT_Get_Name_Index@plt
0xb7cd0 AnnotMovie::AnnotMovie(PDFDoc*, Dict*, Object*)@plt
0xb7ce0 JBIG2Bitmap::combine(JBIG2Bitmap*, int, int, unsigned int)@plt
0xb7cf0 Stream::~Stream()@plt
0xb7d00 PSOutputDev::setupEmbeddedCIDTrueTypeFont(GfxFont*, Ref*, GooString*, bool)@plt
0xb7d10 Stream::toUnsignedChars(int*, int, int)@plt
0xb7d20 std::vector<TextSpan, std::allocator<TextSpan> >::_M_insert_aux(__gnu_cxx::__normal_iterator<TextSpan*, std::vector<TextSpan, std::allocator<TextSpan> > >, TextSpan const&)@plt
0xb7d30 EmbFile::~EmbFile()@plt
0xb7d40 opj_cio_close@plt
0xb7d50 GfxColorSpace::setupColorProfiles()@plt
0xb7d60 Splash::stroke(SplashPath*)@plt
0xb7d70 GDir::getNextEntry()@plt
0xb7d80 Hints::readTables(BaseStream*, Linearization*, XRef*, SecurityHandler*)@plt
0xb7d90 png_write_end@plt
0xb7da0 TextLine::primaryDelta(TextLine*)@plt
0xb7db0 Dict::Dict(Dict*)@plt
0xb7dc0 GfxResources::lookupXObjectNF(char*, Object*)@plt
0xb7dd0 EmbedStream::~EmbedStream()@plt
0xb7de0 Splash::arbitraryTransformMask(bool (*)(void*, unsigned char*), void*, int, int, double*, bool)@plt
0xb7df0 GlobalParams::getPSShrinkLarger()@plt
0xb7e00 JBIG2MMRDecoder::reset()@plt
0xb7e10 GooList::GooList()@plt
0xb7e20 GfxAxialShading::~GfxAxialShading()@plt
0xb7e30 GlobalParams::parseYesNo2(char const*, bool*)@plt
0xb7e40 CharCodeToUnicode::make8BitToUnicode(unsigned int*)@plt
0xb7e50 GooString::GooString(GooString const*)@plt
0xb7e60 XRef::XRef()@plt
0xb7e70 AnnotBorder::parseDashArray(Object*)@plt
0xb7e80 GlobalParams::getScreenBlackThreshold()@plt
0xb7e90 Page::getResourceDictCopy(XRef*)@plt
0xb7ea0 FoFiTrueType::getCmapEncoding(int)@plt
0xb7eb0 CMap::setReverseMapVector(unsigned int, CMapVectorEntry*, unsigned int*, unsigned int, unsigned int)@plt
0xb7ec0 Matrix::invertTo(Matrix*) const@plt
0xb7ed0 LZWStream::getCode()@plt
0xb7ee0 FormPageWidgets::FormPageWidgets(Annots*, unsigned int, Form*)@plt
0xb7ef0 PSOutputDev::writePSTextLine(GooString*)@plt
0xb7f00 std::_Rb_tree_decrement(std::_Rb_tree_node_base*)@plt
0xb7f10 NameToCharCode::add(char const*, unsigned int)@plt
0xb7f20 DecryptStream::DecryptStream(Stream*, unsigned char*, CryptAlgorithm, int, int, int)@plt
0xb7f30 FileStream::close()@plt
0xb7f40 Catalog::indexToLabel(int, GooString*)@plt
0xb7f50 error(ErrorCategory, long long, char const*, ...)@plt
0xb7f60 XRef::XRef(BaseStream*, long long, long long, bool*, bool)@plt
0xb7f70 Annot::drawCircle(double, double, double, bool)@plt
0xb7f80 std::vector<long long, std::allocator<long long> >::_M_insert_aux(__gnu_cxx::__normal_iterator<long long*, std::vector<long long, std::allocator<long long> > >, long long const&)@plt
0xb7f90 fileno@plt
0xb7fa0 Gfx::pushStateGuard()@plt
0xb7fb0 GooString::formatInt(long long, char*, int, bool, int, int, char**, int*, bool)@plt
0xb7fc0 AnnotBorderArray::AnnotBorderArray(Array*)@plt
0xb7fd0 Function::~Function()@plt
0xb7fe0 fdopen@plt
0xb7ff0 Object::initArray(XRef*)@plt
0xb8000 FcConfigSubstitute@plt
0xb8010 AnnotBorderEffect::AnnotBorderEffect(Dict*)@plt
0xb8020 jpeg_finish_compress@plt
0xb8030 Dict::getKey(int)@plt
0xb8040 TextBlock::visitDepthFirst(TextBlock*, int, TextBlock**, int, bool*)@plt
0xb8050 EOFStream::~EOFStream()@plt
0xb8060 SplashXPathScanner::getNextSpan(int, int*, int*)@plt
0xb8070 FoFiBase::~FoFiBase()@plt
0xb8080 StreamPredictor::getChar()@plt
0xb8090 JBIG2Stream::readByte(int*)@plt
0xb80a0 StructElement::StructData::StructData()@plt
0xb80b0 DeviceNRecoder::~DeviceNRecoder()@plt
0xb80c0 SplashOutputDev::~SplashOutputDev()@plt
0xb80d0 AnnotAppearance::removeStream(Ref)@plt
0xb80e0 Catalog::getPageRef(int)@plt
0xb80f0 std::vector<Ref, std::allocator<Ref> >::_M_insert_aux(__gnu_cxx::__normal_iterator<Ref*, std::vector<Ref, std::allocator<Ref> > >, Ref const&)@plt
0xb8100 IdentityFunction::~IdentityFunction()@plt
0xb8110 T3FontCache::~T3FontCache()@plt
0xb8120 PSOutputDev::opiBegin20(GfxState*, Dict*)@plt
0xb8130 FoFiType1::parse()@plt
0xb8140 SplashScreen::SplashScreen(SplashScreen*)@plt
0xb8150 SplashFontEngine::getAA()@plt
0xb8160 PSOutputDev::doImageL2(Object*, GfxImageColorMap*, bool, bool, Stream*, int, int, int, int*, Stream*, int, int, bool)@plt
0xb8170 GfxSubpath::GfxSubpath(double, double)@plt
0xb8180 FcPatternBuild@plt
0xb8190 Function::init(Dict*)@plt
0xb81a0 AnnotFreeText::AnnotFreeText(PDFDoc*, Dict*, Object*)@plt
0xb81b0 SplashFTFontEngine::loadCIDFont(SplashFontFileID*, SplashFontSrc*)@plt
0xb81c0 png_set_longjmp_fn@plt
0xb81d0 FT_Outline_Decompose@plt
0xb81e0 opj_set_default_decoder_parameters@plt
0xb81f0 __ctype_b_loc@plt
0xb8200 XRef::readXRefUntil(int, std::vector<int, std::allocator<int> >*)@plt
0xb8210 strcasecmp@plt
0xb8220 AnnotBorder::AnnotBorder()@plt
0xb8230 unicodeIsAlphabeticPresentationForm(unsigned int)@plt
0xb8240 PageAttrs::readBox(Dict*, char const*, PDFRectangle*)@plt
0xb8250 BaseStream::~BaseStream()@plt
0xb8260 Hints::Hints(BaseStream*, Linearization*, XRef*, SecurityHandler*)@plt
0xb8270 Dict::set(char const*, Object*)@plt
0xb8280 TextSelectionDumper::startLine()@plt
0xb8290 SplashFontEngine::loadType1Font(SplashFontFileID*, SplashFontSrc*, char const**)@plt
0xb82a0 Splash::setStrokeAdjust(bool)@plt
0xb82b0 jpeg_write_scanlines@plt
0xb82c0 EmbedStream::EmbedStream(Stream*, Object*, bool, long long)@plt
0xb82d0 XRef::parseEntry(long long, XRefEntry*)@plt
0xb82e0 Annot::Annot(PDFDoc*, PDFRectangle*)@plt
0xb82f0 UnicodeMapCache::getUnicodeMap(GooString*)@plt
0xb8300 GfxState::setFillPattern(GfxPattern*)@plt
0xb8310 Object::initDict(Dict*)@plt
0xb8320 UnicodeMapCache::UnicodeMapCache()@plt
0xb8330 GlobalParams::mapNameToUnicodeText(char const*)@plt
0xb8340 GfxPattern::parse(GfxResources*, Object*, OutputDev*, GfxState*)@plt
0xb8350 strrchr@plt
0xb8360 fseek@plt
0xb8370 SampledFunction::transform(double*, double*)@plt
0xb8380 Splash::fillGlyph2(int, int, SplashGlyphBitmap*, bool)@plt
0xb8390 Annot::layoutText(GooString*, GooString*, int*, GfxFont*, double*, double, int*, bool)@plt
0xb83a0 Annot::createForm(double*, bool, Object*, Object*)@plt
0xb83b0 SplashBitmap::copy(SplashBitmap*)@plt
0xb83c0 GooString::formatDouble(double, char*, int, int, bool, char**, int*)@plt
0xb83d0 FoFiBase::getU16BE(int, bool*)@plt
0xb83e0 Form::~Form()@plt
0xb83f0 Splash::setLineCap(int)@plt
0xb8400 Splash::strokeNarrow(SplashPath*)@plt
0xb8410 LinkNamed::~LinkNamed()@plt
0xb8420 TextSelectionDumper::finishLine()@plt
0xb8430 GfxState::save()@plt
0xb8440 JBIG2SymbolDict::~JBIG2SymbolDict()@plt
0xb8450 Gfx::doShadingPatternFill(GfxShadingPattern*, bool, bool, bool)@plt
0xb8460 PDFDoc::getPage(int)@plt
0xb8470 PSOutputDev::writePSName(char const*)@plt
0xb8480 AnnotBorderBS::AnnotBorderBS()@plt
0xb8490 Form::postWidgetsLoad()@plt
0xb84a0 fputs@plt
0xb84b0 JBIG2Stream::resetRefinementStats(unsigned int, JArithmeticDecoderStats*)@plt
0xb84c0 GfxFunctionShading::parse(GfxResources*, Dict*, OutputDev*, GfxState*)@plt
0xb84d0 GooString::appendf(char const*, ...)@plt
0xb84e0 FormField::FormField(PDFDoc*, Object*, Ref const&, FormField*, std::set<int, std::less<int>, std::allocator<int> >*, FormFieldType)@plt
0xb84f0 __dynamic_cast@plt
0xb8500 JArithmeticDecoder::byteIn()@plt
0xb8510 FoFiTrueType::dumpString(unsigned char*, int, void (*)(void*, char const*, int), void*)@plt
0xb8520 TextPage::endPage()@plt
0xb8530 Splash::scaleImageYdXd(bool (*)(void*, unsigned char*, unsigned char*), void*, SplashColorMode, int, bool, int, int, int, int, SplashBitmap*)@plt
0xb8540 Dict::add(char*, Object*)@plt
0xb8550 PSFontParam16::~PSFontParam16()@plt
0xb8560 FormFieldSignature::~FormFieldSignature()@plt
0xb8570 PostScriptFunction::transform(double*, double*)@plt
0xb8580 AnnotQuadrilaterals::getX2(int)@plt
0xb8590 OCDisplayNode::parse(Object*, OCGs*, XRef*, int)@plt
0xb85a0 JBIG2Stream::readExtensionSeg(unsigned int)@plt
0xb85b0 Gfx::gouraudFillTriangle(double, double, GfxColor*, double, double, GfxColor*, double, double, GfxColor*, int, int, GfxState::ReusablePathIterator*)@plt
0xb85c0 Splash::flattenCurve(double, double, double, double, double, double, double, double, double*, double, SplashPath*)@plt
0xb85d0 XRef::readXRefTable(Parser*, long long*, std::vector<long long, std::allocator<long long> >*, std::vector<int, std::allocator<int> >*)@plt
0xb85e0 Lexer::Lexer(XRef*, Object*)@plt
0xb85f0 ProfileData::ProfileData()@plt
0xb8600 Linearization::getNumPages()@plt
0xb8610 GfxFont::getAlternateName(char const*)@plt
0xb8620 sha256HashBlock(unsigned char*, unsigned int*)@plt
0xb8630 JBIG2Stream::readGenericRefinementRegionSeg(unsigned int, bool, bool, unsigned int, unsigned int*, unsigned int)@plt
0xb8640 SplashClip::SplashClip(SplashClip*)@plt
0xb8650 Catalog::getOutline()@plt
0xb8660 CharCodeToUnicode::match(GooString*)@plt
0xb8670 Splash::scaleImageYuXuBilinear(bool (*)(void*, unsigned char*, unsigned char*), void*, SplashColorMode, int, bool, int, int, int, int, SplashBitmap*)@plt
0xb8680 PSOutputDev::filterPSLabel(GooString*, bool*)@plt
0xb8690 FoFiTrueType::getCFFBlock(char**, int*)@plt
0xb86a0 SplashFontEngine::setAA(bool)@plt
0xb86b0 Gftell(_IO_FILE*)@plt
0xb86c0 GfxIndexedColorSpace::~GfxIndexedColorSpace()@plt
0xb86d0 Movie::~Movie()@plt
0xb86e0 Splash::arbitraryTransformImage(bool (*)(void*, unsigned char*, unsigned char*), void*, SplashColorMode, int, bool, int, int, double*, bool, bool)@plt
0xb86f0 XRef::~XRef()@plt
0xb8700 PopplerObjectCache::~PopplerObjectCache()@plt
0xb8710 PageLabelInfo::labelToIndex(GooString*, int*)@plt
0xb8720 AnnotQuadrilaterals::getY3(int)@plt
0xb8730 TextPage::drawSelection(OutputDev*, double, int, PDFRectangle*, SelectionStyle, GfxColor*, GfxColor*)@plt
0xb8740 Dict::is(char const*)@plt
0xb8750 SplashFontFileID::~SplashFontFileID()@plt
0xb8760 JBIG2HuffmanDecoder::reset()@plt
0xb8770 TextPool::getBaseIdx(double)@plt
0xb8780 SecurityHandler::SecurityHandler(PDFDoc*)@plt
0xb8790 FoFiTrueType::convertToType0(char*, int*, int, void (*)(void*, char const*, int), void*)@plt
0xb87a0 PDFDoc::writeXRefTableTrailer(Dict*, XRef*, bool, long long, OutStream*, XRef*)@plt
0xb87b0 GfxResources::lookupGStateNF(char*, Object*)@plt
0xb87c0 JBIG2Bitmap::JBIG2Bitmap(unsigned int, JBIG2Bitmap*)@plt
0xb87d0 PageLabelInfo::PageLabelInfo(Object*, int)@plt
0xb87e0 CMap::incRefCnt()@plt
0xb87f0 Gfx::doIncCharCount(GooString*)@plt
0xb8800 FoFiBase::getUVarBE(int, int, bool*)@plt
0xb8810 pthread_mutex_destroy@plt
0xb8820 PostScriptFunction::~PostScriptFunction()@plt
0xb8830 GfxSubpath::curveTo(double, double, double, double, double, double)@plt
0xb8840 AnnotLine::~AnnotLine()@plt
0xb8850 void std::__adjust_heap<DictEntry*, long, DictEntry, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(DictEntry const&, DictEntry const&)> >(DictEntry*, long, long, DictEntry, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(DictEntry const&, DictEntry const&)>)@plt
0xb8860 fflush@plt
0xb8870 TextWord::primaryDelta(TextWord*)@plt
0xb8880 Array::copy(XRef*, Object*)@plt
0xb8890 SplashXPath::strokeAdjust(SplashXPathAdjust*, double*, double*)@plt
0xb88a0 Gfx::Gfx(PDFDoc*, OutputDev*, int, Dict*, double, double, PDFRectangle*, PDFRectangle*, int, bool (*)(void*), void*, XRef*)@plt
0xb88b0 fopen@plt
0xb88c0 XRef::fetch(int, int, Object*, int)@plt
0xb88d0 GlobalParams::getUnicodeToUnicode(GooString*)@plt
0xb88e0 Gfx::drawForm(Object*, Dict*, double*, double*, bool, bool, GfxColorSpace*, bool, bool, bool, Function*, GfxColor*)@plt
0xb88f0 PSOutputDev::cvtFunction(Function*, bool)@plt
0xb8900 Dict::getValNF(int, Object*)@plt
0xb8910 SysFontList::~SysFontList()@plt
0xb8920 FormFieldChoice::setEditChoice(GooString*)@plt
0xb8930 GlobalParams::getUnicodeMap(GooString*)@plt
0xb8940 PNGWriter::PNGWriter(PNGWriter::Format)@plt
0xb8950 CachedFileWriter::~CachedFileWriter()@plt
0xb8960 cmsDeleteTransform@plt
0xb8970 signal@plt
0xb8980 GooList::insert(int, void*)@plt
0xb8990 free@plt
0xb89a0 StructElement::findAttribute(Attribute::Type, bool, Attribute::Owner) const@plt
0xb89b0 Attribute::setFormattedValue(char const*)@plt
0xb89c0 Gfx::doPatternText()@plt
0xb89d0 JBIG2Stream::readTextRegionSeg(unsigned int, bool, bool, unsigned int, unsigned int*, unsigned int)@plt
0xb89e0 AnnotFreeText::parseAppearanceString(GooString*, double&, AnnotColor*&)@plt
0xb89f0 MovieActivationParameters::MovieActivationParameters()@plt
0xb8a00 GlobalParams::getTextEOL()@plt
0xb8a10 TextFlow::addBlock(TextBlock*)@plt
0xb8a20 AnnotAppearance::getStateKey(int)@plt
0xb8a30 AnnotCaret::initialize(PDFDoc*, Dict*)@plt
0xb8a40 FlateStream::flateReset(bool)@plt
0xb8a50 GDirEntry::~GDirEntry()@plt
0xb8a60 Array::incRef()@plt
0xb8a70 CMap::setReverseMap(unsigned int*, unsigned int, unsigned int)@plt
0xb8a80 AnnotColor::writeToObject(XRef*, Object*) const@plt
0xb8a90 LinkMovie::LinkMovie(Object*)@plt
0xb8aa0 SplashClip::testSpan(int, int, int)@plt
0xb8ab0 GlobalParams::getEnableFreeType()@plt
0xb8ac0 PSOutputDev::writeHeader(std::vector<int, std::allocator<int> > const&, PDFRectangle*, PDFRectangle*, int, char*)@plt
0xb8ad0 std::vector<_ByteRange, std::allocator<_ByteRange> >::_M_insert_aux(__gnu_cxx::__normal_iterator<_ByteRange*, std::vector<_ByteRange, std::allocator<_ByteRange> > >, _ByteRange const&)@plt
0xb8ae0 GooString::formatv(char const*, __va_list_tag*)@plt
0xb8af0 BufStream::~BufStream()@plt
0xb8b00 exit@plt
0xb8b10 GfxFontDict::lookup(char*)@plt
0xb8b20 getenv@plt
0xb8b30 Function::~Function()@plt
0xb8b40 GooHash::expand()@plt
0xb8b50 GfxPath::GfxPath(bool, double, double, GfxSubpath**, int, int)@plt
0xb8b60 StructElement::getPageRef(Ref&) const@plt
0xb8b70 FoFiBase::getU8(int, bool*)@plt
0xb8b80 SplashFTFontEngine::init(bool, bool, bool)@plt
0xb8b90 FoFiTrueType::scanLookupList(unsigned int, unsigned int)@plt
0xb8ba0 SplashFont::~SplashFont()@plt
0xb8bb0 std::vector<int, std::allocator<int> >::operator=(std::vector<int, std::allocator<int> > const&)@plt
0xb8bc0 RunLengthStream::~RunLengthStream()@plt
0xb8bd0 GfxColorTransform::~GfxColorTransform()@plt
0xb8be0 FT_Outline_Get_CBox@plt
0xb8bf0 unicodeNormalizeNFKC(unsigned int*, int, int*, int**)@plt
0xb8c00 ftello@plt
0xb8c10 GfxFont::readEmbFontFile(XRef*, int*)@plt
0xb8c20 GooString::GooString()@plt
0xb8c30 void std::__introsort_loop<TrueTypeLoca*, long, __gnu_cxx::__ops::_Iter_comp_iter<cmpTrueTypeLocaIdxFunctor> >(TrueTypeLoca*, TrueTypeLoca*, long, __gnu_cxx::__ops::_Iter_comp_iter<cmpTrueTypeLocaIdxFunctor>)@plt
0xb8c40 CharCodeToUnicode::parseCMap(GooString*, int)@plt
0xb8c50 GfxResources::GfxResources(XRef*, Dict*, GfxResources*)@plt
0xb8c60 CCITTFaxStream::~CCITTFaxStream()@plt
0xb8c70 fmax@plt
0xb8c80 Splash::setLineWidth(double)@plt
0xb8c90 FcPatternAddInteger@plt
0xb8ca0 GfxState::setStrokeColorSpace(GfxColorSpace*)@plt
0xb8cb0 GooFile::read(char*, int, long long) const@plt
0xb8cc0 GfxState::setDisplayProfile(void*)@plt
0xb8cd0 AnnotQuadrilaterals::getX3(int)@plt
0xb8ce0 PDFDoc::setup(GooString*, GooString*)@plt
0xb8cf0 GlobalParams::scanEncodingDirs()@plt
0xb8d00 GlobalParams::findBase14FontFile(GooString*, GfxFont*)@plt
0xb8d10 Gfx8BitFont::getCharProc(int, Object*)@plt
0xb8d20 fputc@plt
0xb8d30 Object::free()@plt
0xb8d40 PDFDoc::markPageObjects(Dict*, XRef*, XRef*, unsigned int, int, int)@plt
0xb8d50 GlobalParams::getPrintCommands()@plt
0xb8d60 Gfx::findOp(char*)@plt
0xb8d70 GfxState::getUserClipBBox(double*, double*, double*, double*)@plt
0xb8d80 Gfx::doEndPath()@plt
0xb8d90 Object::print(_IO_FILE*)@plt
0xb8da0 SplashOutputDev::convertPath(GfxState*, GfxPath*, bool)@plt
0xb8db0 SplashFTFontEngine::SplashFTFontEngine(bool, bool, bool, FT_LibraryRec_*)@plt
0xb8dc0 PSOutputDev::tilingPatternFillL2(GfxState*, Catalog*, Object*, double*, int, int, Dict*, double*, double*, int, int, int, int, double, double)@plt
0xb8dd0 strncasecmp@plt
0xb8de0 GfxFunctionShading::getColor(double, double, GfxColor*)@plt
0xb8df0 FoFiType1::getNextLine(char*)@plt
0xb8e00 SplashXPathScanner::~SplashXPathScanner()@plt
0xb8e10 GooList::GooList(int)@plt
0xb8e20 LZWStream::processNextCode()@plt
0xb8e30 SplashFTFontEngine::loadTrueTypeFont(SplashFontFileID*, SplashFontSrc*, int*, int, int)@plt
0xb8e40 AnnotQuadrilaterals::getY4(int)@plt
0xb8e50 opj_destroy_decompress@plt
0xb8e60 GooHash::find(GooString*, int*)@plt
0xb8e70 JBIG2Stream::discardSegment(unsigned int)@plt
0xb8e80 GlobalParams::getErrQuiet()@plt
0xb8e90 operator delete[](void*)@plt
0xb8ea0 SplashFontEngine::loadOpenTypeCFFFont(SplashFontFileID*, SplashFontSrc*, int*, int)@plt
0xb8eb0 JBIG2HuffmanDecoder::readBit()@plt
0xb8ec0 FlateStream::getHuffmanCodeWord(FlateHuffmanTab*)@plt
0xb8ed0 Lexer::lookChar()@plt
0xb8ee0 JpegWriter::~JpegWriter()@plt
0xb8ef0 Splash::Splash(SplashBitmap*, bool, SplashScreen*)@plt
0xb8f00 TextPage::addChar(GfxState*, double, double, double, double, unsigned int, int, unsigned int*, int)@plt
0xb8f10 XRef::XRefTableWriter::XRefTableWriter(OutStream*)@plt
0xb8f20 JpegWriter::JpegWriter(JpegWriter::Format)@plt
0xb8f30 FoFiType1C::parse()@plt
0xb8f40 GfxPattern::~GfxPattern()@plt
0xb8f50 FoFiType1C::getName()@plt
0xb8f60 GDirEntry::GDirEntry(char*, char*, bool)@plt
0xb8f70 GfxTilingPattern::~GfxTilingPattern()@plt
0xb8f80 GfxDeviceNColorSpace::parse(GfxResources*, Array*, OutputDev*, GfxState*, int)@plt
0xb8f90 GfxSeparationColorSpace::GfxSeparationColorSpace(GooString*, GfxColorSpace*, Function*, bool, unsigned int, int*)@plt
0xb8fa0 AnnotPath::getY(int) const@plt
0xb8fb0 LinkLaunch::LinkLaunch(Object*)@plt
0xb8fc0 FormFieldChoice::unselectAll()@plt
0xb8fd0 Annot3D::Annot3D(PDFDoc*, Dict*, Object*)@plt
0xb8fe0 GfxShading::GfxShading(GfxShading*)@plt
0xb8ff0 GfxState::shiftCTMAndClip(double, double)@plt
0xb9000 AnnotWidget::drawText(GooString*, GooString*, GfxResources*, bool, int, int, bool, bool, bool)@plt
0xb9010 SysFontInfo::match(GooString*, bool, bool, bool, bool)@plt
0xb9020 GfxFont::~GfxFont()@plt
0xb9030 PSOutputDev::setupFonts(Dict*)@plt
0xb9040 LZWStream::~LZWStream()@plt
0xb9050 FoFiType1C::getString(int, char*, bool*)@plt
0xb9060 JBIG2Stream::readGenericBitmap(bool, int, int, int, bool, bool, JBIG2Bitmap*, int*, int*, int)@plt
0xb9070 FoFiTrueType::make(char*, int, int)@plt
0xb9080 std::vector<CachedFile::Chunk, std::allocator<CachedFile::Chunk> >::_M_fill_insert(__gnu_cxx::__normal_iterator<CachedFile::Chunk*, std::vector<CachedFile::Chunk, std::allocator<CachedFile::Chunk> > >, unsigned long, CachedFile::Chunk const&)@plt
0xb9090 std::vector<StructElement*, std::allocator<StructElement*> >::_M_insert_aux(__gnu_cxx::__normal_iterator<StructElement**, std::vector<StructElement*, std::allocator<StructElement*> > >, StructElement* const&)@plt
0xb90a0 PDFDoc::createTrailerDict(int, bool, long long, Ref*, XRef*, char const*, long long)@plt
0xb90b0 AnnotStamp::initialize(PDFDoc*, Dict*)@plt
0xb90c0 PDFDoc::displayPages(OutputDev*, int, int, double, double, int, bool, bool, bool, bool (*)(void*), void*, bool (*)(Annot*, void*), void*)@plt
0xb90d0 FoFiType1C::getIndexVal(Type1CIndex*, int, Type1CIndexVal*, bool*)@plt
0xb90e0 malloc@plt
0xb90f0 AnnotGeometry::AnnotGeometry(PDFDoc*, Dict*, Object*)@plt
0xb9100 vfprintf@plt
0xb9110 AnnotScreen::AnnotScreen(PDFDoc*, Dict*, Object*)@plt
0xb9120 AnnotQuadrilaterals::~AnnotQuadrilaterals()@plt
0xb9130 AnnotColor::AnnotColor(Array*, int)@plt
0xb9140 SplashBitmap::writePNMFile(_IO_FILE*)@plt
0xb9150 Dict::lookup(char const*, Object*, int)@plt
0xb9160 SysFontInfo::~SysFontInfo()@plt
0xb9170 Parser::shift(char const*, int)@plt
0xb9180 TextPage::assignColumns(TextLineFrag*, int, bool)@plt
0xb9190 JBIG2Stream::readHalftoneRegionSeg(unsigned int, bool, bool, unsigned int, unsigned int*, unsigned int)@plt
0xb91a0 Splash::dumpPath(SplashPath*)@plt
0xb91b0 AnnotWidget::updateAppearanceStream()@plt
0xb91c0 Annot::getAppearanceResDict(Object*)@plt
0xb91d0 GfxPatternColorSpace::parse(GfxResources*, Array*, OutputDev*, GfxState*, int)@plt
0xb91e0 jpeg_destroy_compress@plt
0xb91f0 FoFiTrueType::convertToType42(char*, char**, int*, void (*)(void*, char const*, int), void*)@plt
0xb9200 FcPatternDestroy@plt
0xb9210 NameToCharCode::lookup(char const*)@plt
0xb9220 Splash::scaleImageYuXu(bool (*)(void*, unsigned char*, unsigned char*), void*, SplashColorMode, int, bool, int, int, int, int, SplashBitmap*)@plt
0xb9230 Annot::writeString(GooString*, GooString*)@plt
0xb9240 GfxGouraudTriangleShading::parse(GfxResources*, int, Dict*, Stream*, OutputDev*, GfxState*)@plt
0xb9250 Splash::setFlatness(double)@plt
0xb9260 TextFontInfo::matches(GfxState*)@plt
0xb9270 PSTokenizer::PSTokenizer(int (*)(void*), void*)@plt
0xb9280 FoFiTrueType::seekTable(char const*)@plt
0xb9290 JBIG2PatternDict::JBIG2PatternDict(unsigned int, unsigned int)@plt
0xb92a0 GfxState::setCTM(double, double, double, double, double, double)@plt
0xb92b0 GfxTilingPattern::GfxTilingPattern(int, int, double*, double, double, Object*, double*, Object*)@plt
0xb92c0 CCITTFaxStream::getTwoDimCode()@plt
0xb92d0 Splash::setOverprintMask(unsigned int, bool)@plt
0xb92e0 CachedFile::read(void*, unsigned long, unsigned long)@plt
0xb92f0 Attribute::getTypeName() const@plt
0xb9300 SplashOutputDev::startDoc(PDFDoc*)@plt
0xb9310 void std::__heap_select<GfxFontCIDWidthExcepV*, __gnu_cxx::__ops::_Iter_comp_iter<cmpWidthExcepVFunctor> >(GfxFontCIDWidthExcepV*, GfxFontCIDWidthExcepV*, GfxFontCIDWidthExcepV*, __gnu_cxx::__ops::_Iter_comp_iter<cmpWidthExcepVFunctor>)@plt
0xb9320 FormWidgetText::FormWidgetText(PDFDoc*, Object*, unsigned int, Ref, FormField*)@plt
0xb9330 GfxIndexedColorSpace::mapColorToBase(GfxColor*, GfxColor*)@plt
0xb9340 FormField::getFullyQualifiedName()@plt
0xb9350 PostScriptFunction::parseCode(Stream*, int*)@plt
0xb9360 AnnotMarkup::initialize(PDFDoc*, Dict*, Object*)@plt
0xb9370 SplashXPath::aaScale()@plt
0xb9380 SecurityHandler::~SecurityHandler()@plt
0xb9390 FormFieldChoice::FormFieldChoice(PDFDoc*, Object*, Ref const&, FormField*, std::set<int, std::less<int>, std::allocator<int> >*)@plt
0xb93a0 GooList::~GooList()@plt
0xb93b0 CharCodeToUnicode::mergeCMap(GooString*, int)@plt
0xb93c0 TextPage::addLink(int, int, int, int, AnnotLink*)@plt
0xb93d0 TextPage::endWord()@plt
0xb93e0 GfxDeviceGrayColorSpace::GfxDeviceGrayColorSpace()@plt
0xb93f0 CachedFileStream::fillBuf()@plt
0xb9400 NameTree::Entry::cmp(void const*, void const*)@plt
0xb9410 JBIG2Stream::readUByte(unsigned int*)@plt
0xb9420 OCGs::anyOff(Array*)@plt
0xb9430 SplashFontEngine::loadType1CFont(SplashFontFileID*, SplashFontSrc*, char const**)@plt
0xb9440 SplashBitmap::writeImgFile(ImgWriter*, _IO_FILE*, int, int)@plt
0xb9450 AnnotColor::AnnotColor(double)@plt
0xb9460 SplashFontEngine::loadCIDFont(SplashFontFileID*, SplashFontSrc*)@plt
0xb9470 FilterStream::~FilterStream()@plt
0xb9480 pthread_mutexattr_init@plt
0xb9490 GfxCIDFont::mapCodeToGID(FoFiTrueType*, int, unsigned int, bool)@plt
0xb94a0 BaseCryptStream::reset()@plt
0xb94b0 Catalog::cachePageTree(int)@plt
0xb94c0 DCTStream::~DCTStream()@plt
0xb94d0 SplashFontFileID::~SplashFontFileID()@plt
0xb94e0 ExponentialFunction::~ExponentialFunction()@plt
0xb94f0 JBIG2MMRDecoder::getBlackCode()@plt
0xb9500 png_set_compression_level@plt
0xb9510 PageLabelInfo::Interval::~Interval()@plt
0xb9520 AnnotFreeText::generateFreeTextAppearance()@plt
0xb9530 Gfx::gouraudFillTriangle(double, double, double, double, double, double, double, double, double, double, int, GfxGouraudTriangleShading*, GfxState::ReusablePathIterator*)@plt
0xb9540 Splash::pathAllOutside(SplashPath*)@plt
0xb9550 Catalog::getMarkInfo()@plt
0xb9560 Splash::scaleImage(bool (*)(void*, unsigned char*, unsigned char*), void*, SplashColorMode, int, bool, int, int, int, int, bool, bool)@plt
0xb9570 CMap::CMap(GooString*, GooString*, int)@plt
0xb9580 PSOutCustomColor::~PSOutCustomColor()@plt
0xb9590 TextLineFrag::init(TextLine*, int, int)@plt
0xb95a0 AnnotIconFit::AnnotIconFit(Dict*)@plt
0xb95b0 TextPage::incCharCount(int)@plt
0xb95c0 GfxImageColorMap::getRGB(unsigned char*, GfxRGB*)@plt
0xb95d0 Page::display(OutputDev*, double, double, int, bool, bool, bool, bool (*)(void*), void*, bool (*)(Annot*, void*), void*, bool)@plt
0xb95e0 TextSelectionDumper::getText()@plt
0xb95f0 Gfx::go(bool)@plt
0xb9600 FoFiTrueType::load(char*, int)@plt
0xb9610 Splash::getClip()@plt
0xb9620 putchar@plt
0xb9630 SplashUnivariatePattern::~SplashUnivariatePattern()@plt
0xb9640 strcmp@plt
0xb9650 JBIG2Stream::JBIG2Stream(Stream*, Object*, Object*)@plt
0xb9660 CharCodeToUnicodeCache::~CharCodeToUnicodeCache()@plt
0xb9670 GlobalParams::getMapNumericCharNames()@plt
0xb9680 SplashFontSrc::setBuf(char*, int, bool)@plt
0xb9690 strtol@plt
0xb96a0 Splash::setInNonIsolatedGroup(SplashBitmap*, int, int)@plt
0xb96b0 FormWidgetButton::setAppearanceState(char const*)@plt
0xb96c0 Annot::getRect(double*, double*, double*, double*) const@plt
0xb96d0 GfxCalRGBColorSpace::~GfxCalRGBColorSpace()@plt
0xb96e0 FoFiType1C::cvtNum(double, bool, GooString*)@plt
0xb96f0 Form::findWidgetByRef(Ref)@plt
0xb9700 LinkJavaScript::~LinkJavaScript()@plt
0xb9710 FoFiType1C::readFDSelect()@plt
0xb9720 Splash::clear(unsigned char*, unsigned char)@plt
0xb9730 FoFiType1::FoFiType1(char*, int, bool)@plt
0xb9740 AnnotMarkup::AnnotMarkup(PDFDoc*, Dict*, Object*)@plt
0xb9750 GfxColorSpace::~GfxColorSpace()@plt
0xb9760 PopplerCache::~PopplerCache()@plt
0xb9770 pclose@plt
0xb9780 AnnotInk::initialize(PDFDoc*, Dict*)@plt
0xb9790 GfxResources::lookupColorSpace(char const*, Object*)@plt
0xb97a0 FoFiBase::readFile(char*, int*)@plt
0xb97b0 GooHash::removeInt(char const*)@plt
0xb97c0 AnnotFreeText::initialize(PDFDoc*, Dict*)@plt
0xb97d0 Gfx::saveState()@plt
0xb97e0 Splash::getMatrix()@plt
0xb97f0 PNGWriter::~PNGWriter()@plt
0xb9800 Annot::initialize(PDFDoc*, Dict*)@plt
0xb9810 CharCodeToUnicode::decRefCnt()@plt
0xb9820 GfxColorSpace::GfxColorSpace()@plt
0xb9830 CharCodeToUnicode::addMapping(unsigned int, char*, int, int)@plt
0xb9840 LinkGoTo::LinkGoTo(Object*)@plt
0xb9850 Decrypt::makeFileKey(int, int, int, GooString*, GooString*, GooString*, GooString*, int, GooString*, GooString*, GooString*, unsigned char*, bool, bool*)@plt
0xb9860 MarkedContentOutputDev::endSpan()@plt
0xb9870 XRef::setModifiedObject(Object*, Ref)@plt
0xb9880 AnnotText::initialize(PDFDoc*, Dict*)@plt
0xb9890 fprintf@plt
0xb98a0 GfxState::restore()@plt
0xb98b0 GooString::cmp(GooString*) const@plt
0xb98c0 SplashScreen::buildDispersedMatrix(int, int, int, int, int)@plt
0xb98d0 _setjmp@plt
0xb98e0 GooList::shrink()@plt
0xb98f0 GfxFont::decRefCnt()@plt
0xb9900 CachedFile::cache(std::vector<_ByteRange, std::allocator<_ByteRange> > const&)@plt
0xb9910 PDFDoc::writeHeader(OutStream*, int, int)@plt
0xb9920 TextPage::incRefCnt()@plt
0xb9930 PDFDoc::strToLongLong(char*)@plt
0xb9940 GooString::cmpN(char const*, int) const@plt
0xb9950 TextFlow::blockFits(TextBlock*, TextBlock*)@plt
0xb9960 PSTokenizer::getChar()@plt
0xb9970 ImgWriter::~ImgWriter()@plt
0xb9980 TextSelectionPainter::~TextSelectionPainter()@plt
0xb9990 MediaWindowParameters::MediaWindowParameters()@plt
0xb99a0 PDFDoc::PDFDoc(BaseStream*, GooString*, GooString*, void*)@plt
0xb99b0 FoFiIdentifier::identifyFile(char*)@plt
0xb99c0 GooList::del(int)@plt
0xb99d0 pthread_mutex_lock@plt
0xb99e0 JBIG2HuffmanDecoder::JBIG2HuffmanDecoder()@plt
0xb99f0 SplashState::SplashState(int, int, bool, SplashScreenParams*)@plt
0xb9a00 NameToCharCode::hash(char const*)@plt
0xb9a10 PDFDoc::writeRawStream(Stream*, OutStream*)@plt
0xb9a20 GooHash::removeInt(GooString*)@plt
0xb9a30 CMYKGrayEncoder::~CMYKGrayEncoder()@plt
0xb9a40 Outline::~Outline()@plt
0xb9a50 FoFiTrueType::scanLookupSubTable(unsigned int, unsigned int)@plt
0xb9a60 TextBlock::updatePriMinMax(TextBlock*)@plt
0xb9a70 TextLine::visitSelection(TextSelectionVisitor*, PDFRectangle*, SelectionStyle)@plt
0xb9a80 BaseStream::BaseStream(Object*, long long)@plt
0xb9a90 JArithmeticDecoder::JArithmeticDecoder()@plt
0xb9aa0 FoFiTrueType::mapCodeToGID(int, unsigned int)@plt
0xb9ab0 GlobalParams::getCIDToUnicode(GooString*)@plt
0xb9ac0 Splash::setStrokeOverprint(bool)@plt
0xb9ad0 FoFiType1C::eexecCvtGlyph(Type1CEexecBuf*, char const*, int, int, Type1CIndex*, Type1CPrivateDict*)@plt
0xb9ae0 TextSelectionPainter::TextSelectionPainter(TextPage*, double, int, OutputDev*, GfxColor*, GfxColor*)@plt
0xb9af0 pthread_mutex_init@plt
0xb9b00 fread@plt
0xb9b10 JPXStream::close()@plt
0xb9b20 CCITTFaxStream::ccittReset(bool)@plt
0xb9b30 MarkedContentOutputDev::~MarkedContentOutputDev()@plt
0xb9b40 SplashState::setTransfer(unsigned char*, unsigned char*, unsigned char*, unsigned char*)@plt
0xb9b50 TextLine::~TextLine()@plt
0xb9b60 SplashState::setFillPattern(SplashPattern*)@plt
0xb9b70 GlobalParams::getStrokeAdjust()@plt
0xb9b80 std::_Rb_tree<unsigned int, std::pair<unsigned int const, unsigned int>, std::_Select1st<std::pair<unsigned int const, unsigned int> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >::_M_insert_unique(std::pair<unsigned int const, unsigned int> const&)@plt
0xb9b90 GfxFont::getFontType(XRef*, Dict*, Ref*)@plt
0xb9ba0 Splash::drawSpan(SplashPipe*, int, int, int, bool)@plt
0xb9bb0 FoFiType1C::getEncoding()@plt
0xb9bc0 CMap::parse2(CMapCache*, int (*)(void*), void*)@plt
0xb9bd0 opendir@plt
0xb9be0 AnnotAppearanceBBox::getPageXMin() const@plt
0xb9bf0 GfxCalGrayColorSpace::GfxCalGrayColorSpace()@plt
0xb9c00 AnnotWidget::drawBorder()@plt
0xb9c10 PSOutputDev::doImageL1(Object*, GfxImageColorMap*, bool, bool, Stream*, int, int, int, int*, Stream*, int, int, bool)@plt
0xb9c20 Splash::blitImage(SplashBitmap*, bool, int, int)@plt
0xb9c30 AnnotSound::~AnnotSound()@plt
0xb9c40 JBIG2CodeTable::JBIG2CodeTable(unsigned int, JBIG2HuffmanTable*)@plt
0xb9c50 PSOutputDev::writePSBuf(char const*, int)@plt
0xb9c60 std::vector<int, std::allocator<int> >::_M_insert_aux(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int const&)@plt
0xb9c70 OCGs::allOff(Array*)@plt
0xb9c80 CharCodeToUnicode::incRefCnt()@plt
0xb9c90 XRef::okToPrint(bool)@plt
0xb9ca0 OCGs::anyOn(Array*)@plt
0xb9cb0 GfxDeviceNColorSpace::GfxDeviceNColorSpace(int, GooString**, GfxColorSpace*, Function*, GooList*, int*, bool, unsigned int)@plt
0xb9cc0 ActualText::ActualText(TextPage*)@plt
0xb9cd0 GooString::GooString(GooString*, int, int)@plt
0xb9ce0 OutStream::~OutStream()@plt
0xb9cf0 JArithmeticDecoder::decodeIAID(unsigned int, JArithmeticDecoderStats*)@plt
0xb9d00 JBIG2Stream::resetGenericStats(unsigned int, JArithmeticDecoderStats*)@plt
0xb9d10 FormWidget::isReadOnly() const@plt
0xb9d20 std::__throw_out_of_range_fmt(char const*, ...)@plt
0xb9d30 Gfx::restoreState()@plt
0xb9d40 jpeg_set_defaults@plt
0xb9d50 jpeg_start_compress@plt
0xb9d60 LinkOCGState::LinkOCGState(Object*)@plt
0xb9d70 GlobalParams::getPSLevel()@plt
0xb9d80 SplashFontSrc::unref()@plt
0xb9d90 ViewerPreferences::ViewerPreferences(Dict*)@plt
0xb9da0 AnnotQuadrilaterals::getX4(int)@plt
0xb9db0 SplashFontFile::~SplashFontFile()@plt
0xb9dc0 getFileSpecName(Object*, Object*)@plt
0xb9dd0 SplashXPathScanner::clipAALine(SplashBitmap*, int*, int*, int)@plt
0xb9de0 FlateStream::~FlateStream()@plt
0xb9df0 readdir@plt
0xb9e00 Dict::hasKey(char const*)@plt
0xb9e10 CMap::addCIDs(unsigned int, unsigned int, unsigned int, unsigned int)@plt
0xb9e20 SysFontList::SysFontList()@plt
0xb9e30 parseDiffRectangle(Array*, PDFRectangle*)@plt
0xb9e40 JBIG2Stream::~JBIG2Stream()@plt
0xb9e50 SplashState::setLineDash(double*, int, double)@plt
0xb9e60 puts@plt
0xb9e70 GlobalParams::findSystemFontFile(GfxFont*, SysFontType*, int*, GooString*, GooString*)@plt
0xb9e80 OCDisplayNode::addChild(OCDisplayNode*)@plt
0xb9e90 feof@plt
0xb9ea0 Annot::invalidateAppearance()@plt
0xb9eb0 TextBlock::addWord(TextWord*)@plt
0xb9ec0 __finite@plt
0xb9ed0 FormFieldText::~FormFieldText()@plt
0xb9ee0 GlobalParams::getPSResidentFont(GooString*)@plt
0xb9ef0 GfxPatchMeshShading::getParameterizedColor(double, GfxColor*)@plt
0xb9f00 AnnotAppearanceBBox::getBBoxRect(double*) const@plt
0xb9f10 PSStack::popInt()@plt
0xb9f20 Array::getString(int, GooString*)@plt
0xb9f30 SplashFTFontFile::loadType1Font(SplashFTFontEngine*, SplashFontFileID*, SplashFontSrc*, char const**)@plt
0xb9f40 StreamPredictor::StreamPredictor(Stream*, int, int, int, int)@plt
0xb9f50 GooTimer::start()@plt
0xb9f60 PSOutputDev::writeDocSetup(PDFDoc*, Catalog*, std::vector<int, std::allocator<int> > const&, bool)@plt
0xb9f70 Gfx::display(Object*, bool)@plt
0xb9f80 Splash::blitMask(SplashBitmap*, int, int, SplashClipResult)@plt
0xb9f90 strtok@plt
0xb9fa0 Splash::setBlendFunc(void (*)(unsigned char*, unsigned char*, unsigned char*, SplashColorMode))@plt
0xb9fb0 RGBGrayEncoder::fillBuf()@plt
0xb9fc0 FormFieldChoice::updateSelection()@plt
0xb9fd0 fgetc@plt
0xb9fe0 SplashFontFile::incRefCnt()@plt
0xb9ff0 jpeg_read_header@plt
0xba000 JArithmeticDecoder::decodeIntBit(JArithmeticDecoderStats*)@plt
0xba010 PDFDoc::parsePage(int)@plt
0xba020 GoffsetMax()@plt
0xba030 LinkUnknown::~LinkUnknown()@plt
0xba040 SplashState::~SplashState()@plt
0xba050 TextPage::clear()@plt
0xba060 GlobalParams::findCMapFile(GooString*, GooString*)@plt
0xba070 GfxAxialShading::parse(GfxResources*, Dict*, OutputDev*, GfxState*)@plt
0xba080 PDFDoc::PDFDoc()@plt
0xba090 GfxDeviceRGBColorSpace::~GfxDeviceRGBColorSpace()@plt
0xba0a0 openFile(char const*, char const*)@plt
0xba0b0 NameTree::init(XRef*, Object*)@plt
0xba0c0 ActualText::~ActualText()@plt
0xba0d0 cmsOpenProfileFromFile@plt
0xba0e0 gmallocn@plt
0xba0f0 BuiltinFontWidths::hash(char const*)@plt
0xba100 PSOutputDev::init(void (*)(void*, char const*, int), void*, PSFileType, char*, PDFDoc*, std::vector<int, std::allocator<int> > const&, PSOutMode, int, int, int, int, bool, int, int, bool, bool)@plt
0xba110 SplashOutputDev::doUpdateFont(GfxState*)@plt
0xba120 TextWord::addChar(GfxState*, TextFontInfo*, double, double, double, double, int, int, unsigned int, unsigned int, Matrix)@plt
0xba130 Catalog::getDests()@plt
0xba140 GfxFont::~GfxFont()@plt
0xba150 SplashXPathScanner::renderAALine(SplashBitmap*, int*, int*, int, bool)@plt
0xba160 cmsCloseProfile@plt
0xba170 AnnotAppearanceBBox::extendTo(double, double)@plt
0xba180 JBIG2Bitmap::clearToZero()@plt
0xba190 Splash::setStrokeAlpha(double)@plt
0xba1a0 GlobalParams::getTextEncoding()@plt
0xba1b0 TextPage::decRefCnt()@plt
0xba1c0 Object::getTypeName()@plt
0xba1d0 JBIG2Stream::resetIntStats(int)@plt
0xba1e0 AnnotTextMarkup::~AnnotTextMarkup()@plt
0xba1f0 FT_Done_FreeType@plt
0xba200 LinkSound::LinkSound(Object*)@plt
0xba210 TextWord::visitSelection(TextSelectionVisitor*, PDFRectangle*, SelectionStyle)@plt
0xba220 GlobalParams::getMacRomanCharCode(char*)@plt
0xba230 Attribute::getTypeForName(char const*, StructElement*)@plt
0xba240 greallocn@plt
0xba250 Parser::makeStream(Object*, unsigned char*, CryptAlgorithm, int, int, int, int, bool)@plt
0xba260 PageLabelInfo::~PageLabelInfo()@plt
0xba270 OCDisplayNode::getChild(int)@plt
0xba280 FT_Done_Glyph@plt
0xba290 SplashPattern::~SplashPattern()@plt
0xba2a0 cmsCreate_sRGBProfile@plt
0xba2b0 snprintf@plt
0xba2c0 SplashXPath::addCurve(double, double, double, double, double, double, double, double, double, bool, bool, bool, bool)@plt
0xba2d0 opj_create_decompress@plt
0xba2e0 SplashFTFontEngine::loadType1Font(SplashFontFileID*, SplashFontSrc*, char const**)@plt
0xba2f0 TextLine::primaryCmp(TextLine*)@plt
0xba300 unicodeToUpper(unsigned int)@plt
0xba310 GfxPatchMeshShading::parse(GfxResources*, int, Dict*, Stream*, OutputDev*, GfxState*)@plt
0xba320 FoFiType1::getName()@plt
0xba330 FoFiType1C::~FoFiType1C()@plt
0xba340 SplashOutputDev::getColor(GfxRGB*)@plt
0xba350 GooString::endsWith(char const*) const@plt
0xba360 LinkLaunch::~LinkLaunch()@plt
0xba370 AnnotInk::freeInkList()@plt
0xba380 GlobalParams::getPSResidentFont16(GooString*, int)@plt
0xba390 GfxImageColorMap::getGray(unsigned char*, int*)@plt
0xba3a0 closedir@plt
0xba3b0 convertAnnotLineEndingStyle(AnnotLineEndingStyle)@plt
0xba3c0 GfxUnivariateShading::setupCache(Matrix const*, double, double, double, double)@plt
0xba3d0 gmalloc@plt
0xba3e0 FlateStream::loadFixedCodes()@plt
0xba3f0 gettimeofday@plt
0xba400 FoFiIdentifier::identifyStream(int (*)(void*), void*)@plt
0xba410 AnnotAppearanceBBox::getPageYMax() const@plt
0xba420 SplashBitmap::getAlpha(int, int)@plt
0xba430 CMapCache::CMapCache()@plt
0xba440 Function::parse(Object*)@plt
0xba450 Catalog::getJSNameTree()@plt
0xba460 XRef::lock()@plt
0xba470 GfxState::clipToStrokePath()@plt
0xba480 JBIG2Stream::close()@plt
0xba490 SplashFontEngine::loadTrueTypeFont(SplashFontFileID*, SplashFontSrc*, int*, int, int)@plt
0xba4a0 CMapCache::~CMapCache()@plt
0xba4b0 TextFlow::TextFlow(TextPage*, TextBlock*)@plt
0xba4c0 FoFiTrueType::~FoFiTrueType()@plt
0xba4d0 memmove@plt
0xba4e0 std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::find(int const&)@plt
0xba4f0 GfxSeparationColorSpace::GfxSeparationColorSpace(GooString*, GfxColorSpace*, Function*)@plt
0xba500 realloc@plt
0xba510 pread64@plt
0xba520 XRef::readXRefStream(Stream*, long long*)@plt
0xba530 png_set_IHDR@plt
0xba540 Dict::getVal(int, Object*)@plt
0xba550 AnnotPath::AnnotPath(Array*)@plt
0xba560 GfxState::setFillColorSpace(GfxColorSpace*)@plt
0xba570 AnnotWidget::drawFormFieldText(GfxResources*, GooString*)@plt
0xba580 void std::__introsort_loop<TrueTypeLoca*, long, __gnu_cxx::__ops::_Iter_comp_iter<cmpTrueTypeLocaOffsetFunctor> >(TrueTypeLoca*, TrueTypeLoca*, long, __gnu_cxx::__ops::_Iter_comp_iter<cmpTrueTypeLocaOffsetFunctor>)@plt
0xba590 FormFieldText::getContentCopy()@plt
0xba5a0 SplashScreen::~SplashScreen()@plt
0xba5b0 void std::__insertion_sort<DictEntry*, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(DictEntry const&, DictEntry const&)> >(DictEntry*, DictEntry*, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(DictEntry const&, DictEntry const&)>)@plt
0xba5c0 Splash::scaleImageYuXd(bool (*)(void*, unsigned char*, unsigned char*), void*, SplashColorMode, int, bool, int, int, int, int, SplashBitmap*)@plt
0xba5d0 PDFDoc::getNumPages()@plt
0xba5e0 FormWidget::encodeID(unsigned int, unsigned int)@plt
0xba5f0 TextPage::findCharRange(int, int, double*, double*, double*, double*)@plt
0xba600 GfxShadingBitBuf::getBits(int, unsigned int*)@plt
0xba610 GfxCIDFont::getCodeToGIDMap(FoFiTrueType*, int*)@plt
0xba620 MovieActivationParameters::parseMovieActivation(Object*)@plt
0xba630 AnnotAppearanceBBox::getPageXMax() const@plt
0xba640 GfxFont::readToUnicodeCMap(Dict*, int, CharCodeToUnicode*)@plt
0xba650 GfxUnivariateShading::getColor(double, GfxColor*)@plt
0xba660 ActualText::begin(GfxState*, GooString*)@plt
0xba670 GfxDeviceNColorSpace::GfxDeviceNColorSpace(int, GooString**, GfxColorSpace*, Function*, GooList*)@plt
0xba680 EmbFile::save2(_IO_FILE*)@plt
0xba690 Splash::gouraudTriangleShadedFill(SplashGouraudColor*)@plt
0xba6a0 FormWidgetChoice::_checkRange(int)@plt
0xba6b0 CachedFile::seek(long, int)@plt
0xba6c0 Gfx::getPos()@plt
0xba6d0 BuiltinFontWidths::BuiltinFontWidths(BuiltinFontWidth*, int)@plt
0xba6e0 Object::getNum()@plt
0xba6f0 CachedFileWriter::CachedFileWriter(CachedFile*, std::vector<int, std::allocator<int> >*)@plt
0xba700 GooList::append(GooList*)@plt
0xba710 FoFiTrueType::getNumCmaps()@plt
0xba720 LZWStream::clearTable()@plt
0xba730 asin@plt
0xba740 std::vector<std::vector<StructTreeRoot::Parent, std::allocator<StructTreeRoot::Parent> >, std::allocator<std::vector<StructTreeRoot::Parent, std::allocator<StructTreeRoot::Parent> > > >::_M_fill_insert(__gnu_cxx::__normal_iterator<std::vector<StructTreeRoot::Parent, std::allocator<StructTreeRoot::Parent> >*, std::vector<std::vector<StructTreeRoot::Parent, std::allocator<StructTreeRoot::Parent> >, std::allocator<std::vector<StructTreeRoot::Parent, std::allocator<StructTreeRoot::Parent> > > > >, unsigned long, std::vector<StructTreeRoot::Parent, std::allocator<StructTreeRoot::Parent> > const&)@plt
0xba750 Gfx::initDisplayProfile()@plt
0xba760 Annot3D::~Annot3D()@plt
0xba770 JBIG2Stream::readEndOfStripeSeg(unsigned int)@plt
0xba780 FlateStream::readSome()@plt
0xba790 FormFieldChoice::~FormFieldChoice()@plt
0xba7a0 Annot::Annot(PDFDoc*, Dict*, Object*)@plt
0xba7b0 Gfx::doSoftMask(Object*, bool, GfxColorSpace*, bool, bool, Function*, GfxColor*)@plt
0xba7c0 Parser::getObj(Object*, int)@plt
0xba7d0 GfxIndexedColorSpace::GfxIndexedColorSpace(GfxColorSpace*, int)@plt
0xba7e0 getLine(char*, int, _IO_FILE*)@plt
0xba7f0 AnnotAppearance::removeStateStreams(Object*)@plt
0xba800 ObjectStream::~ObjectStream()@plt
0xba810 AnnotWidget::initialize(PDFDoc*, Dict*)@plt
0xba820 FileSpec::FileSpec(Object*)@plt
0xba830 CMap::decRefCnt()@plt
0xba840 ObjectStream::ObjectStream(XRef*, int, int)@plt
0xba850 CachedFile::CachedFile(CachedFileLoader*, GooString*)@plt
0xba860 GfxState::getFontTransMat(double*, double*, double*, double*)@plt
0xba870 NameToCharCode::NameToCharCode()@plt
0xba880 XRef::scanSpecialFlags()@plt
0xba890 SplashClip::testRect(int, int, int, int)@plt
0xba8a0 MediaParameters::MediaParameters()@plt
0xba8b0 AnnotPath::~AnnotPath()@plt
0xba8c0 SplashFTFontFile::loadCIDFont(SplashFTFontEngine*, SplashFontFileID*, SplashFontSrc*, int*, int)@plt
0xba8d0 SplashBitmap::~SplashBitmap()@plt
0xba8e0 Linearization::~Linearization()@plt
0xba8f0 GfxShadingPattern::GfxShadingPattern(GfxShading*, double*)@plt
0xba900 PSStack::roll(int, int)@plt
0xba910 Array::Array(XRef*)@plt
0xba920 std::vector<StructTreeRoot::Parent, std::allocator<StructTreeRoot::Parent> >::_M_fill_insert(__gnu_cxx::__normal_iterator<StructTreeRoot::Parent*, std::vector<StructTreeRoot::Parent, std::allocator<StructTreeRoot::Parent> > >, unsigned long, StructTreeRoot::Parent const&)@plt
0xba930 AnnotColor::AnnotColor(double, double, double, double)@plt
0xba940 floor@plt
0xba950 FileStream::~FileStream()@plt
0xba960 Splash::setFillAlpha(double)@plt
0xba970 ImageStream::ImageStream(Stream*, int, int, int)@plt
0xba980 SplashState::SplashState(SplashState*)@plt
0xba990 XRef::resize(int)@plt
0xba9a0 Movie::parseMovie(Object*)@plt
0xba9b0 XRef::getNumEntry(long long)@plt
0xba9c0 GooTimer::GooTimer()@plt
0xba9d0 GfxShadingBitBuf::~GfxShadingBitBuf()@plt
0xba9e0 SampledFunction::SampledFunction(SampledFunction const*)@plt
0xba9f0 GfxState::~GfxState()@plt
0xbaa00 Splash::Splash(SplashBitmap*, bool, SplashScreenParams*)@plt
0xbaa10 Splash::fillChar(double, double, int, SplashFont*)@plt
0xbaa20 FormField::FormField(PDFDoc*, Object*, Ref const&, FormField*, std::set<int, std::less<int>, std::allocator<int> >*, FormFieldType)@plt
0xbaa30 FoFiBase::FoFiBase(char*, int, bool)@plt
0xbaa40 Annot::setContents(GooString*)@plt
0xbaa50 SplashAxialPattern::~SplashAxialPattern()@plt
0xbaa60 jpeg_stdio_dest@plt
0xbaa70 opj_decode@plt
0xbaa80 Matrix::norm() const@plt
0xbaa90 FoFiType1C::readCharset()@plt
0xbaaa0 FcLangSetDestroy@plt
0xbaab0 jpeg_CreateDecompress@plt
0xbaac0 PSOutputDev::writePSChar(char)@plt
0xbaad0 GooHash::lookupInt(char const*)@plt
0xbaae0 GooString::del(int, int)@plt
0xbaaf0 Stream::decRef()@plt
0xbab00 ASCII85Stream::ASCII85Stream(Stream*)@plt
0xbab10 GfxImageColorMap::getRGBXLine(unsigned char*, unsigned char*, int)@plt
0xbab20 GfxFont::makeFont(XRef*, char const*, Ref, Dict*)@plt
0xbab30 TextPage::getSelectionRegion(PDFRectangle*, SelectionStyle, double)@plt
0xbab40 PSOutputDev::opiTransform(GfxState*, double, double, double*, double*)@plt
0xbab50 GfxFont::incRefCnt()@plt
0xbab60 void std::__adjust_heap<TrueTypeLoca*, long, TrueTypeLoca, __gnu_cxx::__ops::_Iter_comp_iter<cmpTrueTypeLocaOffsetFunctor> >(TrueTypeLoca*, long, long, TrueTypeLoca, __gnu_cxx::__ops::_Iter_comp_iter<cmpTrueTypeLocaOffsetFunctor>)@plt
0xbab70 GlobalParams::getPSResidentFontCC(GooString*, int)@plt
0xbab80 Catalog::findPage(int, int)@plt
0xbab90 Gfx::execOp(Object*, Object*, int)@plt
0xbaba0 UnicodeMap::UnicodeMap(GooString*)@plt
0xbabb0 SplashUnivariatePattern::~SplashUnivariatePattern()@plt
0xbabc0 TextBlock::secondaryDelta(TextBlock*)@plt
0xbabd0 Dict::lookupNF(char const*, Object*)@plt
0xbabe0 GfxLabColorSpace::parse(Array*, GfxState*)@plt
0xbabf0 StreamPredictor::~StreamPredictor()@plt
0xbac00 FoFiType1C::load(char*)@plt
0xbac10 AnnotText::~AnnotText()@plt
0xbac20 Splash::clearModRegion()@plt
0xbac30 Splash::blitTransparent(SplashBitmap*, int, int, int, int, int, int)@plt
0xbac40 Gfx::doForm(Object*)@plt
0xbac50 png_create_info_struct@plt
0xbac60 Linearization::getMainXRefEntriesOffset()@plt
0xbac70 FormFieldText::setContentCopy(GooString*)@plt
0xbac80 copyString@plt
0xbac90 GfxColorSpace::parse(GfxResources*, Object*, OutputDev*, GfxState*, int)@plt
0xbaca0 Gfx::opSetDash(Object*, int)@plt
0xbacb0 Gfx::opSetLineWidth(Object*, int)@plt
0xbacc0 LinkJavaScript::LinkJavaScript(Object*)@plt
0xbacd0 TextStringToUCS4(GooString*, unsigned int**)@plt
0xbace0 Splash::fillWithPattern(SplashPath*, bool, SplashPattern*, double)@plt
0xbacf0 gatof@plt
0xbad00 GooString::sanitizedName(bool)@plt
0xbad10 PSOutputDev::~PSOutputDev()@plt
0xbad20 AnnotMovie::initialize(PDFDoc*, Dict*)@plt
0xbad30 FoFiTrueType::convertToType1(char*, char const**, bool, void (*)(void*, char const*, int), void*)@plt
0xbad40 GfxGouraudTriangleShading::GfxGouraudTriangleShading(int, GfxGouraudVertex*, int, int (*) [3], int, Function**, int)@plt
0xbad50 gmallocn_checkoverflow@plt
0xbad60 EncryptStream::~EncryptStream()@plt
0xbad70 FT_New_Face@plt
0xbad80 CharCodeToUnicodeCache::CharCodeToUnicodeCache(int)@plt
0xbad90 std::_Rb_tree<int, std::pair<int const, int>, std::_Select1st<std::pair<int const, int> >, std::less<int>, std::allocator<std::pair<int const, int> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<int const, int> >, int const&)@plt
0xbada0 AnnotScreen::initialize(PDFDoc*, Dict*)@plt
0xbadb0 Page::~Page()@plt
0xbadc0 GfxState::setStrokePattern(GfxPattern*)@plt
0xbadd0 std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_copy(std::_Rb_tree_node<int> const*, std::_Rb_tree_node<int>*)@plt
0xbade0 JBIG2Stream::readSymbolDictSeg(unsigned int, unsigned int, unsigned int*, unsigned int)@plt
0xbadf0 XRef::add(int, int, long long, bool)@plt
0xbae00 GfxState::getTransformedFontSize()@plt
0xbae10 Sound::Sound(Object*, bool)@plt
0xbae20 Splash::setSoftMask(SplashBitmap*)@plt
0xbae30 CharCodeToUnicodeCache::add(CharCodeToUnicode*)@plt
0xbae40 modf@plt
0xbae50 JBIG2Bitmap::expand(int, unsigned int)@plt
0xbae60 FT_Render_Glyph@plt
0xbae70 SplashClip::~SplashClip()@plt
0xbae80 GooString::insert(int, char)@plt
0xbae90 TextWord::merge(TextWord*)@plt
0xbaea0 Annot3D::initialize(PDFDoc*, Dict*)@plt
0xbaeb0 FormField::updateChildrenAppearance()@plt
0xbaec0 GfxState::setFont(GfxFont*, double)@plt
0xbaed0 FoFiType1C::make(char*, int)@plt
0xbaee0 Dict::decRef()@plt
0xbaef0 GfxSeparationColorSpace::~GfxSeparationColorSpace()@plt
0xbaf00 strtok_r@plt
0xbaf10 GfxPatternColorSpace::~GfxPatternColorSpace()@plt
0xbaf20 pdfDocEncodingToUTF16(GooString*, int*)@plt
0xbaf30 Gfx::popResources()@plt
0xbaf40 CharCodeToUnicode::setMapping(unsigned int, unsigned int*, int)@plt
0xbaf50 JBIG2Stream::readGenericRegionSeg(unsigned int, bool, bool, unsigned int)@plt
0xbaf60 FlateStream::FlateStream(Stream*, int, int, int, int)@plt
0xbaf70 FormField::~FormField()@plt
0xbaf80 Gfx::checkArg(Object*, TchkType)@plt
0xbaf90 PopplerCache::lookup(PopplerCacheKey const&)@plt
0xbafa0 SplashGouraudPattern::~SplashGouraudPattern()@plt
0xbafb0 Links::~Links()@plt
0xbafc0 FoFiType1C::eexecWriteCharstring(Type1CEexecBuf*, unsigned char*, int)@plt
0xbafd0 pthread_mutexattr_settype@plt
0xbafe0 greallocn_checkoverflow@plt
0xbaff0 __cxa_guard_acquire@plt
0xbb000 JArithmeticDecoder::decodeBit(unsigned int, JArithmeticDecoderStats*)@plt
0xbb010 GlobalParams::getPSCenter()@plt
0xbb020 FoFiType1C::convertToCIDType0(char*, int*, int, void (*)(void*, char const*, int), void*)@plt
0xbb030 OCDisplayNode::OCDisplayNode(GooString*)@plt
0xbb040 png_write_rows@plt
0xbb050 PopplerCacheItem::~PopplerCacheItem()@plt
0xbb060 Hints::getPageObjectNum(int)@plt
0xbb070 Splash::composite(SplashBitmap*, int, int, int, int, int, int, bool, bool, bool, double)@plt
0xbb080 Splash::setOverprintMode(int)@plt
0xbb090 GooString::append(GooString*)@plt
0xbb0a0 TextSelectionDumper::endPage()@plt
0xbb0b0 PDFDoc::saveAs(OutStream*, PDFWriteMode)@plt
0xbb0c0 GooFile::size() const@plt
0xbb0d0 UnicodeMap::UnicodeMap(char const*, bool, int (*)(unsigned int, char*, int))@plt
0xbb0e0 strdup@plt
0xbb0f0 AnnotFreeText::~AnnotFreeText()@plt
0xbb100 Dict::~Dict()@plt
0xbb110 Gfx::~Gfx()@plt
0xbb120 RunLengthEncoder::RunLengthEncoder(Stream*)@plt
0xbb130 ImgWriter::~ImgWriter()@plt
0xbb140 SplashPath::getCurPt(double*, double*)@plt
0xbb150 FoFiType1C::getCIDToGIDMap(int*)@plt
0xbb160 png_set_pHYs@plt
0xbb170 unicodeTypeAlphaNum(unsigned int)@plt
0xbb180 freeBuiltinFontTables()@plt
0xbb190 TextPage::coalesce(bool, double, bool)@plt
0xbb1a0 GooString::append(char)@plt
0xbb1b0 OCGs::optContentIsVisible(Object*)@plt
0xbb1c0 PSOutputDev::writeXpdfProcset()@plt
0xbb1d0 FileStream::fillBuf()@plt
0xbb1e0 Array::getNF(int, Object*)@plt
0xbb1f0 void std::__heap_select<SplashIntersect*, __gnu_cxx::__ops::_Iter_comp_iter<cmpIntersectFunctor> >(SplashIntersect*, SplashIntersect*, SplashIntersect*, __gnu_cxx::__ops::_Iter_comp_iter<cmpIntersectFunctor>)@plt
0xbb200 SplashClip::resetToRect(double, double, double, double)@plt
0xbb210 FcLangSetAdd@plt
0xbb220 SplashClip::clipToRect(double, double, double, double)@plt
0xbb230 PSOutputDev::setupEmbeddedOpenTypeT1CFont(GfxFont*, Ref*, GooString*)@plt
0xbb240 BaseCryptStream::~BaseCryptStream()@plt
0xbb250 PSOutputDev::setupResources(Dict*)@plt
0xbb260 void std::__heap_select<TrueTypeLoca*, __gnu_cxx::__ops::_Iter_comp_iter<cmpTrueTypeLocaIdxFunctor> >(TrueTypeLoca*, TrueTypeLoca*, TrueTypeLoca*, __gnu_cxx::__ops::_Iter_comp_iter<cmpTrueTypeLocaIdxFunctor>)@plt
0xbb270 appendToPath(GooString*, char const*)@plt
0xbb280 TextFlow::~TextFlow()@plt
0xbb290 SplashAxialPattern::SplashAxialPattern(SplashColorMode, GfxState*, GfxAxialShading*)@plt
0xbb2a0 FlateStream::readDynamicCodes()@plt
0xbb2b0 MediaRendition::MediaRendition(Object*)@plt
0xbb2c0 GfxFont::getExternalFont(GooString*, bool)@plt
0xbb2d0 Annot::~Annot()@plt
0xbb2e0 GooList::expand()@plt
0xbb2f0 Object::copy(Object*)@plt
0xbb300 FoFiTrueType::FoFiTrueType(char*, int, bool, int)@plt
0xbb310 opj_setup_decoder@plt
0xbb320 PSTokenizer::getToken(char*, int, int*)@plt
0xbb330 LinkOCGState::StateList::~StateList()@plt
0xbb340 JBIG2MMRDecoder::JBIG2MMRDecoder()@plt
0xbb350 ASCIIHexEncoder::ASCIIHexEncoder(Stream*)@plt
0xbb360 SplashFont::~SplashFont()@plt
0xbb370 GfxResources::lookupFont(char*)@plt
0xbb380 GfxState::getXYZ2DisplayTransform()@plt
0xbb390 Page::removeAnnot(Annot*)@plt
0xbb3a0 FT_Done_Face@plt
0xbb3b0 MediaParameters::parseMediaPlayParameters(Object*)@plt
0xbb3c0 JBIG2Bitmap::getSlice(unsigned int, unsigned int, unsigned int, unsigned int)@plt
0xbb3d0 GfxImageColorMap::getDeviceN(unsigned char*, GfxColor*)@plt
0xbb3e0 cos@plt
0xbb3f0 GfxSubpath::lineTo(double, double)@plt
0xbb400 XRef::XRefPreScanWriter::XRefPreScanWriter()@plt
0xbb410 Splash::drawAAPixel(SplashPipe*, int, int)@plt
0xbb420 FoFiType1::make(char*, int)@plt
0xbb430 OutStream::OutStream()@plt
0xbb440 EncryptStream::EncryptStream(Stream*, unsigned char*, CryptAlgorithm, int, int, int)@plt
0xbb450 DeviceNRecoder::DeviceNRecoder(Stream*, int, int, GfxImageColorMap*)@plt
0xbb460 JBIG2Stream::readCodeTableSeg(unsigned int, unsigned int)@plt
0xbb470 AnnotQuadrilaterals::AnnotQuadrilateral::AnnotQuadrilateral(double, double, double, double, double, double, double, double)@plt
0xbb480 SplashUnivariatePattern::SplashUnivariatePattern(SplashColorMode, GfxState*, GfxUnivariateShading*)@plt
0xbb490 Lexer::isSpace(int)@plt
0xbb4a0 T3FontCache::T3FontCache(Ref*, double, double, double, double, int, int, int, int, bool, bool)@plt
0xbb4b0 PSOutputDev::setupImage(Ref, Stream*, bool)@plt
0xbb4c0 AnnotLink::~AnnotLink()@plt
0xbb4d0 png_init_io@plt
0xbb4e0 GlobalParams::getScreenDotRadius()@plt
0xbb4f0 FormFieldChoice::getEditChoice()@plt
0xbb500 Dict::copy(XRef*)@plt
0xbb510 MemStream::MemStream(char*, long long, long long, Object*)@plt
0xbb520 TextSelectionVisitor::TextSelectionVisitor(TextPage*)@plt
0xbb530 GDir::~GDir()@plt
0xbb540 PopplerObjectCache::PopplerObjectCache(int, XRef*)@plt
0xbb550 FoFiTrueType::cvtCharStrings(char**, int*, void (*)(void*, char const*, int), void*)@plt
0xbb560 __gmon_start__@plt
0xbb570 PDFDoc::markObject(Object*, XRef*, XRef*, unsigned int, int, int)@plt
0xbb580 NameTree::NameTree()@plt
0xbb590 AnnotInk::writeInkList(AnnotPath**, int, Array*)@plt
0xbb5a0 GooHash::killIter(GooHashIter**)@plt
0xbb5b0 AnnotLine::generateLineAppearance()@plt
0xbb5c0 Gfx::opSetFlat(Object*, int)@plt
0xbb5d0 PSOutputDev::filterPSName(GooString*)@plt
0xbb5e0 GfxDeviceNColorSpace::~GfxDeviceNColorSpace()@plt
0xbb5f0 XRef::setEncryption(int, bool, unsigned char*, int, int, int, CryptAlgorithm)@plt
0xbb600 qsort@plt
0xbb610 Linearization::getObjectNumberFirst()@plt
0xbb620 FoFiTrueType::cvtEncoding(char**, void (*)(void*, char const*, int), void*)@plt
0xbb630 FoFiTrueType::mapNameToGID(char*)@plt
0xbb640 AnnotWidget::drawFormFieldChoice(GfxResources*, GooString*)@plt
0xbb650 OptionalContentGroup::OptionalContentGroup(Dict*)@plt
0xbb660 MemStream::~MemStream()@plt
0xbb670 GfxFunctionShading::GfxFunctionShading(GfxFunctionShading*)@plt
0xbb680 FileOutStream::FileOutStream(_IO_FILE*, long long)@plt
0xbb690 Annot::setRect(double, double, double, double)@plt
0xbb6a0 AnnotQuadrilaterals::getX1(int)@plt
0xbb6b0 FormWidgetSignature::FormWidgetSignature(PDFDoc*, Object*, unsigned int, Ref, FormField*)@plt
0xbb6c0 GfxState::GfxState(GfxState*, bool)@plt
0xbb6d0 GooHash::lookupInt(GooString*)@plt
0xbb6e0 GfxDeviceCMYKColorSpace::GfxDeviceCMYKColorSpace()@plt
0xbb6f0 CMap::getCID(char*, int, unsigned int*, int*)@plt
0xbb700 Annot::removeReferencedObjects()@plt
0xbb710 localeconv@plt
0xbb720 Annot::getRotation() const@plt
0xbb730 PDFDoc::writeObjectHeader(Ref*, OutStream*)@plt
0xbb740 CCITTFaxStream::getBlackCode()@plt
0xbb750 void std::__adjust_heap<SplashIntersect*, long, SplashIntersect, __gnu_cxx::__ops::_Iter_comp_iter<cmpIntersectFunctor> >(SplashIntersect*, long, long, SplashIntersect, __gnu_cxx::__ops::_Iter_comp_iter<cmpIntersectFunctor>)@plt
0xbb760 GooString::insert(int, GooString*)@plt
0xbb770 SplashPattern::~SplashPattern()@plt
0xbb780 LinkMovie::~LinkMovie()@plt
0xbb790 GfxColorTransform::doTransform(void*, void*, unsigned int)@plt
0xbb7a0 AnnotColor::AnnotColor(double, double, double)@plt
0xbb7b0 fwrite@plt
0xbb7c0 FormFieldButton::setState(char*)@plt
0xbb7d0 FoFiTrueType::parse()@plt
0xbb7e0 FoFiType1::~FoFiType1()@plt
0xbb7f0 void std::__adjust_heap<GfxFontCIDWidthExcepV*, long, GfxFontCIDWidthExcepV, __gnu_cxx::__ops::_Iter_comp_iter<cmpWidthExcepVFunctor> >(GfxFontCIDWidthExcepV*, long, long, GfxFontCIDWidthExcepV, __gnu_cxx::__ops::_Iter_comp_iter<cmpWidthExcepVFunctor>)@plt
0xbb800 SplashPath::append(SplashPath*)@plt
0xbb810 close@plt
0xbb820 JArithmeticDecoderStats::copyFrom(JArithmeticDecoderStats*)@plt
0xbb830 LinkUnknown::LinkUnknown(char*)@plt
0xbb840 Splash::setLineJoin(int)@plt
0xbb850 IdentityFunction::IdentityFunction()@plt
0xbb860 FoFiType1C::readPrivateDict(int, int, Type1CPrivateDict*)@plt
0xbb870 FcLangSetCreate@plt
0xbb880 SplashFontEngine::~SplashFontEngine()@plt
0xbb890 StructElement::StructElement(int, StructTreeRoot*, StructElement*)@plt
0xbb8a0 Splash::setFillPattern(SplashPattern*)@plt
0xbb8b0 Gfx::doAxialShFill(GfxAxialShading*)@plt
0xbb8c0 Annots::createAnnot(Dict*, Object*)@plt
0xbb8d0 Stream::incRef()@plt
0xbb8e0 CharCodeToUnicode::CharCodeToUnicode(GooString*)@plt
0xbb8f0 PDFDoc::replacePageDict(int, int, PDFRectangle*, PDFRectangle*)@plt
0xbb900 GfxSubpath::offset(double, double)@plt
0xbb910 PostScriptFunction::getToken(Stream*)@plt
0xbb920 UnicodeMap::parse(GooString*)@plt
0xbb930 OCDisplayNode::OCDisplayNode()@plt
0xbb940 PostScriptFunction::exec(PSStack*, int)@plt
0xbb950 PageAttrs::PageAttrs(PageAttrs*, Dict*)@plt
0xbb960 JArithmeticDecoder::cleanup()@plt
0xbb970 AnnotInk::parseInkList(Array*)@plt
0xbb980 ASCII85Stream::~ASCII85Stream()@plt
0xbb990 gmtime_r@plt
0xbb9a0 Gfx::Gfx(PDFDoc*, OutputDev*, Dict*, PDFRectangle*, PDFRectangle*, bool (*)(void*), void*, XRef*)@plt
0xbb9b0 AnnotMarkup::AnnotMarkup(PDFDoc*, PDFRectangle*)@plt
0xbb9c0 Array::remove(int)@plt
0xbb9d0 Catalog::getNames()@plt
0xbb9e0 TextBlock::TextBlock(TextPage*, int)@plt
0xbb9f0 PDFDoc::writeXRefTableTrailer(long long, XRef*, bool, int, OutStream*, bool)@plt
0xbba00 Stream::Stream()@plt
0xbba10 GfxResources::lookupXObject(char*, Object*)@plt
0xbba20 StructElement::parseChild(Object*, Object*, std::set<int, std::less<int>, std::allocator<int> >&)@plt
0xbba30 GfxCalGrayColorSpace::getXYZ(GfxColor*, double*, double*, double*)@plt
0xbba40 UnicodeMap::match(GooString*)@plt
0xbba50 GfxFont::locateFont(XRef*, PSOutputDev*)@plt
0xbba60 Hints::readPageOffsetTable(Stream*)@plt
0xbba70 GlobalParams::getMapUnknownCharNames()@plt
0xbba80 OCGs::~OCGs()@plt
0xbba90 TextPage::getText(double, double, double, double)@plt
0xbbaa0 TextWord::getCharBBox(int, double*, double*, double*, double*)@plt
0xbbab0 PDFDoc::markAcroForm(Object*, XRef*, XRef*, unsigned int, int, int)@plt
0xbbac0 GfxPath::curveTo(double, double, double, double, double, double)@plt
0xbbad0 SplashFTFontEngine::loadOpenTypeT1CFont(SplashFontFileID*, SplashFontSrc*, char const**)@plt
0xbbae0 TextPage::findText(unsigned int*, int, bool, bool, bool, bool, bool, bool, bool, double*, double*, double*, double*)@plt
0xbbaf0 PDFDoc::saveCompleteRewrite(OutStream*)@plt
0xbbb00 PSOutputDev::writePS(char const*)@plt
0xbbb10 TextLineFrag::computeCoords(bool)@plt
0xbbb20 Page::getLinks()@plt
0xbbb30 SplashSolidColor::SplashSolidColor(unsigned char*)@plt
0xbbb40 CachedFile::tell()@plt
0xbbb50 Object::arrayGetLength() [clone .isra.15]
0xbbb80 Object::getBool() [clone .isra.23]
0xbbba8 Object::getInt() [clone .isra.24]
0xbbbd4 Object::getName() [clone .isra.27]
0xbbc00 Object::streamGetDict() [clone .isra.43]
0xbbc38 Object::arrayGet(int, Object*, int) [clone .isra.35] [clone .constprop.185]
0xbbc72 void std::__insertion_sort<GfxFontCIDWidthExcep*, __gnu_cxx::__ops::_Iter_comp_iter<cmpWidthExcepFunctor> >(GfxFontCIDWidthExcep*, GfxFontCIDWidthExcep*, __gnu_cxx::__ops::_Iter_comp_iter<cmpWidthExcepFunctor>) [clone .isra.64]
0xbbd04 Object::getInt() [clone .isra.13]
0xbbd30 Object::getInt() [clone .isra.12]
0xbbd60 _GLOBAL__sub_I_StructElement.cc
0xbbfe0 deregister_tm_clones
0xbc020 register_tm_clones
0xbc070 __do_global_dtors_aux
0xbc0b0 frame_dummy
0xbc0e0 SplashAxialPattern::getParameter(double, double, double*)
0xbc190 splashOutBlendMultiply(unsigned char*, unsigned char*, unsigned char*, SplashColorMode)
0xbc1e0 splashOutBlendScreen(unsigned char*, unsigned char*, unsigned char*, SplashColorMode)
0xbc240 splashOutBlendOverlay(unsigned char*, unsigned char*, unsigned char*, SplashColorMode)
0xbc2e0 splashOutBlendDarken(unsigned char*, unsigned char*, unsigned char*, SplashColorMode)
0xbc320 splashOutBlendLighten(unsigned char*, unsigned char*, unsigned char*, SplashColorMode)
0xbc360 splashOutBlendColorDodge(unsigned char*, unsigned char*, unsigned char*, SplashColorMode)
0xbc3e0 splashOutBlendColorBurn(unsigned char*, unsigned char*, unsigned char*, SplashColorMode)
0xbc460 splashOutBlendHardLight(unsigned char*, unsigned char*, unsigned char*, SplashColorMode)
0xbc500 splashOutBlendDifference(unsigned char*, unsigned char*, unsigned char*, SplashColorMode)
0xbc560 splashOutBlendExclusion(unsigned char*, unsigned char*, unsigned char*, SplashColorMode)
0xbc5c0 setLum(unsigned char, unsigned char, unsigned char, int, unsigned char*, unsigned char*, unsigned char*)
0xbc730 SplashOutputDev::updateFlatness(GfxState*)
0xbc740 SplashOutputDev::updateStrokeAdjust(GfxState*)
0xbc750 SplashOutputDev::updateFillColorSpace(GfxState*)
0xbc760 SplashOutputDev::updateStrokeColorSpace(GfxState*)
0xbc770 SplashOutputDev::updateFont(GfxState*)
0xbc780 SplashOutputDev::type3D0(GfxState*, double, double)
0xbc790 SplashOutputDev::beginTextObject(GfxState*)
0xbc7a0 SplashOutputDev::getVectorAntialias()
0xbc7b0 SplashOutputDev::setVectorAntialias(bool)
0xbc7e0 SplashGouraudPattern::~SplashGouraudPattern()
0xbc800 SplashGouraudPattern::~SplashGouraudPattern()
0xbc820 SplashGouraudPattern::getParameterizedColor(double, SplashColorMode, unsigned char*)
0xbc950 SplashUnivariatePattern::testPosition(int, int)
0xbc9f0 splashOutBlendSoftLight(unsigned char*, unsigned char*, unsigned char*, SplashColorMode)
0xbcba0 SplashRadialPattern::getParameter(double, double, double*)
0xbce00 SplashOutputDev::unsetSoftMaskFromImageMask(GfxState*, double*)
0xbcf00 SplashOutputDev::updateCTM(GfxState*, double, double, double, double, double, double)
0xbcf60 SplashOutputDev::updateLineCap(GfxState*)
0xbcf80 SplashOutputDev::updateLineJoin(GfxState*)
0xbcfa0 SplashOutputDev::updateLineDash(GfxState*)
0xbd010 SplashOutputDev::updateMiterLimit(GfxState*)
0xbd030 SplashOutputDev::saveState(GfxState*)
0xbd040 SplashOutputDev::restoreState(GfxState*)
0xbd060 SplashOutputDev::updateLineWidth(GfxState*)
0xbd080 SplashOutputDev::updateBlendMode(GfxState*)
0xbd0a0 SplashOutputDev::updateFillOpacity(GfxState*)
0xbd0f0 SplashOutputDev::updateStrokeOpacity(GfxState*)
0xbd140 SplashOutputDev::updateFillOverprint(GfxState*)
0xbd160 SplashOutputDev::updateStrokeOverprint(GfxState*)
0xbd180 SplashOutputDev::updateOverprintMode(GfxState*)
0xbd1a0 SplashOutputDev::updateTransfer(GfxState*)
0xbd4b0 SplashOutputDev::endTextObject(GfxState*)
0xbd510 SplashOutputDev::type3D1(GfxState*, double, double, double, double, double, double)
0xbdb00 SplashOutputDev::tilingBitmapSrc(void*, unsigned char*, unsigned char*)
0xbde30 SplashOutputDev::clearSoftMask(GfxState*)
0xbde40 SplashOutputDev::endTransparencyGroup(GfxState*)
0xbdee0 SplashOutputDev::beginTransparencyGroup(GfxState*, double*, GfxColorSpace*, bool, bool, bool)
0xbe610 SplashOutputDev::paintTransparencyGroup(GfxState*, double*)
0xbe7e0 SplashOutputDev::setSoftMask(GfxState*, double*, bool, Function*, GfxColor*)
0xbec90 splashOutBlendHue(unsigned char*, unsigned char*, unsigned char*, SplashColorMode)
0xbee50 splashOutBlendSaturation(unsigned char*, unsigned char*, unsigned char*, SplashColorMode)
0xbf000 splashOutBlendColor(unsigned char*, unsigned char*, unsigned char*, SplashColorMode)
0xbf0a0 splashOutBlendLuminosity(unsigned char*, unsigned char*, unsigned char*, SplashColorMode)
0xbf140 SplashOutputDev::endPage()
0xbf170 SplashOutputDev::imageMaskSrc(void*, unsigned char*)
0xbf1e0 SplashOutputDev::alphaImageSrc(void*, unsigned char*, unsigned char*)
0xbf490 SplashOutputDev::checkTransparencyGroup(GfxState*, bool)
0xbf520 SplashOutputDev::maskedImageSrc(void*, unsigned char*, unsigned char*)
0xbf7d0 SplashOutputDev::setSoftMaskFromImageMask(GfxState*, Object*, Stream*, int, int, bool, bool, double*)
0xbfac0 SplashOutputDev::updateAll(GfxState*)
0xbfc90 SplashOutputDev::tilingPatternFill(GfxState*, Gfx*, Catalog*, Object*, double*, int, int, Dict*, double*, double*, int, int, int, int, double, double)
0xc0b70 SplashUnivariatePattern::getColor(int, int, unsigned char*)
0xc0cd0 SplashOutputDev::imageSrc(void*, unsigned char*, unsigned char*)
0xc1070 SplashGouraudPattern::SplashGouraudPattern(bool, GfxState*, GfxGouraudTriangleShading*, SplashColorMode)
0xc1120 SplashOutputDev::gouraudTriangleShadedFill(GfxState*, GfxGouraudTriangleShading*)
0xc1280 SplashUnivariatePattern::SplashUnivariatePattern(SplashColorMode, GfxState*, GfxUnivariateShading*)
0xc1380 SplashUnivariatePattern::~SplashUnivariatePattern()
0xc13a0 SplashRadialPattern::~SplashRadialPattern()
0xc13c0 SplashRadialPattern::~SplashRadialPattern()
0xc13e0 SplashAxialPattern::~SplashAxialPattern()
0xc1400 SplashAxialPattern::~SplashAxialPattern()
0xc1420 SplashUnivariatePattern::~SplashUnivariatePattern()
0xc1440 SplashRadialPattern::SplashRadialPattern(SplashColorMode, GfxState*, GfxRadialShading*)
0xc1580 SplashAxialPattern::SplashAxialPattern(SplashColorMode, GfxState*, GfxAxialShading*)
0xc1680 T3FontCache::T3FontCache(Ref*, double, double, double, double, int, int, int, int, bool, bool)
0xc1840 T3FontCache::~T3FontCache()
0xc1860 SplashOutputDev::~SplashOutputDev()
0xc1940 SplashOutputDev::~SplashOutputDev()
0xc1960 SplashOutputDev::setupScreenParams(double, double)
0xc1aa0 SplashOutputDev::SplashOutputDev(SplashColorMode, int, bool, unsigned char*, bool, SplashThinLineMode, bool)
0xc1ce0 SplashOutputDev::startPage(int, GfxState*, XRef*)
0xc2050 SplashOutputDev::startDoc(PDFDoc*)
0xc2140 SplashOutputDev::getColor(int)
0xc2190 SplashOutputDev::getColor(GfxRGB*)
0xc2230 SplashOutputDev::updateFillColor(GfxState*)
0xc22c0 SplashOutputDev::updateStrokeColor(GfxState*)
0xc2360 SplashOutputDev::setOverprintMask(GfxColorSpace*, bool, int, GfxColor*, bool)
0xc2370 SplashOutputDev::drawImageMask(GfxState*, Object*, Stream*, int, int, bool, bool, bool)
0xc2570 SplashOutputDev::drawImage(GfxState*, Object*, Stream*, int, int, GfxImageColorMap*, bool, int*, bool)
0xc2a70 SplashOutputDev::drawMaskedImage(GfxState*, Object*, Stream*, int, int, GfxImageColorMap*, bool, Stream*, int, int, bool, bool)
0xc3330 SplashOutputDev::drawSoftMaskedImage(GfxState*, Object*, Stream*, int, int, GfxImageColorMap*, bool, Stream*, int, int, GfxImageColorMap*, bool)
0xc39d0 SplashOutputDev::doUpdateFont(GfxState*)
0xc41d0 SplashOutputDev::drawChar(GfxState*, double, double, double, double, double, double, unsigned int, int, unsigned int*, int)
0xc4720 SplashOutputDev::convertPath(GfxState*, GfxPath*, bool)
0xc4870 SplashOutputDev::stroke(GfxState*)
0xc4920 SplashOutputDev::fill(GfxState*)
0xc49d0 SplashOutputDev::eoFill(GfxState*)
0xc4a80 SplashOutputDev::clip(GfxState*)
0xc4ae0 SplashOutputDev::eoClip(GfxState*)
0xc4b40 SplashOutputDev::clipToStrokePath(GfxState*)
0xc4bd0 SplashOutputDev::drawType3Glyph(GfxState*, T3FontCache*, T3FontCacheTag*, unsigned char*)
0xc4c60 SplashOutputDev::beginType3Char(GfxState*, double, double, double, double, unsigned int, unsigned int*, int)
0xc5410 SplashOutputDev::endType3Char(GfxState*)
0xc5530 SplashOutputDev::setPaperColor(unsigned char*)
0xc5550 SplashOutputDev::getBitmapWidth()
0xc5560 SplashOutputDev::getBitmapHeight()
0xc5570 SplashOutputDev::takeBitmap()
0xc55d0 SplashOutputDev::getModRegion(int*, int*, int*, int*)
0xc5600 SplashOutputDev::clearModRegion()
0xc5610 SplashOutputDev::setFreeTypeHinting(bool, bool)
0xc5620 SplashOutputDev::univariateShadedFill(GfxState*, SplashUnivariatePattern*, double, double)
0xc5b30 SplashOutputDev::axialShadedFill(GfxState*, GfxAxialShading*, double, double)
0xc5bd0 SplashOutputDev::radialShadedFill(GfxState*, GfxRadialShading*, double, double)
0xc5c70 GfxColorSpace::isNonMarking()
0xc5c80 GfxFont::isCIDFont()
0xc5c90 SplashFont::getGlyphAdvance(int)
0xc5ca0 OutputDev::useFillColorStop()
0xc5cb0 OutputDev::useDrawForm()
0xc5cc0 OutputDev::needNonText()
0xc5cd0 OutputDev::needCharCount()
0xc5ce0 OutputDev::needClipToCropBox()
0xc5cf0 OutputDev::checkPageSlice(Page*, double, double, int, bool, bool, int, int, int, int, bool, bool (*)(void*), void*, bool (*)(Annot*, void*), void*)
0xc5d00 OutputDev::dump()
0xc5d10 OutputDev::updateAlphaIsShape(GfxState*)
0xc5d20 OutputDev::updateTextKnockout(GfxState*)
0xc5d30 OutputDev::updateFillColorStop(GfxState*, double)
0xc5d40 OutputDev::updateTextMat(GfxState*)
0xc5d50 OutputDev::updateCharSpace(GfxState*)
0xc5d60 OutputDev::updateRender(GfxState*)
0xc5d70 OutputDev::updateRise(GfxState*)
0xc5d80 OutputDev::updateWordSpace(GfxState*)
0xc5d90 OutputDev::updateHorizScaling(GfxState*)
0xc5da0 OutputDev::updateTextPos(GfxState*)
0xc5db0 OutputDev::updateTextShift(GfxState*, double)
0xc5dc0 OutputDev::saveTextPos(GfxState*)
0xc5dd0 OutputDev::restoreTextPos(GfxState*)
0xc5de0 OutputDev::functionShadedFill(GfxState*, GfxFunctionShading*)
0xc5df0 OutputDev::axialShadedSupportExtend(GfxState*, GfxAxialShading*)
0xc5e00 OutputDev::radialShadedSupportExtend(GfxState*, GfxRadialShading*)
0xc5e10 OutputDev::patchMeshShadedFill(GfxState*, GfxPatchMeshShading*)
0xc5e20 OutputDev::beginStringOp(GfxState*)
0xc5e30 OutputDev::endStringOp(GfxState*)
0xc5e40 OutputDev::beginString(GfxState*, GooString*)
0xc5e50 OutputDev::endString(GfxState*)
0xc5e60 OutputDev::drawString(GfxState*, GooString*)
0xc5e70 OutputDev::incCharCount(int)
0xc5e80 OutputDev::beginActualText(GfxState*, GooString*)
0xc5e90 OutputDev::endActualText(GfxState*)
0xc5ea0 OutputDev::drawForm(Ref)
0xc5eb0 OutputDev::psXObject(Stream*, Stream*)
0xc5ec0 OutputDev::getProfileHash()
0xc5ed0 OutputDev::processLink(AnnotLink*)
0xc5ee0 SplashUnivariatePattern::isStatic()
0xc5ef0 SplashUnivariatePattern::getShading()
0xc5f00 SplashUnivariatePattern::isCMYK()
0xc5f10 SplashGouraudPattern::getColor(int, int, unsigned char*)
0xc5f20 SplashGouraudPattern::testPosition(int, int)
0xc5f30 SplashGouraudPattern::isStatic()
0xc5f40 SplashGouraudPattern::isCMYK()
0xc5f50 SplashGouraudPattern::isParameterized()
0xc5f60 SplashGouraudPattern::getNTriangles()
0xc5f70 SplashOutputDev::useTilingPatternFill()
0xc5f80 SplashOutputDev::useShadedFills(int)
0xc5f90 SplashOutputDev::upsideDown()
0xc5fa0 SplashOutputDev::useDrawChar()
0xc5fb0 SplashOutputDev::interpretType3Chars()
0xc5fc0 SplashOutFontFileID::matches(SplashFontFileID*)
0xc5fd0 SplashOutFontFileID::~SplashOutFontFileID()
0xc5ff0 SplashOutFontFileID::~SplashOutFontFileID()
0xc6010 SplashGouraudPattern::getTriangle(int, double*, double*, double*, double*, double*, double*, double*, double*, double*)
0xc6020 SplashGouraudPattern::copy()
0xc6060 SplashRadialPattern::copy()
0xc60a0 SplashAxialPattern::copy()
0xc60e0 str_init_source(jpeg_decompress_struct*)
0xc60f0 str_fill_input_buffer(jpeg_decompress_struct*)
0xc6160 str_skip_input_data(jpeg_decompress_struct*, long)
0xc61b0 str_term_source(jpeg_decompress_struct*)
0xc61c0 DCTStream::isBinary(bool)
0xc61e0 DCTStream::lookChar()
0xc6200 DCTStream::~DCTStream()
0xc6240 DCTStream::~DCTStream()
0xc6260 exitErrorHandler(jpeg_common_struct*)
0xc62a0 DCTStream::getChar()
0xc6360 DCTStream::getChars(int, unsigned char*)
0xc64a0 DCTStream::getPSFilter(int, char const*)
0xc6500 DCTStream::init()
0xc6610 DCTStream::DCTStream(Stream*, int, Object*, int)
0xc6760 DCTStream::reset()
0xc6990 Stream::isEncoder()
0xc69a0 Stream::getImageParams(int*, StreamColorSpaceMode*)
0xc69b0 FilterStream::getPos()
0xc69c0 FilterStream::getNextStream()
0xc69d0 FilterStream::unfilteredReset()
0xc69e0 DCTStream::getKind()
0xc69f0 DCTStream::hasGetChars()
0xc6a00 FilterStream::getUnfilteredChar()
0xc6ab0 FilterStream::getBaseStream()
0xc6b80 FilterStream::getUndecodedStream()
0xc6c50 FilterStream::getDict()
0xc6d20 JPXStream::reset()
0xc6d40 JPXStream::getPos()
0xc6d60 JPXStream::getPSFilter(int, char const*)
0xc6d70 JPXStream::isBinary(bool)
0xc6d90 JPXStream::close()
0xc6de0 JPXStream::~JPXStream()
0xc6e20 JPXStream::~JPXStream()
0xc6e40 libopenjpeg_warning_callback(char const*, void*)
0xc6e60 libopenjpeg_error_callback(char const*, void*)
0xc6e80 JPXStream::JPXStream(Stream*)
0xc6ed0 JPXStreamPrivate::init2(unsigned char*, int, CODEC_FORMAT)
0xc7020 JPXStream::init()
0xc74a0 JPXStream::getChars(int, unsigned char*)
0xc7590 JPXStream::getChar()
0xc7610 JPXStream::lookChar()
0xc7660 JPXStream::getImageParams(int*, StreamColorSpaceMode*)
0xc76e0 JPXStream::getKind()
0xc76f0 JPXStream::hasGetChars()
0xc7700 createAnnotDrawFont(XRef*, Object*)
0xc78f0 Annot::getAppearanceResDict(Object*)
0xc79b0 getAdditionalAction(Annot::AdditionalActionsType, Object*, PDFDoc*)
0xc7b40 AnnotBorderArray::writeToObject(XRef*, Object*) const
0xc7cd0 parseAnnotLineEndingStyle(GooString*)
0xc7de0 convertAnnotLineEndingStyle(AnnotLineEndingStyle)
0xc7ea0 parseDiffRectangle(Array*, PDFRectangle*)
0xc8300 AnnotBorderEffect::AnnotBorderEffect(Dict*)
0xc8450 AnnotPath::AnnotPath()
0xc8460 AnnotPath::AnnotPath(AnnotCoord**, int)
0xc8470 AnnotPath::~AnnotPath()
0xc84c0 AnnotPath::getX(int) const
0xc84f0 AnnotPath::getY(int) const
0xc8520 AnnotPath::getCoord(int) const
0xc8540 AnnotPath::parsePathArray(Array*)
0xc8810 AnnotPath::AnnotPath(Array*)
0xc8830 AnnotCalloutLine::AnnotCalloutLine(double, double, double, double)
0xc8860 AnnotCalloutMultiLine::AnnotCalloutMultiLine(double, double, double, double, double, double)
0xc88b0 AnnotQuadrilaterals::AnnotQuadrilaterals(AnnotQuadrilaterals::AnnotQuadrilateral**, int)
0xc88c0 AnnotQuadrilaterals::~AnnotQuadrilaterals()
0xc8910 AnnotQuadrilaterals::getX1(int)
0xc8940 AnnotQuadrilaterals::getY1(int)
0xc8970 AnnotQuadrilaterals::getX2(int)
0xc89a0 AnnotQuadrilaterals::getY2(int)
0xc89d0 AnnotQuadrilaterals::getX3(int)
0xc8a00 AnnotQuadrilaterals::getY3(int)
0xc8a30 AnnotQuadrilaterals::getX4(int)
0xc8a60 AnnotQuadrilaterals::getY4(int)
0xc8a90 AnnotQuadrilaterals::AnnotQuadrilateral::AnnotQuadrilateral(double, double, double, double, double, double, double, double)
0xc8ac0 AnnotQuadrilaterals::AnnotQuadrilaterals(Array*, PDFRectangle*)
0xc8cf0 AnnotBorder::AnnotBorder()
0xc8d30 AnnotBorder::parseDashArray(Object*)
0xc8f10 AnnotBorder::~AnnotBorder()
0xc8f40 AnnotBorder::~AnnotBorder()
0xc8f60 AnnotBorderArray::AnnotBorderArray()
0xc8f90 AnnotBorderArray::AnnotBorderArray(Array*)
0xc9200 AnnotBorderBS::AnnotBorderBS()
0xc9220 AnnotBorderBS::AnnotBorderBS(Dict*)
0xc9490 AnnotBorderBS::getStyleName() const
0xc94e0 AnnotBorderBS::writeToObject(XRef*, Object*) const
0xc9680 AnnotColor::AnnotColor()
0xc9690 AnnotColor::AnnotColor(double)
0xc96a0 AnnotColor::AnnotColor(double, double, double)
0xc96c0 AnnotColor::AnnotColor(double, double, double, double)
0xc96e0 AnnotColor::adjustColor(int)
0xc9770 AnnotColor::AnnotColor(Array*, int)
0xc98a0 AnnotColor::writeToObject(XRef*, Object*) const
0xc9970 AnnotIconFit::AnnotIconFit(Dict*)
0xc9d30 AnnotAppearance::AnnotAppearance(PDFDoc*, Object*)
0xc9d80 AnnotAppearance::~AnnotAppearance()
0xc9d90 Annot::~Annot()
0xc9ec0 Annot::~Annot()
0xc9ee0 AnnotPopup::~AnnotPopup()
0xc9f10 AnnotPopup::~AnnotPopup()
0xc9f30 AnnotMarkup::~AnnotMarkup()
0xc9ff0 AnnotMarkup::~AnnotMarkup()
0xca010 AnnotText::~AnnotText()
0xca060 AnnotText::~AnnotText()
0xca080 AnnotFreeText::~AnnotFreeText()
0xca130 AnnotFreeText::~AnnotFreeText()
0xca150 AnnotLine::~AnnotLine()
0xca1c0 AnnotLine::~AnnotLine()
0xca1e0 AnnotTextMarkup::~AnnotTextMarkup()
0xca230 AnnotTextMarkup::~AnnotTextMarkup()
0xca250 AnnotStamp::~AnnotStamp()
0xca2a0 AnnotStamp::~AnnotStamp()
0xca2c0 AnnotGeometry::~AnnotGeometry()
0xca300 AnnotGeometry::~AnnotGeometry()
0xca320 AnnotPolygon::~AnnotPolygon()
0xca390 AnnotPolygon::~AnnotPolygon()
0xca3b0 AnnotCaret::~AnnotCaret()
0xca3e0 AnnotCaret::~AnnotCaret()
0xca400 AnnotFileAttachment::~AnnotFileAttachment()
0xca460 AnnotFileAttachment::~AnnotFileAttachment()
0xca480 AnnotSound::~AnnotSound()
0xca4e0 AnnotSound::~AnnotSound()
0xca500 AnnotLink::~AnnotLink()
0xca560 AnnotLink::~AnnotLink()
0xca580 AnnotMovie::~AnnotMovie()
0xca5e0 AnnotMovie::~AnnotMovie()
0xca600 Annot3D::~Annot3D()
0xca630 Annot3D::~Annot3D()
0xca650 AnnotAppearance::getAppearanceStream(AnnotAppearance::AnnotAppearanceType, char const*, Object*)
0xca7b0 AnnotAppearance::getStateKey(int)
0xca860 AnnotAppearance::getNumStates()
0xca8f0 AnnotAppearance::referencesStream(Object*, Ref)
0xca9f0 AnnotAppearance::referencesStream(Ref)
0xcab00 AnnotAppearance::removeStream(Ref)
0xcabf0 AnnotAppearance::removeStateStreams(Object*)
0xcace0 AnnotAppearance::removeAllStreams()
0xcadb0 AnnotAppearanceCharacs::AnnotAppearanceCharacs(Dict*)
0xcb150 AnnotAppearanceCharacs::~AnnotAppearanceCharacs()
0xcb1f0 AnnotWidget::~AnnotWidget()
0xcb270 AnnotWidget::~AnnotWidget()
0xcb290 AnnotScreen::~AnnotScreen()
0xcb320 AnnotScreen::~AnnotScreen()
0xcb340 AnnotAppearanceBBox::AnnotAppearanceBBox(PDFRectangle*)
0xcb390 AnnotAppearanceBBox::extendTo(double, double)
0xcb3e0 AnnotAppearanceBBox::getBBoxRect(double*) const
0xcb420 AnnotAppearanceBBox::getPageXMin() const
0xcb430 AnnotAppearanceBBox::getPageYMin() const
0xcb440 AnnotAppearanceBBox::getPageXMax() const
0xcb450 AnnotAppearanceBBox::getPageYMax() const
0xcb460 Annot::initialize(PDFDoc*, Dict*)
0xcbde0 Annot::Annot(PDFDoc*, PDFRectangle*)
0xcc000 Annot::Annot(PDFDoc*, Dict*)
0xcc090 Annot::Annot(PDFDoc*, Dict*, Object*)
0xcc140 Annot::getRect(double*, double*, double*, double*) const
0xcc170 Annot::inRect(double, double) const
0xcc1b0 Annot::update(char const*, Object*)
0xcc2d0 Annot::setContents(GooString*)
0xcc3f0 Annot::setName(GooString*)
0xcc4c0 Annot::setModified(GooString*)
0xcc590 Annot::setFlags(unsigned int)
0xcc5f0 Annot::setPage(int, bool)
0xcc690 Annot::setAppearanceState(char const*)
0xcc790 Annot::invalidateAppearance()
0xcc900 Annot::setRect(double, double, double, double)
0xccaa0 Annot::setRect(PDFRectangle*)
0xccac0 Annot::setBorder(AnnotBorder*)
0xccb80 Annot::setColor(AnnotColor*)
0xccc20 Annot::removeReferencedObjects()
0xccc30 AnnotMarkup::removeReferencedObjects()
0xccc90 AnnotFreeText::setContents(GooString*)
0xcccb0 AnnotLine::setContents(GooString*)
0xccce0 Annot::getXMin()
0xcccf0 Annot::getYMin()
0xccd00 Annot::getXMax()
0xccd10 Annot::getYMax()
0xccd20 Annot::readArrayNum(Object*, int, double*)
0xcce30 Annot::incRefCnt()
0xcce60 Annot::decRefCnt()
0xcceb0 Annot::setColor(AnnotColor*, bool)
0xccf70 Annot::setLineStyleForBorder(AnnotBorder*)
0xcd0e0 Annot::drawCircle(double, double, double, bool)
0xcd340 Annot::drawCircleTopLeft(double, double, double)
0xcd4c0 Annot::drawCircleBottomRight(double, double, double)
0xcd650 Annot::createForm(double*, bool, Object*, Object*)
0xcd9b0 Annot::createResourcesDict(char const*, Object*, char const*, double, char const*, Object*)
0xcdbf0 Annot::isVisible(bool)
0xcdc50 Annot::getRotation() const
0xcdcd0 Annot::draw(Gfx*, bool)
0xcdd90 AnnotText::draw(Gfx*, bool)
0xce2c0 AnnotLink::draw(Gfx*, bool)
0xce380 AnnotTextMarkup::draw(Gfx*, bool)
0xcef80 AnnotMovie::draw(Gfx*, bool)
0xcf8d0 AnnotGeometry::draw(Gfx*, bool)
0xcfe90 AnnotFileAttachment::draw(Gfx*, bool)
0xd0220 AnnotSound::draw(Gfx*, bool)
0xd0540 AnnotPolygon::draw(Gfx*, bool)
0xd0aa0 AnnotInk::draw(Gfx*, bool)
0xd0f90 AnnotPopup::initialize(PDFDoc*, Dict*)
0xd1050 AnnotPopup::AnnotPopup(PDFDoc*, PDFRectangle*)
0xd1110 AnnotPopup::AnnotPopup(PDFDoc*, Dict*, Object*)
0xd1160 AnnotPopup::setParent(Object*)
0xd11a0 AnnotPopup::setParent(Annot*)
0xd11e0 AnnotPopup::setOpen(bool)
0xd1220 AnnotMarkup::initialize(PDFDoc*, Dict*, Object*)
0xd16f0 AnnotMarkup::AnnotMarkup(PDFDoc*, PDFRectangle*)
0xd1760 AnnotMarkup::AnnotMarkup(PDFDoc*, Dict*, Object*)
0xd17b0 AnnotMarkup::setLabel(GooString*)
0xd18c0 AnnotMarkup::setPopup(AnnotPopup*)
0xd1970 AnnotMarkup::setOpacity(double)
0xd19b0 AnnotMarkup::setDate(GooString*)
0xd1a70 AnnotText::initialize(PDFDoc*, Dict*)
0xd1df0 AnnotText::AnnotText(PDFDoc*, PDFRectangle*)
0xd1ea0 AnnotText::AnnotText(PDFDoc*, Dict*, Object*)
0xd1ee0 AnnotText::setOpen(bool)
0xd1f20 AnnotText::setIcon(GooString*)
0xd2010 AnnotLink::initialize(PDFDoc*, Dict*)
0xd22f0 AnnotLink::AnnotLink(PDFDoc*, PDFRectangle*)
0xd2390 AnnotLink::AnnotLink(PDFDoc*, Dict*, Object*)
0xd23d0 AnnotFreeText::initialize(PDFDoc*, Dict*)
0xd2d50 AnnotFreeText::AnnotFreeText(PDFDoc*, PDFRectangle*, GooString*)
0xd2e60 AnnotFreeText::AnnotFreeText(PDFDoc*, Dict*, Object*)
0xd2ea0 AnnotFreeText::setAppearanceString(GooString*)
0xd2f70 AnnotFreeText::setQuadding(AnnotFreeText::AnnotFreeTextQuadding)
0xd2fb0 AnnotFreeText::setStyleString(GooString*)
0xd30c0 AnnotFreeText::setCalloutLine(AnnotCalloutLine*)
0xd3380 AnnotFreeText::setIntent(AnnotFreeText::AnnotFreeTextIntent)
0xd3400 AnnotFreeText::parseAppearanceString(GooString*, double&, AnnotColor*&)
0xd3810 AnnotLine::initialize(PDFDoc*, Dict*)
0xd4380 AnnotLine::AnnotLine(PDFDoc*, PDFRectangle*)
0xd4420 AnnotLine::AnnotLine(PDFDoc*, Dict*, Object*)
0xd4460 AnnotLine::setVertices(double, double, double, double)
0xd4620 AnnotLine::setStartEndStyle(AnnotLineEndingStyle, AnnotLineEndingStyle)
0xd4730 AnnotLine::setInteriorColor(AnnotColor*)
0xd47b0 AnnotLine::setLeaderLineLength(double)
0xd47f0 AnnotLine::setLeaderLineExtension(double)
0xd4860 AnnotLine::setCaption(bool)
0xd48b0 AnnotLine::setIntent(AnnotLine::AnnotLineIntent)
0xd4920 AnnotTextMarkup::initialize(PDFDoc*, Dict*)
0xd4ad0 AnnotTextMarkup::AnnotTextMarkup(PDFDoc*, PDFRectangle*, Annot::AnnotSubtype)
0xd4cd0 AnnotTextMarkup::AnnotTextMarkup(PDFDoc*, Dict*, Object*)
0xd4d10 AnnotTextMarkup::setType(Annot::AnnotSubtype)
0xd4e00 AnnotTextMarkup::setQuadrilaterals(AnnotQuadrilaterals*)
0xd50a0 AnnotWidget::initialize(PDFDoc*, Dict*)
0xd5360 AnnotWidget::AnnotWidget(PDFDoc*, Dict*, Object*)
0xd53c0 AnnotWidget::AnnotWidget(PDFDoc*, Dict*, Object*, FormField*)
0xd5430 AnnotWidget::getAdditionalAction(Annot::AdditionalActionsType)
0xd5450 AnnotWidget::getFormAdditionalAction(Annot::FormAdditionalActionsType)
0xd5580 Annot::layoutText(GooString*, GooString*, int*, GfxFont*, double*, double, int*, bool)
0xd5d60 Annot::writeString(GooString*, GooString*)
0xd5e20 AnnotFreeText::generateFreeTextAppearance()
0xd6500 AnnotFreeText::draw(Gfx*, bool)
0xd65d0 AnnotFreeText::getAppearanceResDict(Object*)
0xd6610 AnnotLine::generateLineAppearance()
0xd7240 AnnotLine::draw(Gfx*, bool)
0xd7390 AnnotLine::getAppearanceResDict(Object*)
0xd73d0 AnnotWidget::drawText(GooString*, GooString*, GfxResources*, bool, int, int, bool, bool, bool)
0xd87d0 AnnotWidget::drawListBox(FormFieldChoice*, GooString*, GfxResources*, int)
0xd9190 AnnotWidget::drawBorder()
0xd9b50 AnnotWidget::drawFormFieldButton(GfxResources*, GooString*)
0xd9d70 AnnotWidget::drawFormFieldText(GfxResources*, GooString*)
0xd9df0 AnnotWidget::drawFormFieldChoice(GfxResources*, GooString*)
0xd9e90 AnnotWidget::generateFieldAppearance()
0xda320 AnnotWidget::draw(Gfx*, bool)
0xda5f0 AnnotWidget::updateAppearanceStream()
0xda780 AnnotMovie::initialize(PDFDoc*, Dict*)
0xda950 AnnotMovie::AnnotMovie(PDFDoc*, PDFRectangle*, Movie*)
0xdaa10 AnnotMovie::AnnotMovie(PDFDoc*, Dict*, Object*)
0xdaa50 AnnotScreen::initialize(PDFDoc*, Dict*)
0xdac50 AnnotScreen::AnnotScreen(PDFDoc*, PDFRectangle*)
0xdad10 AnnotScreen::AnnotScreen(PDFDoc*, Dict*, Object*)
0xdad60 AnnotScreen::getAdditionalAction(Annot::AdditionalActionsType)
0xdad90 AnnotStamp::initialize(PDFDoc*, Dict*)
0xdae50 AnnotStamp::AnnotStamp(PDFDoc*, PDFRectangle*)
0xdaef0 AnnotStamp::AnnotStamp(PDFDoc*, Dict*, Object*)
0xdaf30 AnnotStamp::setIcon(GooString*)
0xdafe0 AnnotGeometry::initialize(PDFDoc*, Dict*)
0xdb2d0 AnnotGeometry::AnnotGeometry(PDFDoc*, PDFRectangle*, Annot::AnnotSubtype)
0xdb3b0 AnnotGeometry::AnnotGeometry(PDFDoc*, Dict*, Object*)
0xdb3f0 AnnotGeometry::setType(Annot::AnnotSubtype)
0xdb4a0 AnnotGeometry::setInteriorColor(AnnotColor*)
0xdb520 AnnotPolygon::initialize(PDFDoc*, Dict*)
0xdba00 AnnotPolygon::AnnotPolygon(PDFDoc*, PDFRectangle*, Annot::AnnotSubtype)
0xdbbc0 AnnotPolygon::AnnotPolygon(PDFDoc*, Dict*, Object*)
0xdbc00 AnnotPolygon::setType(Annot::AnnotSubtype)
0xdbcb0 AnnotPolygon::setVertices(AnnotPath*)
0xdbe00 AnnotPolygon::setStartEndStyle(AnnotLineEndingStyle, AnnotLineEndingStyle)
0xdbf10 AnnotPolygon::setInteriorColor(AnnotColor*)
0xdbf90 AnnotPolygon::setIntent(AnnotPolygon::AnnotPolygonIntent)
0xdc010 AnnotCaret::initialize(PDFDoc*, Dict*)
0xdc160 AnnotCaret::AnnotCaret(PDFDoc*, PDFRectangle*)
0xdc200 AnnotCaret::AnnotCaret(PDFDoc*, Dict*, Object*)
0xdc240 AnnotCaret::setSymbol(AnnotCaret::AnnotCaretSymbol)
0xdc2b0 AnnotInk::writeInkList(AnnotPath**, int, Array*)
0xdc3e0 AnnotInk::parseInkList(Array*)
0xdc4e0 AnnotInk::initialize(PDFDoc*, Dict*)
0xdc650 AnnotInk::AnnotInk(PDFDoc*, PDFRectangle*)
0xdc800 AnnotInk::AnnotInk(PDFDoc*, Dict*, Object*)
0xdc840 AnnotInk::freeInkList()
0xdc8c0 AnnotInk::~AnnotInk()
0xdc8e0 AnnotInk::~AnnotInk()
0xdc900 AnnotInk::setInkList(AnnotPath**, int)
0xdc9d0 AnnotFileAttachment::initialize(PDFDoc*, Dict*)
0xdcb10 AnnotFileAttachment::AnnotFileAttachment(PDFDoc*, PDFRectangle*, GooString*)
0xdcc30 AnnotFileAttachment::AnnotFileAttachment(PDFDoc*, Dict*, Object*)
0xdcc80 AnnotSound::initialize(PDFDoc*, Dict*)
0xdcdb0 AnnotSound::AnnotSound(PDFDoc*, PDFRectangle*, Sound*)
0xdceb0 AnnotSound::AnnotSound(PDFDoc*, Dict*, Object*)
0xdcef0 Annot3D::Activation::Activation(Dict*)
0xdd290 Annot3D::initialize(PDFDoc*, Dict*)
0xdd340 Annot3D::Annot3D(PDFDoc*, PDFRectangle*)
0xdd3e0 Annot3D::Annot3D(PDFDoc*, Dict*, Object*)
0xdd420 Annots::appendAnnot(Annot*)
0xdd4a0 Annots::removeAnnot(Annot*)
0xdd500 Annots::createAnnot(Dict*, Object*)
0xddb20 Annots::Annots(PDFDoc*, int, Object*)
0xddc90 Annots::findAnnot(Ref*)
0xddce0 Annots::~Annots()
0xddd30 MemStream::setNeedFree(bool)
0xddd40 AnnotCalloutLine::~AnnotCalloutLine()
0xddd50 AnnotBorder::setWidth(double)
0xddd60 AnnotBorder::getWidth() const
0xddd70 AnnotBorder::getDashLength() const
0xddd80 AnnotBorder::getDash() const
0xddd90 AnnotBorder::getStyle() const
0xddda0 AnnotBorderArray::getType() const
0xdddb0 AnnotBorderBS::getType() const
0xdddc0 AnnotCalloutMultiLine::~AnnotCalloutMultiLine()
0xdddd0 AnnotCalloutLine::~AnnotCalloutLine()
0xddde0 AnnotCalloutMultiLine::~AnnotCalloutMultiLine()
0xdddf0 AnnotBorderBS::~AnnotBorderBS()
0xdde10 AnnotBorderBS::~AnnotBorderBS()
0xdde30 AnnotBorderArray::~AnnotBorderArray()
0xdde50 AnnotBorderArray::~AnnotBorderArray()
0xdde70 Array::Array(XRef*)
0xdded0 Array::~Array()
0xddf20 Array::incRef()
0xddf50 Array::decRef()
0xddf80 Array::add(Object*)
0xde010 Array::copy(XRef*, Object*)
0xde0e0 Array::remove(int)
0xde150 Array::get(int, Object*, int)
0xde190 Array::getNF(int, Object*)
0xde1d0 Array::getString(int, GooString*)
0xde270 BuiltinFontWidths::~BuiltinFontWidths()
0xde280 BuiltinFontWidths::hash(char const*)
0xde2b0 BuiltinFontWidths::BuiltinFontWidths(BuiltinFontWidth*, int)
0xde340 BuiltinFontWidths::getWidth(char const*, unsigned short*)
0xde3a0 initBuiltinFontTables()
0xde5e0 freeBuiltinFontTables()
0xde630 CachedFile::~CachedFile()
0xde690 CachedFile::incRefCnt()
0xde6a0 CachedFile::decRefCnt()
0xde6d0 CachedFile::tell()
0xde6e0 CachedFile::seek(long, int)
0xde720 CachedFileWriter::CachedFileWriter(CachedFile*, std::vector<int, std::allocator<int> >*)
0xde750 CachedFileWriter::~CachedFileWriter()
0xde760 CachedFile::cache(std::vector<_ByteRange, std::allocator<_ByteRange> > const&)
0xdeba0 CachedFile::cache(unsigned long, unsigned long)
0xdec10 CachedFile::read(void*, unsigned long, unsigned long)
0xded70 CachedFileWriter::write(char const*, unsigned long)
0xdf020 CachedFile::CachedFile(CachedFileLoader*, GooString*)
0xdf180 std::vector<_ByteRange, std::allocator<_ByteRange> >::_M_insert_aux(__gnu_cxx::__normal_iterator<_ByteRange*, std::vector<_ByteRange, std::allocator<_ByteRange> > >, _ByteRange const&)
0xdf310 std::vector<int, std::allocator<int> >::_M_insert_aux(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int const&)
0xdf4a0 std::vector<CachedFile::Chunk, std::allocator<CachedFile::Chunk> >::_M_fill_insert(__gnu_cxx::__normal_iterator<CachedFile::Chunk*, std::vector<CachedFile::Chunk, std::allocator<CachedFile::Chunk> > >, unsigned long, CachedFile::Chunk const&)
0xdf810 NameTree::Entry::cmpEntry(void const*, void const*)
0xdf820 Catalog::Catalog(PDFDoc*)
0xdfc30 Catalog::readMetadata()
0xdfe30 Catalog::getPageMode()
0xe0020 Catalog::getPageLayout()
0xe01f0 NameTree::NameTree()
0xe0210 NameTree::Entry::Entry(Array*, int)
0xe0310 NameTree::Entry::~Entry()
0xe0330 NameTree::~NameTree()
0xe03a0 Catalog::~Catalog()
0xe0660 NameTree::addEntry(NameTree::Entry*)
0xe06d0 NameTree::parse(Object*)
0xe0880 NameTree::init(XRef*, Object*)
0xe08c0 NameTree::Entry::cmp(void const*, void const*)
0xe08d0 NameTree::lookup(GooString*, Object*)
0xe09b0 NameTree::getValue(int)
0xe09e0 NameTree::getName(int)
0xe0a00 Catalog::getNumPages()
0xe0e00 Catalog::getPageLabelInfo()
0xe0f30 Catalog::labelToIndex(GooString*, int*)
0xe0fd0 Catalog::indexToLabel(int, GooString*)
0xe1060 Catalog::getStructTreeRoot()
0xe11d0 Catalog::getMarkInfo()
0xe1520 Catalog::getOutline()
0xe15f0 Catalog::getDests()
0xe16c0 Catalog::getFormType()
0xe1740 Catalog::getForm()
0xe17b0 Catalog::getViewerPreferences()
0xe1820 Catalog::getNames()
0xe18e0 Catalog::getDestNameTree()
0xe19b0 Catalog::findDest(GooString*)
0xe1bd0 Catalog::getEmbeddedFileNameTree()
0xe1ca0 Catalog::embeddedFile(int)
0xe1db0 Catalog::getJSNameTree()
0xe1e80 Catalog::getJS(int)
0xe2050 Catalog::getAdditionalAction(Catalog::DocumentAdditionalActionsType)
0xe2190 Catalog::cachePageTree(int)
0xe2ba0 Catalog::getPage(int)
0xe2c00 Catalog::getPageRef(int)
0xe2c60 Catalog::findPage(int, int)
0xe2cc0 Stream::hasGetChars()
0xe2cd0 Stream::fillGooString(GooString*)
0xe2d90 std::vector<Dict*, std::allocator<Dict*> >::_M_insert_aux(__gnu_cxx::__normal_iterator<Dict**, std::vector<Dict*, std::allocator<Dict*> > >, Dict* const&)
0xe2f20 std::vector<Ref, std::allocator<Ref> >::_M_insert_aux(__gnu_cxx::__normal_iterator<Ref*, std::vector<Ref, std::allocator<Ref> > >, Ref const&)
0xe30b0 std::vector<PageAttrs*, std::allocator<PageAttrs*> >::_M_insert_aux(__gnu_cxx::__normal_iterator<PageAttrs**, std::vector<PageAttrs*, std::allocator<PageAttrs*> > >, PageAttrs* const&)
0xe3240 getCharFromString(void*)
0xe3260 getCharFromFile(void*)
0xe3270 CharCodeToUnicode::addMapping(unsigned int, char*, int, int)
0xe34d0 CharCodeToUnicode::parseCMap1(int (*)(void*), void*, int)
0xe3c10 CharCodeToUnicode::mergeCMap(GooString*, int)
0xe3c40 CharCodeToUnicode::CharCodeToUnicode()
0xe3cb0 CharCodeToUnicode::makeIdentityMapping()
0xe3cf0 CharCodeToUnicode::CharCodeToUnicode(GooString*)
0xe3d90 CharCodeToUnicode::parseCMap(GooString*, int)
0xe3de0 CharCodeToUnicode::parseCMapFromFile(GooString*, int)
0xe3e80 CharCodeToUnicode::CharCodeToUnicode(GooString*, unsigned int*, unsigned int, bool, CharCodeToUnicodeString*, int, int)
0xe3f30 CharCodeToUnicode::parseCIDToUnicode(GooString*, GooString*)
0xe40b0 CharCodeToUnicode::parseUnicodeToUnicode(GooString*)
0xe44f0 CharCodeToUnicode::make8BitToUnicode(unsigned int*)
0xe4530 CharCodeToUnicode::~CharCodeToUnicode()
0xe45a0 CharCodeToUnicode::incRefCnt()
0xe45d0 CharCodeToUnicode::decRefCnt()
0xe4620 CharCodeToUnicode::match(GooString*)
0xe4640 CharCodeToUnicode::setMapping(unsigned int, unsigned int*, int)
0xe47d0 CharCodeToUnicode::mapToUnicode(unsigned int, unsigned int**)
0xe4880 CharCodeToUnicode::mapToCharCode(unsigned int*, unsigned int*, int)
0xe4950 CharCodeToUnicodeCache::CharCodeToUnicodeCache(int)
0xe49a0 CharCodeToUnicodeCache::~CharCodeToUnicodeCache()
0xe49f0 CharCodeToUnicodeCache::getCharCodeToUnicode(GooString*)
0xe4ae0 CharCodeToUnicodeCache::add(CharCodeToUnicode*)
0xe4b60 getCharFromStream(void*)
0xe4b70 getCharFromFile(void*)
0xe4b80 CMap::CMap(GooString*, GooString*)
0xe4c10 CMap::CMap(GooString*, GooString*, int)
0xe4c70 CMap::copyVector(CMapVectorEntry*, CMapVectorEntry*)
0xe4d50 CMap::addCIDs(unsigned int, unsigned int, unsigned int, unsigned int)
0xe4e90 CMap::freeCMapVector(CMapVectorEntry*)
0xe4ef0 CMap::~CMap()
0xe4f50 CMap::incRefCnt()
0xe4f80 CMap::decRefCnt()
0xe4fd0 CMap::match(GooString*, GooString*)
0xe5010 CMap::getCID(char*, int, unsigned int*, int*)
0xe50c0 CMap::setReverseMapVector(unsigned int, CMapVectorEntry*, unsigned int*, unsigned int, unsigned int)
0xe5190 CMap::setReverseMap(unsigned int*, unsigned int, unsigned int)
0xe51b0 CMapCache::CMapCache()
0xe51d0 CMapCache::~CMapCache()
0xe5200 CMapCache::getCMap(GooString*, GooString*, Stream*)
0xe5310 CMap::useCMap(CMapCache*, char*)
0xe53d0 CMap::parse(CMapCache*, GooString*, GooString*, Stream*)
0xe5a10 CMap::parse2(CMapCache*, int (*)(void*), void*)
0xe5e90 CMap::parse(CMapCache*, GooString*, GooString*)
0xe6040 CMap::parse(CMapCache*, GooString*, Stream*)
0xe6110 CMap::parse(CMapCache*, GooString*, Object*)
0xe6210 CMap::useCMap(CMapCache*, Object*)
0xe6270 parseDateString(char const*, int*, int*, int*, int*, int*, int*, char*, int*, int*)
0xe6400 timeToDateString(long*)
0xe6540 BaseCryptStream::reset()
0xe6560 BaseCryptStream::getPos()
0xe6570 BaseCryptStream::getChar()
0xe6590 BaseCryptStream::isBinary(bool)
0xe65b0 aesReadBlock(Stream*, unsigned char*, bool)
0xe6640 rc4InitKey(unsigned char*, int, unsigned char*)
0xe66b0 aes256KeyExpansion(DecryptAES256State*, unsigned char*, int, bool)
0xe6e40 aesKeyExpansion(DecryptAESState*, unsigned char*, int, bool)
0xe7570 EncryptStream::reset()
0xe7640 DecryptStream::reset()
0xe7740 aes256DecryptBlock(DecryptAES256State*, unsigned char*, bool)
0xe8160 DecryptStream::lookChar()
0xe8dd0 EncryptStream::lookChar()
0xe9770 BaseCryptStream::~BaseCryptStream()
0xe97a0 EncryptStream::~EncryptStream()
0xe97c0 EncryptStream::~EncryptStream()
0xe97e0 DecryptStream::~DecryptStream()
0xe9800 DecryptStream::~DecryptStream()
0xe9820 BaseCryptStream::~BaseCryptStream()
0xe9840 BaseCryptStream::setAutoDelete(bool)
0xe9850 md5(unsigned char*, int, unsigned char*)
0xea7c0 Decrypt::makeFileKey2(int, int, int, GooString*, GooString*, int, GooString*, GooString*, unsigned char*, bool)
0xeac90 BaseCryptStream::BaseCryptStream(Stream*, unsigned char*, CryptAlgorithm, int, int, int)
0xeae40 EncryptStream::EncryptStream(Stream*, unsigned char*, CryptAlgorithm, int, int, int)
0xeaeb0 DecryptStream::DecryptStream(Stream*, unsigned char*, CryptAlgorithm, int, int, int)
0xeaee0 sha256HashBlock(unsigned char*, unsigned int*)
0xeb0d0 sha256(unsigned char*, int, unsigned char*)
0xeb290 Decrypt::makeFileKey(int, int, int, GooString*, GooString*, GooString*, GooString*, int, GooString*, GooString*, GooString*, unsigned char*, bool, bool*)
0xebb10 BaseCryptStream::getKind()
0xebb20 BaseCryptStream::getUndecodedStream()
0xebb30 cmpDictEntries(DictEntry const&, DictEntry const&)
0xebb50 binarySearch(char const*, DictEntry*, int)
0xebbc0 Dict::Dict(XRef*)
0xebc20 Dict::Dict(Dict*)
0xebd00 Dict::copy(XRef*)
0xebe00 Dict::~Dict()
0xebe60 Dict::incRef()
0xebe90 Dict::decRef()
0xebec0 Dict::add(char*, Object*)
0xebf70 Dict::remove(char const*)
0xec0f0 Dict::getKey(int)
0xec110 Dict::getVal(int, Object*)
0xec130 Dict::getValNF(int, Object*)
0xec150 Dict::set(char const*, Object*)
0xec350 Dict::hasKey(char const*)
0xec500 Dict::is(char const*)
0xec6c0 Dict::lookupNF(char const*, Object*)
0xec880 Dict::lookup(char const*, Object*, int)
0xeca50 Dict::lookupInt(char const*, char const*, int*)
0xecaf0 void std::__move_median_to_first<DictEntry*, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(DictEntry const&, DictEntry const&)> >(DictEntry*, DictEntry*, DictEntry*, DictEntry*, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(DictEntry const&, DictEntry const&)>)
0xecc20 void std::__unguarded_linear_insert<DictEntry*, __gnu_cxx::__ops::_Val_comp_iter<bool (*)(DictEntry const&, DictEntry const&)> >(DictEntry*, __gnu_cxx::__ops::_Val_comp_iter<bool (*)(DictEntry const&, DictEntry const&)>)
0xecca0 void std::__insertion_sort<DictEntry*, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(DictEntry const&, DictEntry const&)> >(DictEntry*, DictEntry*, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(DictEntry const&, DictEntry const&)>)
0xecda0 void std::__adjust_heap<DictEntry*, long, DictEntry, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(DictEntry const&, DictEntry const&)> >(DictEntry*, long, long, DictEntry, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(DictEntry const&, DictEntry const&)>)
0xecfd0 void std::__heap_select<DictEntry*, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(DictEntry const&, DictEntry const&)> >(DictEntry*, DictEntry*, DictEntry*, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(DictEntry const&, DictEntry const&)>)
0xed110 void std::__introsort_loop<DictEntry*, long, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(DictEntry const&, DictEntry const&)> >(DictEntry*, DictEntry*, long, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(DictEntry const&, DictEntry const&)>)
0xed2d0 setErrorCallback(void (*)(void*, ErrorCategory, long long, char*), void*)
0xed2e0 error(ErrorCategory, long long, char const*, ...)
0xed4f0 EmbFile::EmbFile(Object*)
0xed7f0 EmbFile::~EmbFile()
0xed870 EmbFile::save2(_IO_FILE*)
0xed900 EmbFile::save(char const*)
0xed940 FileSpec::~FileSpec()
0xed9d0 FileSpec::getEmbeddedFile()
0xeda90 getFileSpecName(Object*, Object*)
0xedbe0 FileSpec::FileSpec(Object*)
0xeddf0 getFileSpecNameForPlatform(Object*, Object*)
0xedef0 FileSpec::getFileNameForPlatform()
0xedfa0 FormWidgetButton::updateWidgetAppearance()
0xedfb0 FormWidgetSignature::updateWidgetAppearance()
0xedfc0 FormWidgetText::updateWidgetAppearance()
0xedfe0 FormWidgetChoice::updateWidgetAppearance()
0xee000 FormField::~FormField()
0xee140 FormField::~FormField()
0xee160 FormFieldText::~FormFieldText()
0xee1b0 FormFieldText::~FormFieldText()
0xee1d0 FormFieldSignature::~FormFieldSignature()
0xee1f0 FormFieldSignature::~FormFieldSignature()
0xee210 FormFieldButton::~FormFieldButton()
0xee250 FormFieldButton::~FormFieldButton()
0xee270 FormFieldChoice::~FormFieldChoice()
0xee340 FormFieldChoice::~FormFieldChoice()
0xee360 FormField::fillChildrenSiblingsID()
0xee3b0 pdfDocEncodingToUTF16(GooString*, int*)
0xee420 convertToUtf16(GooString*)
0xee480 FormWidget::FormWidget(PDFDoc*, Object*, unsigned int, Ref, FormField*)
0xee4f0 FormWidget::~FormWidget()
0xee520 FormWidgetButton::~FormWidgetButton()
0xee560 FormWidgetButton::~FormWidgetButton()
0xee580 FormWidgetChoice::~FormWidgetChoice()
0xee5a0 FormWidgetChoice::~FormWidgetChoice()
0xee5c0 FormWidget::~FormWidget()
0xee5e0 FormWidget::createWidgetAnnotation()
0xee680 FormWidget::inRect(double, double) const
0xee6a0 FormWidget::getRect(double*, double*, double*, double*) const
0xee6c0 FormWidget::getFontSize() const
0xee6e0 FormWidget::isReadOnly() const
0xee6f0 FormWidget::encodeID(unsigned int, unsigned int)
0xee700 FormWidget::decodeID(unsigned int, unsigned int*, unsigned int*)
0xee710 FormWidget::getPartialName() const
0xee720 FormWidget::getAlternateUiName() const
0xee730 FormWidget::getMappingName() const
0xee740 FormWidget::getActivationAction()
0xee760 FormWidget::getAdditionalAction(Annot::FormAdditionalActionsType)
0xee780 FormWidgetButton::FormWidgetButton(PDFDoc*, Object*, unsigned int, Ref, FormField*)
0xee910 FormWidgetButton::getOnStr()
0xee940 FormWidgetButton::getButtonType() const
0xee950 FormWidgetButton::setAppearanceState(char const*)
0xee970 FormWidgetText::FormWidgetText(PDFDoc*, Object*, unsigned int, Ref, FormField*)
0xee9a0 FormWidgetText::getContent()
0xee9b0 FormWidgetText::isMultiline() const
0xee9c0 FormWidgetText::isPassword() const
0xee9d0 FormWidgetText::isFileSelect() const
0xee9e0 FormWidgetText::noSpellCheck() const
0xee9f0 FormWidgetText::noScroll() const
0xeea00 FormWidgetText::isComb() const
0xeea10 FormWidgetText::isRichText() const
0xeea20 FormWidgetText::getMaxLen() const
0xeea30 FormWidgetChoice::FormWidgetChoice(PDFDoc*, Object*, unsigned int, Ref, FormField*)
0xeea60 FormWidgetChoice::_checkRange(int)
0xeeab0 FormWidgetChoice::isSelected(int)
0xeeaf0 FormWidgetChoice::getNumChoices()
0xeeb00 FormWidgetChoice::getChoice(int)
0xeeb30 FormWidgetChoice::isCombo() const
0xeeb40 FormWidgetChoice::hasEdit() const
0xeeb50 FormWidgetChoice::isMultiSelect() const
0xeeb60 FormWidgetChoice::noSpellCheck() const
0xeeb70 FormWidgetChoice::commitOnSelChange() const
0xeeb80 FormWidgetChoice::isListBox() const
0xeeb90 FormWidgetSignature::FormWidgetSignature(PDFDoc*, Object*, unsigned int, Ref, FormField*)
0xeebc0 FormField::createWidgetAnnotations()
0xeec30 FormField::_createWidget(Object*, Ref)
0xeedd0 FormField::findWidgetByRef(Ref)
0xeee90 FormField::getFullyQualifiedName()
0xef220 FormWidget::getFullyQualifiedName()
0xef230 FormField::updateChildrenAppearance()
0xef2a0 FormFieldButton::setNumSiblings(int)
0xef2d0 FormFieldButton::fillChildrenSiblingsID()
0xef3f0 FormFieldButton::getState(char*)
0xef450 FormWidgetButton::getState()
0xef480 FormFieldButton::updateState(char*)
0xef540 FormFieldButton::setState(char*)
0xef760 FormWidgetButton::setState(bool)
0xef7b0 FormFieldText::getContentCopy()
0xef7f0 FormWidgetText::getContentCopy()
0xef800 FormFieldText::setContentCopy(GooString*)
0xef980 FormWidgetText::setContent(GooString*)
0xef9d0 FormFieldChoice::unselectAll()
0xefa10 FormFieldChoice::getEditChoice()
0xefa20 FormWidgetChoice::getEditChoice()
0xefa60 FormFieldChoice::getNumSelected()
0xefaa0 FormFieldChoice::updateSelection()
0xefe10 FormFieldChoice::deselectAll()
0xefe60 FormWidgetChoice::deselectAll()
0xefea0 FormFieldChoice::toggle(int)
0xefef0 FormWidgetChoice::toggle(int)
0xeff60 FormFieldChoice::select(int)
0xeffd0 FormWidgetChoice::select(int)
0xf0040 FormFieldChoice::setEditChoice(GooString*)
0xf00f0 FormWidgetChoice::setEditChoice(GooString*)
0xf0170 FormFieldChoice::getSelectedChoice()
0xf01e0 Form::~Form()
0xf0270 Form::postWidgetsLoad()
0xf02c0 Form::findWidgetByRef(Ref)
0xf0320 FormPageWidgets::FormPageWidgets(Annots*, unsigned int, Form*)
0xf0410 FormPageWidgets::~FormPageWidgets()
0xf0420 fieldLookup(Dict*, char const*, Object*, std::set<int, std::less<int>, std::allocator<int> >*)
0xf0570 Form::fieldLookup(Dict*, char const*, Object*)
0xf05d0 FormField::FormField(PDFDoc*, Object*, Ref const&, FormField*, std::set<int, std::less<int>, std::allocator<int> >*, FormFieldType)
0xf0df0 FormFieldButton::FormFieldButton(PDFDoc*, Object*, Ref const&, FormField*, std::set<int, std::less<int>, std::allocator<int> >*)
0xf0f80 FormFieldText::FormFieldText(PDFDoc*, Object*, Ref const&, FormField*, std::set<int, std::less<int>, std::allocator<int> >*)
0xf1230 FormFieldChoice::FormFieldChoice(PDFDoc*, Object*, Ref const&, FormField*, std::set<int, std::less<int>, std::allocator<int> >*)
0xf19c0 FormFieldSignature::FormFieldSignature(PDFDoc*, Object*, Ref const&, FormField*, std::set<int, std::less<int>, std::allocator<int> >*)
0xf19f0 Form::createFieldFromDict(Object*, PDFDoc*, Ref const&, FormField*, std::set<int, std::less<int>, std::allocator<int> >*)
0xf1be0 Form::Form(PDFDoc*, Object*)
0xf2090 FormWidgetSignature::~FormWidgetSignature()
0xf20b0 FormWidgetSignature::~FormWidgetSignature()
0xf20d0 FormWidgetText::~FormWidgetText()
0xf20f0 FormWidgetText::~FormWidgetText()
0xf2110 std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::find(int const&)
0xf2160 std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase(std::_Rb_tree_node<int>*)
0xf21a0 std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_insert_unique(int const&)
0xf22a0 std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_copy(std::_Rb_tree_node<int> const*, std::_Rb_tree_node<int>*)
0xf2370 FontInfoScanner::FontInfoScanner(PDFDoc*, int)
0xf23c0 FontInfo::FontInfo(GfxFont*, XRef*)
0xf2620 FontInfo::FontInfo(FontInfo&)
0xf2710 FontInfo::~FontInfo()
0xf2790 FontInfoScanner::~FontInfoScanner()
0xf27b0 FontInfoScanner::scanFonts(XRef*, Dict*, GooList*)
0xf2c20 FontInfoScanner::scan(int)
0xf2e10 IdentityFunction::transform(double*, double*)
0xf2e30 StitchingFunction::transform(double*, double*)
0xf2f30 SampledFunction::transform(double*, double*)
0xf32b0 ExponentialFunction::transform(double*, double*)
0xf33a0 SampledFunction::hasDifferentResultSet(Function*)
0xf3450 Function::Function()
0xf3460 Function::~Function()
0xf3470 IdentityFunction::~IdentityFunction()
0xf3490 IdentityFunction::~IdentityFunction()
0xf34b0 SampledFunction::~SampledFunction()
0xf3500 SampledFunction::~SampledFunction()
0xf3520 ExponentialFunction::~ExponentialFunction()
0xf3540 ExponentialFunction::~ExponentialFunction()
0xf3560 StitchingFunction::~StitchingFunction()
0xf3600 StitchingFunction::~StitchingFunction()
0xf3620 PostScriptFunction::~PostScriptFunction()
0xf3670 PostScriptFunction::~PostScriptFunction()
0xf3690 Function::~Function()
0xf36b0 Function::Function(Function const*)
0xf3770 Function::init(Dict*)
0xf3c20 IdentityFunction::IdentityFunction()
0xf3c80 SampledFunction::SampledFunction(Object*, Dict*)
0xf4710 SampledFunction::SampledFunction(SampledFunction const*)
0xf4a30 ExponentialFunction::ExponentialFunction(Object*, Dict*)
0xf4ec0 ExponentialFunction::ExponentialFunction(ExponentialFunction const*)
0xf4fb0 StitchingFunction::StitchingFunction(StitchingFunction const*)
0xf5110 PSStack::copy(int)
0xf51b0 PSStack::roll(int, int)
0xf5300 PostScriptFunction::PostScriptFunction(PostScriptFunction const*)
0xf5430 PostScriptFunction::getToken(Stream*)
0xf55d0 PostScriptFunction::resizeCode(int)
0xf5610 PostScriptFunction::parseCode(Stream*, int*)
0xf5ad0 PostScriptFunction::exec(PSStack*, int)
0xf8f80 PostScriptFunction::transform(double*, double*)
0xf9240 PostScriptFunction::PostScriptFunction(Object*, Dict*)
0xf9470 StitchingFunction::StitchingFunction(Object*, Dict*, std::set<int, std::less<int>, std::allocator<int> >*)
0xf9c40 Function::parse(Object*, std::set<int, std::less<int>, std::allocator<int> >*)
0xf9e90 Function::parse(Object*)
0xf9ef0 Function::hasDifferentResultSet(Function*)
0xf9f00 IdentityFunction::getType()
0xf9f10 IdentityFunction::isOk()
0xf9f20 SampledFunction::getType()
0xf9f30 SampledFunction::isOk()
0xf9f40 ExponentialFunction::getType()
0xf9f50 ExponentialFunction::isOk()
0xf9f60 StitchingFunction::getType()
0xf9f70 StitchingFunction::isOk()
0xf9f80 PostScriptFunction::getType()
0xf9f90 PostScriptFunction::isOk()
0xf9fa0 IdentityFunction::copy()
0xf9fc0 SampledFunction::copy()
0xf9ff0 ExponentialFunction::copy()
0xfa020 StitchingFunction::copy()
0xfa050 PSStack::popInt()
0xfa0d0 PSStack::popNum()
0xfa170 PostScriptFunction::copy()
0xfa1a0 bubbleSort(double*)
0xfa210 Gfx::opClip(Object*, int)
0xfa220 Gfx::opEOClip(Object*, int)
0xfa230 Gfx::opBeginIgnoreUndef(Object*, int)
0xfa240 Gfx::opEndIgnoreUndef(Object*, int)
0xfa250 Object::getStream() [clone .isra.30]
0xfa290 Object::getRef() [clone .isra.31]
0xfa2d0 Object::dictLookup(char const*, Object*, int) [clone .isra.39] [clone .constprop.183]
0xfa320 Gfx::opTextNextLine(Object*, int)
0xfa3c0 Gfx::opBeginText(Object*, int)
0xfa4b0 Gfx::opEndText(Object*, int)
0xfa4e0 GfxState::isParentState(GfxState*) [clone .isra.125]
0xfa580 Gfx::opSetLineCap(Object*, int)
0xfa5e0 Gfx::opSetLineJoin(Object*, int)
0xfa640 Gfx::opSetTextRender(Object*, int)
0xfa6a0 Gfx::opSetRenderingIntent(Object*, int)
0xfa6f0 Gfx::opMarkPoint(Object*, int)
0xfa7e0 Gfx::opSetTextLeading(Object*, int)
0xfa870 Gfx::opSetTextRise(Object*, int)
0xfa910 Gfx::opSetMiterLimit(Object*, int)
0xfa9b0 Gfx::opSetLineWidth(Object*, int)
0xfaa50 Gfx::opSetWordSpacing(Object*, int)
0xfaaf0 Gfx::opSetCharSpacing(Object*, int)
0xfab90 Gfx::opSetFlat(Object*, int)
0xfac30 Gfx::opSetHorizScaling(Object*, int)
0xfacf0 Gfx::opSetCharWidth(Object*, int)
0xfade0 Gfx::opMoveTo(Object*, int)
0xfaec0 Gfx::opTextMove(Object*, int)
0xfb030 Gfx::opTextMoveSet(Object*, int)
0xfb1b0 Gfx::opSetCacheDevice(Object*, int)
0xfb3d0 Gfx::opSetTextMatrix(Object*, int)
0xfb680 Gfx::opRectangle(Object*, int)
0xfb950 Gfx::opConcat(Object*, int)
0xfbd30 Gfx::opSetDash(Object*, int)
0xfbf20 GfxResources::GfxResources(XRef*, Dict*, GfxResources*)
0xfc200 GfxResources::~GfxResources()
0xfc270 GfxResources::lookupFont(char*)
0xfc2d0 Gfx::opSetFont(Object*, int)
0xfc4b0 GfxResources::lookupXObject(char*, Object*)
0xfc530 GfxResources::lookupXObjectNF(char*, Object*)
0xfc5b0 GfxResources::lookupMarkedContentNF(char*, Object*)
0xfc630 GfxResources::lookupColorSpace(char const*, Object*)
0xfc6a0 Gfx::opSetFillGray(Object*, int)
0xfc830 Gfx::opSetStrokeGray(Object*, int)
0xfc9c0 Gfx::opSetFillCMYKColor(Object*, int)
0xfcc30 Gfx::opSetStrokeCMYKColor(Object*, int)
0xfcea0 Gfx::opSetFillRGBColor(Object*, int)
0xfd110 Gfx::opSetStrokeRGBColor(Object*, int)
0xfd380 GfxResources::lookupPattern(char*, OutputDev*, GfxState*)
0xfd440 GfxResources::lookupShading(char*, OutputDev*, GfxState*)
0xfd500 GfxResources::lookupGStateNF(char*, Object*)
0xfd580 GfxResources::lookupGState(char*, Object*)
0xfd600 Gfx::initDisplayProfile()
0xfd780 Gfx::findOp(char*)
0xfd820 Gfx::checkArg(Object*, TchkType)
0xfd8d0 Gfx::getPos()
0xfd900 Gfx::execOp(Object*, Object*, int)
0xfdb10 Gfx::opSetFillColorSpace(Object*, int)
0xfdd50 Gfx::opSetStrokeColorSpace(Object*, int)
0xfdf90 Gfx::opSetFillColor(Object*, int)
0xfe1b0 Gfx::opSetStrokeColor(Object*, int)
0xfe3d0 Gfx::opSetFillColorN(Object*, int)
0xfe840 Gfx::opSetStrokeColorN(Object*, int)
0xfecc0 Gfx::opLineTo(Object*, int)
0xfede0 Gfx::opCurveTo(Object*, int)
0xff020 Gfx::opCurveTo1(Object*, int)
0xff1e0 Gfx::opCurveTo2(Object*, int)
0xff390 Gfx::opClosePath(Object*, int)
0xff420 Gfx::opImageData(Object*, int)
0xff450 Gfx::opEndImage(Object*, int)
0xff480 Gfx::doFunctionShFill1(GfxFunctionShading*, double, double, double, double, GfxColor*, int)
0x100a20 Gfx::doFunctionShFill(GfxFunctionShading*) [clone .part.136]
0x100b30 Gfx::doFunctionShFill(GfxFunctionShading*)
0x100ba0 Gfx::doAxialShFill(GfxAxialShading*)
0x101f30 Gfx::doRadialShFill(GfxRadialShading*)
0x1047b0 Gfx::gouraudFillTriangle(double, double, GfxColor*, double, double, GfxColor*, double, double, GfxColor*, int, int, GfxState::ReusablePathIterator*)
0x104ef0 Gfx::gouraudFillTriangle(double, double, double, double, double, double, double, double, double, double, int, GfxGouraudTriangleShading*, GfxState::ReusablePathIterator*)
0x105570 Gfx::doGouraudTriangleShFill(GfxGouraudTriangleShading*)
0x105960 Gfx::fillPatch(GfxPatch*, int, int, double, int, GfxPatchMeshShading*)
0x106390 Gfx::doPatchMeshShFill(GfxPatchMeshShading*)
0x1064f0 Gfx::doEndPath()
0x106580 Gfx::opEndPath(Object*, int)
0x106590 Gfx::doIncCharCount(GooString*)
0x1065f0 Gfx::buildImageStream()
0x106840 Gfx::popMarkedContent()
0x106860 Gfx::pushMarkedContent()
0x106890 Gfx::contentIsHidden()
0x1068e0 Gfx::opBeginMarkedContent(Object*, int)
0x106c70 Gfx::opEndMarkedContent(Object*, int)
0x106d00 Gfx::bottomGuard()
0x106d20 Gfx::saveState()
0x106d70 Gfx::opSave(Object*, int)
0x106d80 Gfx::restoreState()
0x106e00 Gfx::opRestore(Object*, int)
0x106e10 Gfx::popStateGuard()
0x106e60 Gfx::saveStateStack()
0x106ec0 Gfx::restoreStateStack(GfxState*)
0x106f40 Gfx::doShadingPatternFill(GfxShadingPattern*, bool, bool, bool)
0x107800 Gfx::opShFill(Object*, int)
0x107bd0 Gfx::pushResources(Dict*)
0x107c10 Gfx::popResources()
0x107c40 Gfx::checkTransparencyGroup(Dict*)
0x108070 Gfx::~Gfx()
0x108180 Gfx::pushStateGuard()
0x1081c0 Gfx::Gfx(PDFDoc*, OutputDev*, int, Dict*, double, double, PDFRectangle*, PDFRectangle*, int, bool (*)(void*), void*, XRef*)
0x108550 Gfx::Gfx(PDFDoc*, OutputDev*, Dict*, PDFRectangle*, PDFRectangle*, bool (*)(void*), void*, XRef*)
0x108850 Gfx::go(bool)
0x108d50 Gfx::display(Object*, bool)
0x108ed0 Gfx::drawForm(Object*, Dict*, double*, double*, bool, bool, GfxColorSpace*, bool, bool, bool, Function*, GfxColor*)
0x109530 Gfx::doSoftMask(Object*, bool, GfxColorSpace*, bool, bool, Function*, GfxColor*)
0x1099f0 Gfx::opSetExtGState(Object*, int)
0x10b010 Gfx::doTilingPatternFill(GfxTilingPattern*, bool, bool, bool)
0x10c020 Gfx::doPatternFill(bool)
0x10c0e0 Gfx::opFill(Object*, int)
0x10c160 Gfx::opEOFill(Object*, int)
0x10c1e0 Gfx::doPatternStroke()
0x10c290 Gfx::opStroke(Object*, int)
0x10c310 Gfx::opCloseStroke(Object*, int)
0x10c3e0 Gfx::opFillStroke(Object*, int)
0x10c4b0 Gfx::opCloseFillStroke(Object*, int)
0x10c5d0 Gfx::opEOFillStroke(Object*, int)
0x10c6a0 Gfx::opCloseEOFillStroke(Object*, int)
0x10c7c0 Gfx::doPatternText()
0x10c870 Gfx::doPatternImageMask(Object*, Stream*, int, int, bool, bool)
0x10ca40 Gfx::doImage(Object*, Stream*, bool)
0x10ddf0 Gfx::opBeginImage(Object*, int)
0x10deb0 Gfx::doForm(Object*)
0x10e620 Gfx::opXObject(Object*, int)
0x10eac0 Gfx::drawAnnot(Object*, AnnotBorder*, AnnotColor*, double, double, double, double, int)
0x10f720 Gfx::doShowText(GooString*)
0x1106e0 Gfx::opShowText(Object*, int)
0x110820 Gfx::opMoveShowText(Object*, int)
0x110a00 Gfx::opMoveSetShowText(Object*, int)
0x110d10 Gfx::opShowSpaceText(Object*, int)
0x1110e0 OutputDev::useTilingPatternFill()
0x1110f0 OutputDev::useShadedFills(int)
0x111100 OutputDev::startPage(int, GfxState*, XRef*)
0x111110 OutputDev::endPage()
0x111120 OutputDev::saveState(GfxState*)
0x111130 OutputDev::restoreState(GfxState*)
0x111140 OutputDev::updateCTM(GfxState*, double, double, double, double, double, double)
0x111150 OutputDev::updateLineDash(GfxState*)
0x111160 OutputDev::updateFlatness(GfxState*)
0x111170 OutputDev::updateLineJoin(GfxState*)
0x111180 OutputDev::updateLineCap(GfxState*)
0x111190 OutputDev::updateMiterLimit(GfxState*)
0x1111a0 OutputDev::updateLineWidth(GfxState*)
0x1111b0 OutputDev::updateStrokeAdjust(GfxState*)
0x1111c0 OutputDev::updateFillColorSpace(GfxState*)
0x1111d0 OutputDev::updateStrokeColorSpace(GfxState*)
0x1111e0 OutputDev::updateFillColor(GfxState*)
0x1111f0 OutputDev::updateStrokeColor(GfxState*)
0x111200 OutputDev::updateBlendMode(GfxState*)
0x111210 OutputDev::updateFillOpacity(GfxState*)
0x111220 OutputDev::updateStrokeOpacity(GfxState*)
0x111230 OutputDev::updateFillOverprint(GfxState*)
0x111240 OutputDev::updateStrokeOverprint(GfxState*)
0x111250 OutputDev::updateOverprintMode(GfxState*)
0x111260 OutputDev::updateTransfer(GfxState*)
0x111270 OutputDev::updateFont(GfxState*)
0x111280 OutputDev::stroke(GfxState*)
0x111290 OutputDev::fill(GfxState*)
0x1112a0 OutputDev::eoFill(GfxState*)
0x1112b0 OutputDev::tilingPatternFill(GfxState*, Gfx*, Catalog*, Object*, double*, int, int, Dict*, double*, double*, int, int, int, int, double, double)
0x1112c0 OutputDev::axialShadedFill(GfxState*, GfxAxialShading*, double, double)
0x1112d0 OutputDev::radialShadedFill(GfxState*, GfxRadialShading*, double, double)
0x1112e0 OutputDev::gouraudTriangleShadedFill(GfxState*, GfxGouraudTriangleShading*)
0x1112f0 OutputDev::clip(GfxState*)
0x111300 OutputDev::eoClip(GfxState*)
0x111310 OutputDev::clipToStrokePath(GfxState*)
0x111320 OutputDev::drawChar(GfxState*, double, double, double, double, double, double, unsigned int, int, unsigned int*, int)
0x111330 OutputDev::endType3Char(GfxState*)
0x111340 OutputDev::beginTextObject(GfxState*)
0x111350 OutputDev::endTextObject(GfxState*)
0x111360 OutputDev::type3D0(GfxState*, double, double)
0x111370 OutputDev::type3D1(GfxState*, double, double, double, double, double, double)
0x111380 OutputDev::beginTransparencyGroup(GfxState*, double*, GfxColorSpace*, bool, bool, bool)
0x111390 OutputDev::endTransparencyGroup(GfxState*)
0x1113a0 OutputDev::paintTransparencyGroup(GfxState*, double*)
0x1113b0 OutputDev::setSoftMask(GfxState*, double*, bool, Function*, GfxColor*)
0x1113c0 OutputDev::clearSoftMask(GfxState*)
0x1113d0 OutputDev::getVectorAntialias()
0x1113e0 OutputDev::setVectorAntialias(bool)
0x1113f0 Object::getNum()
0x111460 Stream::toUnsignedChars(int*, int, int)
0x1115b0 readFromStream(void*)
0x1115c0 GfxCIDFont::getWMode()
0x1115e0 Gfx8BitFont::getNextChar(char*, int, unsigned int*, unsigned int**, int*, double*, double*, double*, double*)
0x111640 parseNumericName(char*, bool, unsigned int*)
0x111760 parseCharName(char*, unsigned int*, int, bool, bool, bool, bool, bool)
0x111be0 Gfx8BitFont::getToUnicode()
0x111c00 GfxCIDFont::getToUnicode()
0x111c30 GfxCIDFont::getNextChar(char*, int, unsigned int*, unsigned int**, int*, double*, double*, double*, double*)
0x111ec0 Object::getName() [clone .isra.16]
0x111f00 Object::arrayGetLength() [clone .isra.21]
0x111f40 void std::__unguarded_linear_insert<GfxFontCIDWidthExcep*, __gnu_cxx::__ops::_Val_comp_iter<cmpWidthExcepFunctor> >(GfxFontCIDWidthExcep*, __gnu_cxx::__ops::_Val_comp_iter<cmpWidthExcepFunctor>) [clone .isra.57]
0x111f90 void std::__unguarded_linear_insert<GfxFontCIDWidthExcepV*, __gnu_cxx::__ops::_Val_comp_iter<cmpWidthExcepVFunctor> >(GfxFontCIDWidthExcepV*, __gnu_cxx::__ops::_Val_comp_iter<cmpWidthExcepVFunctor>) [clone .isra.61]
0x112000 void std::__insertion_sort<GfxFontCIDWidthExcepV*, __gnu_cxx::__ops::_Iter_comp_iter<cmpWidthExcepVFunctor> >(GfxFontCIDWidthExcepV*, GfxFontCIDWidthExcepV*, __gnu_cxx::__ops::_Iter_comp_iter<cmpWidthExcepVFunctor>) [clone .isra.67]
0x1120e0 GfxFontLoc::GfxFontLoc()
0x112100 GfxFontLoc::~GfxFontLoc()
0x112150 GfxFont::GfxFont(char const*, Ref, GooString*, GfxFontType, Ref)
0x112220 GfxFont::~GfxFont()
0x1122e0 Gfx8BitFont::~Gfx8BitFont()
0x112380 Gfx8BitFont::~Gfx8BitFont()
0x1123a0 GfxCIDFont::~GfxCIDFont()
0x112430 GfxCIDFont::~GfxCIDFont()
0x112450 GfxFont::~GfxFont()
0x112470 GfxFont::incRefCnt()
0x112480 GfxFont::decRefCnt()
0x1124a0 GfxFont::getFontType(XRef*, Dict*, Ref*)
0x112d10 GfxFont::readFontDescriptor(XRef*, Dict*)
0x1136b0 GfxFont::readToUnicodeCMap(Dict*, int, CharCodeToUnicode*)
0x1137e0 GfxFont::getExternalFont(GooString*, bool)
0x1138c0 GfxFont::locateBase14Font(GooString*)
0x113900 GfxFont::readEmbFontFile(XRef*, int*)
0x113b00 GfxFont::getAlternateName(char const*)
0x113b50 Gfx8BitFont::Gfx8BitFont(XRef*, char const*, Ref, GooString*, GfxFontType, Ref, Dict*)
0x1152f0 Gfx8BitFont::getCodeToGIDMap(FoFiTrueType*)
0x115600 Gfx8BitFont::getCharProcs()
0x115620 Gfx8BitFont::getCharProc(int, Object*)
0x115670 Gfx8BitFont::getResources()
0x115690 GfxCIDFont::getCollection()
0x1156b0 GfxFont::locateFont(XRef*, PSOutputDev*)
0x115ed0 GfxCIDFont::mapCodeToGID(FoFiTrueType*, int, unsigned int, bool)
0x115f10 GfxCIDFont::getCodeToGIDMap(FoFiTrueType*, int*)
0x1165c0 GfxCIDFont::getWidth(char*, int)
0x116650 GfxFontDict::~GfxFontDict()
0x1166a0 GfxFontDict::lookup(char*)
0x116720 GfxCIDFont::GfxCIDFont(XRef*, char const*, Ref, GooString*, GfxFontType, Ref, Dict*)
0x117cc0 GfxFont::makeFont(XRef*, char const*, Ref, Dict*)
0x117e00 GfxFontDict::GfxFontDict(XRef*, Ref*, Dict*)
0x117ff0 GfxFont::getWMode()
0x118000 GfxCIDFont::isCIDFont()
0x118010 void std::__adjust_heap<GfxFontCIDWidthExcep*, long, GfxFontCIDWidthExcep, __gnu_cxx::__ops::_Iter_comp_iter<cmpWidthExcepFunctor> >(GfxFontCIDWidthExcep*, long, long, GfxFontCIDWidthExcep, __gnu_cxx::__ops::_Iter_comp_iter<cmpWidthExcepFunctor>)
0x118170 void std::__heap_select<GfxFontCIDWidthExcep*, __gnu_cxx::__ops::_Iter_comp_iter<cmpWidthExcepFunctor> >(GfxFontCIDWidthExcep*, GfxFontCIDWidthExcep*, GfxFontCIDWidthExcep*, __gnu_cxx::__ops::_Iter_comp_iter<cmpWidthExcepFunctor>)
0x118260 void std::__introsort_loop<GfxFontCIDWidthExcep*, long, __gnu_cxx::__ops::_Iter_comp_iter<cmpWidthExcepFunctor> >(GfxFontCIDWidthExcep*, GfxFontCIDWidthExcep*, long, __gnu_cxx::__ops::_Iter_comp_iter<cmpWidthExcepFunctor>)
0x118480 void std::__adjust_heap<GfxFontCIDWidthExcepV*, long, GfxFontCIDWidthExcepV, __gnu_cxx::__ops::_Iter_comp_iter<cmpWidthExcepVFunctor> >(GfxFontCIDWidthExcepV*, long, long, GfxFontCIDWidthExcepV, __gnu_cxx::__ops::_Iter_comp_iter<cmpWidthExcepVFunctor>)
0x118660 void std::__heap_select<GfxFontCIDWidthExcepV*, __gnu_cxx::__ops::_Iter_comp_iter<cmpWidthExcepVFunctor> >(GfxFontCIDWidthExcepV*, GfxFontCIDWidthExcepV*, GfxFontCIDWidthExcepV*, __gnu_cxx::__ops::_Iter_comp_iter<cmpWidthExcepVFunctor>)
0x118790 void std::__introsort_loop<GfxFontCIDWidthExcepV*, long, __gnu_cxx::__ops::_Iter_comp_iter<cmpWidthExcepVFunctor> >(GfxFontCIDWidthExcepV*, GfxFontCIDWidthExcepV*, long, __gnu_cxx::__ops::_Iter_comp_iter<cmpWidthExcepVFunctor>)
0x118a70 GfxColorSpace::createMapping(GooList*, int)
0x118a80 GfxColorSpace::getDefaultRanges(double*, double*, int)
0x118ae0 getCMSColorSpaceType(cmsColorSpaceSignature)
0x118bc0 getCMSNChannels(cmsColorSpaceSignature)
0x118cf0 GfxDeviceGrayColorSpace::getGray(GfxColor*, int*)
0x118d10 GfxDeviceGrayColorSpace::getRGB(GfxColor*, GfxRGB*)
0x118d40 GfxDeviceGrayColorSpace::getRGBLine(unsigned char*, unsigned int*, int)
0x118d80 GfxDeviceGrayColorSpace::getRGBLine(unsigned char*, unsigned char*, int)
0x118dc0 GfxDeviceGrayColorSpace::getRGBXLine(unsigned char*, unsigned char*, int)
0x118e00 GfxDeviceGrayColorSpace::getCMYKLine(unsigned char*, unsigned char*, int)
0x118e30 GfxDeviceGrayColorSpace::getDeviceNLine(unsigned char*, unsigned char*, int)
0x118e80 GfxDeviceGrayColorSpace::getCMYK(GfxColor*, GfxCMYK*)
0x118ec0 GfxDeviceGrayColorSpace::getDeviceN(GfxColor*, GfxColor*)
0x118f00 GfxDeviceGrayColorSpace::getDefaultColor(GfxColor*)
0x118f10 GfxCalGrayColorSpace::getDeviceN(GfxColor*, GfxColor*)
0x118f60 GfxCalGrayColorSpace::getDefaultColor(GfxColor*)
0x118f70 GfxDeviceRGBColorSpace::getGray(GfxColor*, int*)
0x118fe0 GfxDeviceRGBColorSpace::getGrayLine(unsigned char*, unsigned char*, int)
0x119030 GfxDeviceRGBColorSpace::getRGB(GfxColor*, GfxRGB*)
0x119080 GfxDeviceRGBColorSpace::getRGBLine(unsigned char*, unsigned int*, int)
0x1190c0 GfxDeviceRGBColorSpace::getRGBLine(unsigned char*, unsigned char*, int)
0x119100 GfxDeviceRGBColorSpace::getRGBXLine(unsigned char*, unsigned char*, int)
0x119140 GfxDeviceRGBColorSpace::getCMYKLine(unsigned char*, unsigned char*, int)
0x119210 GfxDeviceRGBColorSpace::getDeviceNLine(unsigned char*, unsigned char*, int)
0x119310 GfxDeviceRGBColorSpace::getCMYK(GfxColor*, GfxCMYK*)
0x119380 GfxDeviceRGBColorSpace::getDeviceN(GfxColor*, GfxColor*)
0x1193d0 GfxDeviceRGBColorSpace::getDefaultColor(GfxColor*)
0x1193f0 GfxCalRGBColorSpace::getDeviceN(GfxColor*, GfxColor*)
0x119440 GfxCalRGBColorSpace::getDefaultColor(GfxColor*)
0x119460 GfxDeviceCMYKColorSpace::getGray(GfxColor*, int*)
0x1194e0 GfxDeviceCMYKColorSpace::getCMYKLine(unsigned char*, unsigned char*, int)
0x119520 GfxDeviceCMYKColorSpace::getDeviceNLine(unsigned char*, unsigned char*, int)
0x119580 GfxDeviceCMYKColorSpace::getCMYK(GfxColor*, GfxCMYK*)
0x1195e0 GfxDeviceCMYKColorSpace::getDeviceN(GfxColor*, GfxColor*)
0x119660 GfxDeviceCMYKColorSpace::getDefaultColor(GfxColor*)
0x119680 GfxLabColorSpace::getDeviceN(GfxColor*, GfxColor*)
0x1196d0 GfxLabColorSpace::getDefaultRanges(double*, double*, int)
0x119720 GfxICCBasedColorSpace::getDeviceN(GfxColor*, GfxColor*)
0x119770 GfxICCBasedColorSpace::getDefaultColor(GfxColor*)
0x1197e0 GfxICCBasedColorSpace::getDefaultRanges(double*, double*, int)
0x1197f0 GfxIndexedColorSpace::getDefaultColor(GfxColor*)
0x119800 GfxIndexedColorSpace::getDefaultRanges(double*, double*, int)
0x119820 GfxSeparationColorSpace::getGray(GfxColor*, int*)
0x1198c0 GfxSeparationColorSpace::getRGB(GfxColor*, GfxRGB*)
0x119960 GfxSeparationColorSpace::getCMYK(GfxColor*, GfxCMYK*)
0x119a00 GfxSeparationColorSpace::getDefaultColor(GfxColor*)
0x119a10 GfxDeviceNColorSpace::getGray(GfxColor*, int*)
0x119af0 GfxDeviceNColorSpace::getRGB(GfxColor*, GfxRGB*)
0x119bd0 GfxDeviceNColorSpace::getCMYK(GfxColor*, GfxCMYK*)
0x119cb0 GfxDeviceNColorSpace::getDefaultColor(GfxColor*)
0x119ce0 GfxPatternColorSpace::getGray(GfxColor*, int*)
0x119cf0 GfxPatternColorSpace::getRGB(GfxColor*, GfxRGB*)
0x119d10 GfxPatternColorSpace::getCMYK(GfxColor*, GfxCMYK*)
0x119d30 GfxPatternColorSpace::getDeviceN(GfxColor*, GfxColor*)
0x119d60 GfxPatternColorSpace::getDefaultColor(GfxColor*)
0x119d70 GfxAxialShading::getParameterRange(double*, double*, double, double, double, double)
0x119e90 GfxAxialShading::getDistance(double, double)
0x119f00 GfxRadialShading::getDistance(double, double)
0x119fe0 CMSError(_cmsContext_struct*, unsigned int, char const*)
0x11a000 GfxDeviceGrayColorSpace::getGrayLine(unsigned char*, unsigned char*, int)
0x11a010 GfxIndexedColorSpace::getRGBLine(unsigned char*, unsigned int*, int)
0x11a0d0 GfxIndexedColorSpace::getRGBLine(unsigned char*, unsigned char*, int)
0x11a190 GfxIndexedColorSpace::getRGBXLine(unsigned char*, unsigned char*, int)
0x11a250 GfxIndexedColorSpace::getCMYKLine(unsigned char*, unsigned char*, int)
0x11a310 GfxIndexedColorSpace::getDeviceNLine(unsigned char*, unsigned char*, int)
0x11a3d0 GfxLabColorSpace::getDefaultColor(GfxColor*)
0x11a440 GfxICCBasedColorSpace::useGetRGBLine()
0x11a460 GfxICCBasedColorSpace::useGetCMYKLine()
0x11a480 GfxICCBasedColorSpace::useGetDeviceNLine()
0x11a4a0 GfxSeparationColorSpace::getDeviceN(GfxColor*, GfxColor*)
0x11a510 GfxDeviceNColorSpace::getDeviceN(GfxColor*, GfxColor*)
0x11a5a0 radialExtendRange(double*, double, bool) [clone .part.6]
0x11a5d0 loadColorProfile(char const*)
0x11a6a0 Object::getArray() [clone .isra.27]
0x11a6e0 GfxSeparationColorSpace::createMapping(GooList*, int)
0x11a880 GfxRadialShading::getParameterRange(double*, double*, double, double, double, double)
0x11c240 GfxDeviceCMYKColorSpace::getRGB(GfxColor*, GfxRGB*)
0x11c560 GfxDeviceCMYKColorSpace::getRGBLine(unsigned char*, unsigned char*, int)
0x11c930 GfxDeviceCMYKColorSpace::getRGBXLine(unsigned char*, unsigned char*, int)
0x11cd10 GfxDeviceCMYKColorSpace::getRGBLine(unsigned char*, unsigned int*, int)
0x11d0f0 Matrix::invertTo(Matrix*) const
0x11d1a0 Matrix::transform(double, double, double*, double*) const
0x11d1e0 Matrix::norm() const
0x11d290 GfxColorTransform::doTransform(void*, void*, unsigned int)
0x11d2a0 GfxICCBasedColorSpace::getRGBLine(unsigned char*, unsigned int*, int)
0x11d340 GfxICCBasedColorSpace::getRGBLine(unsigned char*, unsigned char*, int)
0x11d770 GfxICCBasedColorSpace::getRGBXLine(unsigned char*, unsigned char*, int)
0x11d830 GfxICCBasedColorSpace::getCMYKLine(unsigned char*, unsigned char*, int)
0x11d9c0 GfxICCBasedColorSpace::getDeviceNLine(unsigned char*, unsigned char*, int)
0x11dbe0 GfxColorTransform::GfxColorTransform(void*, int, unsigned int, unsigned int)
0x11dc00 GfxColorTransform::~GfxColorTransform()
0x11dc10 GfxColorTransform::ref()
0x11dc20 GfxColorTransform::unref()
0x11dc30 GfxColorSpace::setDisplayProfile(void*)
0x11dd20 GfxColorSpace::setDisplayProfileName(GooString*)
0x11dd50 GfxColorSpace::getRGBProfile()
0x11dd60 GfxColorSpace::getDisplayProfile()
0x11dd70 GfxColorSpace::GfxColorSpace()
0x11dd90 GfxColorSpace::~GfxColorSpace()
0x11dda0 GfxDeviceGrayColorSpace::~GfxDeviceGrayColorSpace()
0x11ddc0 GfxDeviceGrayColorSpace::~GfxDeviceGrayColorSpace()
0x11dde0 GfxCalGrayColorSpace::~GfxCalGrayColorSpace()
0x11de30 GfxCalGrayColorSpace::~GfxCalGrayColorSpace()
0x11de50 GfxDeviceRGBColorSpace::~GfxDeviceRGBColorSpace()
0x11de70 GfxDeviceRGBColorSpace::~GfxDeviceRGBColorSpace()
0x11de90 GfxCalRGBColorSpace::~GfxCalRGBColorSpace()
0x11def0 GfxCalRGBColorSpace::~GfxCalRGBColorSpace()
0x11df10 GfxDeviceCMYKColorSpace::~GfxDeviceCMYKColorSpace()
0x11df30 GfxDeviceCMYKColorSpace::~GfxDeviceCMYKColorSpace()
0x11df50 GfxLabColorSpace::~GfxLabColorSpace()
0x11dfb0 GfxLabColorSpace::~GfxLabColorSpace()
0x11dfd0 GfxIndexedColorSpace::~GfxIndexedColorSpace()
0x11e010 GfxIndexedColorSpace::~GfxIndexedColorSpace()
0x11e030 GfxSeparationColorSpace::~GfxSeparationColorSpace()
0x11e0a0 GfxSeparationColorSpace::~GfxSeparationColorSpace()
0x11e0c0 GfxDeviceNColorSpace::~GfxDeviceNColorSpace()
0x11e1e0 GfxDeviceNColorSpace::~GfxDeviceNColorSpace()
0x11e200 GfxPatternColorSpace::~GfxPatternColorSpace()
0x11e230 GfxPatternColorSpace::~GfxPatternColorSpace()
0x11e250 GfxColorSpace::~GfxColorSpace()
0x11e270 GfxColorSpace::getNumColorSpaceModes()
0x11e280 GfxColorSpace::getColorSpaceModeName(int)
0x11e290 GfxColorSpace::setupColorProfiles()
0x11e420 GfxDeviceGrayColorSpace::GfxDeviceGrayColorSpace()
0x11e440 GfxDeviceGrayColorSpace::copy()
0x11e460 GfxCalGrayColorSpace::GfxCalGrayColorSpace()
0x11e4b0 GfxCalGrayColorSpace::copy()
0x11e540 GfxCalGrayColorSpace::getXYZ(GfxColor*, double*, double*, double*)
0x11e580 GfxCalGrayColorSpace::getGray(GfxColor*, int*) [clone .part.77]
0x11e680 GfxCalGrayColorSpace::getGray(GfxColor*, int*)
0x11e720 GfxCalGrayColorSpace::getRGB(GfxColor*, GfxRGB*)
0x11eab0 GfxCalGrayColorSpace::getCMYK(GfxColor*, GfxCMYK*)
0x11ec80 GfxDeviceRGBColorSpace::GfxDeviceRGBColorSpace()
0x11eca0 GfxDeviceRGBColorSpace::copy()
0x11ecc0 GfxCalRGBColorSpace::GfxCalRGBColorSpace()
0x11ed50 GfxCalRGBColorSpace::copy()
0x11ee10 GfxCalRGBColorSpace::getXYZ(GfxColor*, double*, double*, double*)
0x11ef20 GfxCalRGBColorSpace::getGray(GfxColor*, int*) [clone .part.78]
0x11f020 GfxCalRGBColorSpace::getGray(GfxColor*, int*)
0x11f0c0 GfxCalRGBColorSpace::getRGB(GfxColor*, GfxRGB*)
0x11f3d0 GfxCalRGBColorSpace::getCMYK(GfxColor*, GfxCMYK*)
0x11f5a0 GfxDeviceCMYKColorSpace::GfxDeviceCMYKColorSpace()
0x11f5c0 GfxDeviceCMYKColorSpace::copy()
0x11f5e0 GfxLabColorSpace::GfxLabColorSpace()
0x11f650 GfxLabColorSpace::copy()
0x11f720 GfxLabColorSpace::getXYZ(GfxColor*, double*, double*, double*)
0x11f820 GfxLabColorSpace::getGray(GfxColor*, int*) [clone .part.79]
0x11f880 GfxLabColorSpace::getGray(GfxColor*, int*)
0x11f920 GfxLabColorSpace::getRGB(GfxColor*, GfxRGB*)
0x1200c0 GfxLabColorSpace::getCMYK(GfxColor*, GfxCMYK*)
0x1201f0 GfxICCBasedColorSpace::GfxICCBasedColorSpace(int, GfxColorSpace*, Ref*)
0x1202b0 GfxICCBasedColorSpace::copy()
0x120340 GfxIndexedColorSpace::GfxIndexedColorSpace(GfxColorSpace*, int)
0x1203a0 GfxIndexedColorSpace::copy()
0x120410 GfxIndexedColorSpace::mapColorToBase(GfxColor*, GfxColor*)
0x120560 GfxIndexedColorSpace::getGray(GfxColor*, int*)
0x1205a0 GfxIndexedColorSpace::getRGB(GfxColor*, GfxRGB*)
0x1205e0 GfxIndexedColorSpace::getCMYK(GfxColor*, GfxCMYK*)
0x120620 GfxIndexedColorSpace::getDeviceN(GfxColor*, GfxColor*)
0x120660 GfxSeparationColorSpace::GfxSeparationColorSpace(GooString*, GfxColorSpace*, Function*)
0x120770 GfxDeviceNColorSpace::createMapping(GooList*, int)
0x120bc0 GfxSeparationColorSpace::GfxSeparationColorSpace(GooString*, GfxColorSpace*, Function*, bool, unsigned int, int*)
0x120c20 GfxSeparationColorSpace::copy()
0x120cd0 GfxDeviceNColorSpace::GfxDeviceNColorSpace(int, GooString**, GfxColorSpace*, Function*, GooList*)
0x120e20 GfxDeviceNColorSpace::GfxDeviceNColorSpace(int, GooString**, GfxColorSpace*, Function*, GooList*, int*, bool, unsigned int)
0x120ee0 GfxDeviceNColorSpace::copy()
0x121000 GfxPatternColorSpace::GfxPatternColorSpace(GfxColorSpace*)
0x121030 GfxPatternColorSpace::copy()
0x121070 GfxPattern::GfxPattern(int)
0x121090 GfxPattern::~GfxPattern()
0x1210a0 GfxTilingPattern::~GfxTilingPattern()
0x1210e0 GfxTilingPattern::~GfxTilingPattern()
0x121100 GfxShadingPattern::~GfxShadingPattern()
0x121130 GfxShadingPattern::~GfxShadingPattern()
0x121150 GfxPattern::~GfxPattern()
0x121170 GfxTilingPattern::GfxTilingPattern(int, int, double*, double, double, Object*, double*, Object*)
0x121270 GfxTilingPattern::parse(Object*)
0x121870 GfxTilingPattern::copy()
0x1218c0 GfxShadingPattern::GfxShadingPattern(GfxShading*, double*)
0x121910 GfxShadingPattern::copy()
0x121950 GfxShading::GfxShading(int)
0x121970 GfxShading::GfxShading(GfxShading*)
0x121a20 GfxShading::~GfxShading()
0x121a50 GfxFunctionShading::~GfxFunctionShading()
0x121ab0 GfxFunctionShading::~GfxFunctionShading()
0x121ad0 GfxGouraudTriangleShading::~GfxGouraudTriangleShading()
0x121b50 GfxGouraudTriangleShading::~GfxGouraudTriangleShading()
0x121b70 GfxPatchMeshShading::~GfxPatchMeshShading()
0x121be0 GfxPatchMeshShading::~GfxPatchMeshShading()
0x121c00 GfxShading::~GfxShading()
0x121c20 GfxFunctionShading::GfxFunctionShading(double, double, double, double, double*, Function**, int)
0x121d00 GfxFunctionShading::GfxFunctionShading(GfxFunctionShading*)
0x121de0 GfxFunctionShading::copy()
0x121e10 GfxFunctionShading::getColor(double, double, GfxColor*)
0x121ee0 GfxUnivariateShading::GfxUnivariateShading(int, double, double, Function**, int, bool, bool)
0x121fc0 GfxUnivariateShading::GfxUnivariateShading(GfxUnivariateShading*)
0x1220a0 GfxUnivariateShading::~GfxUnivariateShading()
0x122110 GfxAxialShading::~GfxAxialShading()
0x122130 GfxAxialShading::~GfxAxialShading()
0x122150 GfxRadialShading::~GfxRadialShading()
0x122170 GfxRadialShading::~GfxRadialShading()
0x122190 GfxUnivariateShading::~GfxUnivariateShading()
0x1221b0 GfxUnivariateShading::getColor(double, GfxColor*)
0x1224c0 GfxUnivariateShading::setupCache(Matrix const*, double, double, double, double)
0x122910 GfxAxialShading::GfxAxialShading(double, double, double, double, double, double, Function**, int, bool, bool)
0x1229a0 GfxAxialShading::GfxAxialShading(GfxAxialShading*)
0x122a10 GfxAxialShading::copy()
0x122a40 GfxRadialShading::GfxRadialShading(double, double, double, double, double, double, double, double, Function**, int, bool, bool)
0x122b00 GfxRadialShading::GfxRadialShading(GfxRadialShading*)
0x122b90 GfxRadialShading::copy()
0x122bc0 GfxShadingBitBuf::GfxShadingBitBuf(Stream*)
0x122be0 GfxShadingBitBuf::~GfxShadingBitBuf()
0x122bf0 GfxShadingBitBuf::getBits(int, unsigned int*)
0x122cc0 GfxShadingBitBuf::flushBits()
0x122cd0 GfxGouraudTriangleShading::GfxGouraudTriangleShading(int, GfxGouraudVertex*, int, int (*) [3], int, Function**, int)
0x122d80 GfxGouraudTriangleShading::GfxGouraudTriangleShading(GfxGouraudTriangleShading*)
0x122e70 GfxGouraudTriangleShading::copy()
0x122ea0 GfxGouraudTriangleShading::getTriangle(int, double*, double*, GfxColor*, double*, double*, GfxColor*, double*, double*, GfxColor*)
0x1231d0 GfxGouraudTriangleShading::getParameterizedColor(double, GfxColor*)
0x123270 GfxGouraudTriangleShading::getTriangle(int, double*, double*, double*, double*, double*, double*, double*, double*, double*)
0x123380 GfxPatchMeshShading::GfxPatchMeshShading(int, GfxPatch*, int, Function**, int)
0x123400 GfxPatchMeshShading::GfxPatchMeshShading(GfxPatchMeshShading*)
0x1234a0 GfxPatchMeshShading::copy()
0x1234d0 GfxPatchMeshShading::getParameterizedColor(double, GfxColor*)
0x123570 GfxImageColorMap::GfxImageColorMap(int, Object*, GfxColorSpace*)
0x123ec0 GfxImageColorMap::GfxImageColorMap(GfxImageColorMap*)
0x1240f0 GfxImageColorMap::~GfxImageColorMap()
0x124150 GfxImageColorMap::getGray(unsigned char*, int*)
0x124210 GfxImageColorMap::getRGB(unsigned char*, GfxRGB*)
0x1242d0 GfxImageColorMap::getGrayLine(unsigned char*, unsigned char*, int)
0x1244a0 GfxImageColorMap::getRGBLine(unsigned char*, unsigned int*, int)
0x124690 GfxImageColorMap::getRGBLine(unsigned char*, unsigned char*, int)
0x124880 GfxImageColorMap::getRGBXLine(unsigned char*, unsigned char*, int)
0x124a60 GfxImageColorMap::getCMYK(unsigned char*, GfxCMYK*)
0x124b20 GfxImageColorMap::getCMYKLine(unsigned char*, unsigned char*, int)
0x124d30 GfxImageColorMap::getDeviceN(unsigned char*, GfxColor*)
0x124df0 GfxImageColorMap::getDeviceNLine(unsigned char*, unsigned char*, int)
0x124fa0 GfxImageColorMap::getColor(unsigned char*, GfxColor*)
0x125010 GfxSubpath::GfxSubpath(double, double)
0x125090 GfxSubpath::~GfxSubpath()
0x1250b0 GfxSubpath::GfxSubpath(GfxSubpath*)
0x125140 GfxSubpath::lineTo(double, double)
0x1251e0 GfxSubpath::curveTo(double, double, double, double, double, double)
0x1252e0 GfxSubpath::close()
0x125330 GfxSubpath::offset(double, double)
0x125370 GfxPath::GfxPath()
0x1253b0 GfxPath::~GfxPath()
0x125420 GfxPath::GfxPath(bool, double, double, GfxSubpath**, int, int)
0x1254c0 GfxPath::moveTo(double, double)
0x1254d0 GfxPath::lineTo(double, double)
0x125660 GfxPath::curveTo(double, double, double, double, double, double)
0x125890 GfxPath::close()
0x125920 GfxPath::append(GfxPath*)
0x1259d0 GfxPath::offset(double, double)
0x125a30 GfxState::ReusablePathIterator::ReusablePathIterator(GfxPath*)
0x125a70 GfxState::ReusablePathIterator::isEnd() const
0x125a80 GfxState::ReusablePathIterator::next()
0x125ac0 GfxState::ReusablePathIterator::setCoord(double, double)
0x125ae0 GfxState::ReusablePathIterator::reset()
0x125b10 GfxState::GfxState(double, double, PDFRectangle*, int, bool)
0x126060 GfxState::~GfxState()
0x126220 GfxState::GfxState(GfxState*, bool)
0x126410 GfxState::setDisplayProfile(void*)
0x1266a0 GfxState::getXYZ2DisplayTransform()
0x126740 GfxCalGrayColorSpace::parse(Array*, GfxState*)
0x126df0 GfxCalRGBColorSpace::parse(Array*, GfxState*)
0x1276c0 GfxLabColorSpace::parse(Array*, GfxState*)
0x127e50 GfxState::setPath(GfxPath*)
0x127e90 GfxState::getUserClipBBox(double*, double*, double*, double*)
0x1280d0 GfxState::transformWidth(double)
0x128140 GfxState::getTransformedFontSize()
0x1281c0 GfxState::getFontTransMat(double*, double*, double*, double*)
0x128280 GfxState::setCTM(double, double, double, double, double, double)
0x1282a0 GfxState::concatCTM(double, double, double, double, double, double)
0x128350 GfxState::shiftCTMAndClip(double, double)
0x1283c0 GfxState::setFillColorSpace(GfxColorSpace*)
0x1283f0 GfxState::setStrokeColorSpace(GfxColorSpace*)
0x128420 GfxState::setFillPattern(GfxPattern*)
0x128450 GfxState::setStrokePattern(GfxPattern*)
0x128480 GfxState::setFont(GfxFont*, double)
0x1284c0 GfxState::setTransfer(Function**)
0x128500 GfxState::setLineDash(double*, int, double)
0x128550 GfxState::clearPath()
0x1285a0 GfxState::clip()
0x128730 GfxState::clipToStrokePath()
0x128950 GfxState::clipToRect(double, double, double, double)
0x128b60 GfxState::textShift(double, double)
0x128bc0 GfxState::shift(double, double)
0x128bf0 GfxState::save()
0x128c30 GfxState::restore()
0x128cd0 GfxState::parseBlendMode(Object*, GfxBlendMode*)
0x128e80 GfxICCBasedColorSpace::~GfxICCBasedColorSpace()
0x128f20 GfxICCBasedColorSpace::~GfxICCBasedColorSpace()
0x128f40 GfxICCBasedColorSpace::parse(Array*, OutputDev*, GfxState*, int)
0x129b10 GfxColorSpace::parse(GfxResources*, Object*, OutputDev*, GfxState*, int)
0x12a350 GfxIndexedColorSpace::parse(GfxResources*, Array*, OutputDev*, GfxState*, int)
0x12a790 GfxSeparationColorSpace::parse(GfxResources*, Array*, OutputDev*, GfxState*, int)
0x12a9b0 GfxDeviceNColorSpace::parse(GfxResources*, Array*, OutputDev*, GfxState*, int)
0x12ae70 GfxPatternColorSpace::parse(GfxResources*, Array*, OutputDev*, GfxState*, int)
0x12af70 GfxShading::init(GfxResources*, Dict*, OutputDev*, GfxState*)
0x12b4e0 GfxFunctionShading::parse(GfxResources*, Dict*, OutputDev*, GfxState*)
0x12bd30 GfxAxialShading::parse(GfxResources*, Dict*, OutputDev*, GfxState*)
0x12c6f0 GfxRadialShading::parse(GfxResources*, Dict*, OutputDev*, GfxState*)
0x12cf30 GfxGouraudTriangleShading::parse(GfxResources*, int, Dict*, Stream*, OutputDev*, GfxState*)
0x12ddd0 GfxPatchMeshShading::parse(GfxResources*, int, Dict*, Stream*, OutputDev*, GfxState*)
0x12fe60 GfxShading::parse(GfxResources*, Object*, OutputDev*, GfxState*)
0x130110 GfxShadingPattern::parse(GfxResources*, Object*, OutputDev*, GfxState*)
0x130320 GfxPattern::parse(GfxResources*, Object*, OutputDev*, GfxState*)
0x130400 GfxICCBasedColorSpace::getGray(GfxColor*, int*)
0x1306d0 GfxICCBasedColorSpace::getRGB(GfxColor*, GfxRGB*)
0x130f20 GfxICCBasedColorSpace::getCMYK(GfxColor*, GfxCMYK*)
0x1312d0 GfxColorSpace::useGetRGBLine()
0x1312e0 GfxColorSpace::useGetGrayLine()
0x1312f0 GfxColorSpace::useGetCMYKLine()
0x131300 GfxColorSpace::useGetDeviceNLine()
0x131310 GfxDeviceGrayColorSpace::getMode()
0x131320 GfxDeviceGrayColorSpace::useGetRGBLine()
0x131330 GfxDeviceGrayColorSpace::useGetGrayLine()
0x131340 GfxDeviceGrayColorSpace::useGetCMYKLine()
0x131350 GfxDeviceGrayColorSpace::useGetDeviceNLine()
0x131360 GfxDeviceGrayColorSpace::getNComps()
0x131370 GfxCalGrayColorSpace::getMode()
0x131380 GfxCalGrayColorSpace::getNComps()
0x131390 GfxDeviceRGBColorSpace::getMode()
0x1313a0 GfxDeviceRGBColorSpace::useGetRGBLine()
0x1313b0 GfxDeviceRGBColorSpace::useGetGrayLine()
0x1313c0 GfxDeviceRGBColorSpace::useGetCMYKLine()
0x1313d0 GfxDeviceRGBColorSpace::useGetDeviceNLine()
0x1313e0 GfxDeviceRGBColorSpace::getNComps()
0x1313f0 GfxCalRGBColorSpace::getMode()
0x131400 GfxCalRGBColorSpace::getNComps()
0x131410 GfxDeviceCMYKColorSpace::getMode()
0x131420 GfxDeviceCMYKColorSpace::useGetRGBLine()
0x131430 GfxDeviceCMYKColorSpace::useGetCMYKLine()
0x131440 GfxDeviceCMYKColorSpace::useGetDeviceNLine()
0x131450 GfxDeviceCMYKColorSpace::getNComps()
0x131460 GfxLabColorSpace::getMode()
0x131470 GfxLabColorSpace::getNComps()
0x131480 GfxICCBasedColorSpace::getMode()
0x131490 GfxICCBasedColorSpace::getNComps()
0x1314a0 GfxIndexedColorSpace::getMode()
0x1314b0 GfxIndexedColorSpace::useGetRGBLine()
0x1314c0 GfxIndexedColorSpace::useGetCMYKLine()
0x1314d0 GfxIndexedColorSpace::useGetDeviceNLine()
0x1314e0 GfxIndexedColorSpace::getNComps()
0x1314f0 GfxIndexedColorSpace::createMapping(GooList*, int)
0x131500 GfxSeparationColorSpace::getMode()
0x131510 GfxSeparationColorSpace::getNComps()
0x131520 GfxSeparationColorSpace::isNonMarking()
0x131530 GfxDeviceNColorSpace::getMode()
0x131540 GfxDeviceNColorSpace::getNComps()
0x131550 GfxDeviceNColorSpace::isNonMarking()
0x131560 GfxPatternColorSpace::getMode()
0x131570 GfxPatternColorSpace::getNComps()
0x131580 GfxICCBasedColorSpaceKey::operator==(PopplerCacheKey const&) const
0x131590 GfxColorSpace::getRGBLine(unsigned char*, unsigned int*, int)
0x1315b0 GfxColorSpace::getRGBLine(unsigned char*, unsigned char*, int)
0x1315d0 GfxColorSpace::getRGBXLine(unsigned char*, unsigned char*, int)
0x1315f0 GfxColorSpace::getCMYKLine(unsigned char*, unsigned char*, int)
0x131610 GfxColorSpace::getDeviceNLine(unsigned char*, unsigned char*, int)
0x131630 GfxColorSpace::getGrayLine(unsigned char*, unsigned char*, int)
0x131650 GfxICCBasedColorSpaceKey::~GfxICCBasedColorSpaceKey()
0x131670 GfxICCBasedColorSpaceKey::~GfxICCBasedColorSpaceKey()
0x131690 std::_Rb_tree<unsigned int, std::pair<unsigned int const, unsigned int>, std::_Select1st<std::pair<unsigned int const, unsigned int> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned int const, unsigned int> >*)
0x1316d0 GfxICCBasedColorSpaceItem::~GfxICCBasedColorSpaceItem()
0x131740 GfxICCBasedColorSpaceItem::~GfxICCBasedColorSpaceItem()
0x1317b0 std::_Rb_tree<unsigned int, std::pair<unsigned int const, unsigned int>, std::_Select1st<std::pair<unsigned int const, unsigned int> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >::find(unsigned int const&)
0x131800 std::_Rb_tree<unsigned int, std::pair<unsigned int const, unsigned int>, std::_Select1st<std::pair<unsigned int const, unsigned int> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >::_M_insert_unique(std::pair<unsigned int const, unsigned int> const&)
0x131900 findModifier(char const*, char const*, char const**)
0x131950 mapUTF8(unsigned int, char*, int)
0x131a30 mapUCS2(unsigned int, char*, int)
0x131ab0 getFontLang(GfxFont*)
0x131c00 PSFontParam16::PSFontParam16(GooString*, int, GooString*, GooString*)
0x131c10 PSFontParam16::~PSFontParam16()
0x131c80 SysFontInfo::SysFontInfo(GooString*, bool, bool, bool, bool, GooString*, SysFontType, int, GooString*)
0x131cc0 SysFontInfo::~SysFontInfo()
0x131d30 SysFontInfo::match(SysFontInfo*)
0x131d70 SysFontInfo::match(GooString*, bool, bool, bool, bool)
0x131dd0 SysFontInfo::match(GooString*, bool, bool)
0x131e10 SysFontList::SysFontList()
0x131e40 SysFontList::~SysFontList()
0x131eb0 SysFontList::find(GooString*, bool, bool)
0x132320 GlobalParams::parseNameToUnicode(GooString*)
0x132460 GlobalParams::addCIDToUnicode(GooString*, GooString*)
0x1324e0 GlobalParams::addUnicodeMap(GooString*, GooString*)
0x132560 GlobalParams::addCMapDir(GooString*, GooString*)
0x1325f0 GlobalParams::scanEncodingDirs()
0x132880 GlobalParams::GlobalParams(char const*)
0x132e20 GlobalParams::parseYesNo2(char const*, bool*)
0x132e80 GlobalParams::~GlobalParams()
0x133550 GlobalParams::getMacRomanCharCode(char*)
0x133560 GlobalParams::mapNameToUnicodeAll(char const*)
0x1335a0 GlobalParams::mapNameToUnicodeText(char const*)
0x1335b0 GlobalParams::getResidentUnicodeMap(GooString*)
0x133600 GlobalParams::getUnicodeMapFile(GooString*)
0x133660 GlobalParams::findCMapFile(GooString*, GooString*)
0x133760 GlobalParams::findToUnicodeFile(GooString*)
0x133850 GlobalParams::setupBaseFonts(char*)
0x133860 GlobalParams::findFontFile(GooString*)
0x1339f0 GlobalParams::findSystemFontFile(GfxFont*, SysFontType*, int*, GooString*, GooString*)
0x134650 GlobalParams::findBase14FontFile(GooString*, GfxFont*)
0x134680 GlobalParams::findCCFontFile(GooString*)
0x1346e0 GlobalParams::getPSExpandSmaller()
0x134710 GlobalParams::getPSShrinkLarger()
0x134740 GlobalParams::getPSCenter()
0x134770 GlobalParams::getPSLevel()
0x1347a0 GlobalParams::getPSResidentFont(GooString*)
0x1347e0 GlobalParams::getPSResidentFonts()
0x1348a0 GlobalParams::getPSResidentFont16(GooString*, int)
0x134940 GlobalParams::getPSResidentFontCC(GooString*, int)
0x1349e0 GlobalParams::getTextEncodingName()
0x134a30 GlobalParams::getTextEOL()
0x134a60 GlobalParams::getTextPageBreaks()
0x134a90 GlobalParams::getTextKeepTinyChars()
0x134ac0 GlobalParams::getEnableFreeType()
0x134af0 GlobalParams::getStrokeAdjust()
0x134b20 GlobalParams::getScreenType()
0x134b50 GlobalParams::getScreenSize()
0x134b80 GlobalParams::getScreenDotRadius()
0x134bb0 GlobalParams::getScreenGamma()
0x134bf0 GlobalParams::getScreenBlackThreshold()
0x134c30 GlobalParams::getScreenWhiteThreshold()
0x134c70 GlobalParams::getMinLineWidth()
0x134cb0 GlobalParams::getMapNumericCharNames()
0x134ce0 GlobalParams::getMapUnknownCharNames()
0x134d10 GlobalParams::getPrintCommands()
0x134d40 GlobalParams::getProfileCommands()
0x134d70 GlobalParams::getErrQuiet()
0x134d80 GlobalParams::getCIDToUnicode(GooString*)
0x134e10 GlobalParams::getUnicodeToUnicode(GooString*)
0x134f00 GlobalParams::getUnicodeMap2(GooString*)
0x134f70 GlobalParams::getUnicodeMap(GooString*)
0x134f80 GlobalParams::getCMap(GooString*, GooString*, Stream*)
0x134fd0 GlobalParams::getTextEncoding()
0x134fe0 GlobalParams::getEncodingNames()
0x1350b0 GlobalParams::addFontFile(GooString*, GooString*)
0x135100 GlobalParams::setPSFile(char*)
0x135170 GlobalParams::setPSExpandSmaller(bool)
0x1351a0 GlobalParams::setPSShrinkLarger(bool)
0x1351d0 GlobalParams::setPSCenter(bool)
0x135200 GlobalParams::setPSLevel(PSLevel)
0x135230 GlobalParams::setTextEncoding(char*)
0x1352a0 GlobalParams::setTextEOL(char*)
0x135350 GlobalParams::setTextPageBreaks(bool)
0x135380 GlobalParams::setTextKeepTinyChars(bool)
0x1353b0 GlobalParams::setEnableFreeType(char*)
0x1353f0 GlobalParams::setDisableFreeTypeHinting(char*)
0x135430 GlobalParams::setStrokeAdjust(bool)
0x135460 GlobalParams::setScreenType(ScreenType)
0x135490 GlobalParams::setScreenSize(int)
0x1354c0 GlobalParams::setScreenDotRadius(int)
0x1354f0 GlobalParams::setScreenGamma(double)
0x135530 GlobalParams::setScreenBlackThreshold(double)
0x135570 GlobalParams::setScreenWhiteThreshold(double)
0x1355b0 GlobalParams::setMinLineWidth(double)
0x1355f0 GlobalParams::setOverprintPreview(bool)
0x135620 GlobalParams::setMapNumericCharNames(bool)
0x135650 GlobalParams::setMapUnknownCharNames(bool)
0x135680 GlobalParams::setPrintCommands(bool)
0x1356b0 GlobalParams::setProfileCommands(bool)
0x1356e0 GlobalParams::setErrQuiet(bool)
0x135710 GlobalParams::addSecurityHandler(XpdfSecurityHandler*)
0x135720 GlobalParams::getSecurityHandler(char*)
0x135730 Hints::~Hints()
0x135810 Hints::getPageOffset(int)
0x135860 Hints::readBit(Stream*)
0x1358c0 Hints::readBits(int, Stream*)
0x135940 Hints::readPageOffsetTable(Stream*)
0x135db0 Hints::readSharedObjectsTable(Stream*)
0x1361c0 Hints::readTables(BaseStream*, Linearization*, XRef*, SecurityHandler*)
0x136640 Hints::Hints(BaseStream*, Linearization*, XRef*, SecurityHandler*)
0x1368b0 Hints::getPageObjectNum(int)
0x136900 Hints::getPageRanges(int)
0x136b40 JArithmeticDecoderStats::~JArithmeticDecoderStats()
0x136b50 JArithmeticDecoderStats::reset()
0x136b60 JArithmeticDecoderStats::JArithmeticDecoderStats(int)
0x136b80 JArithmeticDecoderStats::copy()
0x136bc0 JArithmeticDecoderStats::copyFrom(JArithmeticDecoderStats*)
0x136be0 JArithmeticDecoderStats::setEntry(unsigned int, int, int)
0x136bf0 JArithmeticDecoder::JArithmeticDecoder()
0x136c10 JArithmeticDecoder::restart(int)
0x136d50 JArithmeticDecoder::cleanup()
0x136db0 JArithmeticDecoder::~JArithmeticDecoder()
0x136dc0 JArithmeticDecoder::byteIn()
0x136e90 JArithmeticDecoder::start()
0x136f30 JArithmeticDecoder::decodeBit(unsigned int, JArithmeticDecoderStats*)
0x1370c0 JArithmeticDecoder::decodeByte(unsigned int, JArithmeticDecoderStats*)
0x137110 JArithmeticDecoder::decodeIntBit(JArithmeticDecoderStats*)
0x137150 JArithmeticDecoder::decodeInt(int*, JArithmeticDecoderStats*)
0x137330 JArithmeticDecoder::decodeIAID(unsigned int, JArithmeticDecoderStats*)
0x1373a0 JBIG2Stream::getChar()
0x1373e0 JBIG2Stream::lookChar()
0x137410 JBIG2Stream::getPos()
0x137430 JBIG2Stream::getChars(int, unsigned char*)
0x1374a0 JBIG2Stream::getPSFilter(int, char const*)
0x1374b0 JBIG2Stream::isBinary(bool)
0x1374d0 JBIG2Bitmap::~JBIG2Bitmap()
0x1374f0 JBIG2CodeTable::~JBIG2CodeTable()
0x137510 JBIG2Bitmap::~JBIG2Bitmap()
0x137530 JBIG2CodeTable::~JBIG2CodeTable()
0x137550 JBIG2SymbolDict::~JBIG2SymbolDict()
0x137620 JBIG2SymbolDict::~JBIG2SymbolDict()
0x137640 JBIG2PatternDict::~JBIG2PatternDict()
0x1376e0 JBIG2PatternDict::~JBIG2PatternDict()
0x137700 JBIG2HuffmanDecoder::~JBIG2HuffmanDecoder()
0x137710 JBIG2HuffmanDecoder::reset()
0x137720 JBIG2HuffmanDecoder::JBIG2HuffmanDecoder()
0x137730 JBIG2HuffmanDecoder::readBits(unsigned int)
0x137820 JBIG2HuffmanDecoder::readBit()
0x137860 JBIG2HuffmanDecoder::decodeInt(int*, JBIG2HuffmanTable*)
0x137960 JBIG2HuffmanDecoder::buildTable(JBIG2HuffmanTable*, unsigned int)
0x137ad0 JBIG2MMRDecoder::~JBIG2MMRDecoder()
0x137ae0 JBIG2MMRDecoder::reset()
0x137b00 JBIG2MMRDecoder::JBIG2MMRDecoder()
0x137b10 JBIG2MMRDecoder::get2DCode()
0x137c40 JBIG2MMRDecoder::getWhiteCode()
0x137de0 JBIG2MMRDecoder::getBlackCode()
0x137fd0 JBIG2MMRDecoder::get24Bits()
0x138030 JBIG2MMRDecoder::skipTo(unsigned int)
0x138060 JBIG2Bitmap::JBIG2Bitmap(unsigned int, int, int)
0x138100 JBIG2Bitmap::JBIG2Bitmap(unsigned int, JBIG2Bitmap*)
0x138200 JBIG2Bitmap::expand(int, unsigned int)
0x1382e0 JBIG2Bitmap::clearToZero()
0x138300 JBIG2Bitmap::getSlice(unsigned int, unsigned int, unsigned int, unsigned int)
0x138440 JBIG2Bitmap::clearToOne()
0x138460 JBIG2Bitmap::duplicateRow(int, int)
0x138490 JBIG2Bitmap::combine(JBIG2Bitmap*, int, int, unsigned int)
0x138970 JBIG2SymbolDict::JBIG2SymbolDict(unsigned int, unsigned int)
0x1389f0 JBIG2PatternDict::JBIG2PatternDict(unsigned int, unsigned int)
0x138a60 JBIG2CodeTable::JBIG2CodeTable(unsigned int, JBIG2HuffmanTable*)
0x138a80 JBIG2Stream::JBIG2Stream(Stream*, Object*, Object*)
0x138da0 JBIG2Stream::readGenericBitmap(bool, int, int, int, bool, bool, JBIG2Bitmap*, int*, int*, int)
0x13bb60 JBIG2Stream::readGenericRefinementRegion(int, int, int, bool, JBIG2Bitmap*, int, int, int*, int*)
0x13ed00 JBIG2Stream::readTextRegion(bool, bool, int, int, unsigned int, unsigned int, int, JBIG2HuffmanTable*, unsigned int, JBIG2Bitmap**, unsigned int, unsigned int, unsigned int, unsigned int, int, JBIG2HuffmanTable*, JBIG2HuffmanTable*, JBIG2HuffmanTable*, JBIG2HuffmanTable*, JBIG2HuffmanTable*, JBIG2HuffmanTable*, JBIG2HuffmanTable*, JBIG2HuffmanTable*, unsigned int, int*, int*)
0x13f6b0 JBIG2Stream::readEndOfStripeSeg(unsigned int)
0x13f6f0 JBIG2Stream::readProfilesSeg(unsigned int)
0x13f730 JBIG2Stream::readExtensionSeg(unsigned int)
0x13f770 JBIG2Stream::findSegment(unsigned int)
0x13f800 JBIG2Stream::discardSegment(unsigned int)
0x13f8a0 JBIG2Stream::resetGenericStats(unsigned int, JArithmeticDecoderStats*)
0x13f990 JBIG2Stream::resetRefinementStats(unsigned int, JArithmeticDecoderStats*)
0x13fa80 JBIG2Stream::resetIntStats(int)
0x13fb90 JBIG2Stream::readUByte(unsigned int*)
0x13fbc0 JBIG2Stream::readByte(int*)
0x13fc00 JBIG2Stream::readUWord(unsigned int*)
0x13fc50 JBIG2Stream::readULong(unsigned int*)
0x13fce0 JBIG2Stream::readSymbolDictSeg(unsigned int, unsigned int, unsigned int*, unsigned int)
0x1411e0 JBIG2Stream::readTextRegionSeg(unsigned int, bool, bool, unsigned int, unsigned int*, unsigned int)
0x141f90 JBIG2Stream::readPatternDictSeg(unsigned int, unsigned int)
0x1421e0 JBIG2Stream::readGenericRegionSeg(unsigned int, bool, bool, unsigned int)
0x1425c0 JBIG2Stream::readGenericRefinementRegionSeg(unsigned int, bool, bool, unsigned int, unsigned int*, unsigned int)
0x142a50 JBIG2Stream::readPageInfoSeg(unsigned int)
0x142c00 JBIG2Stream::readLong(int*)
0x142c90 JBIG2Stream::readHalftoneRegionSeg(unsigned int, bool, bool, unsigned int, unsigned int*, unsigned int)
0x1435a0 JBIG2Stream::readCodeTableSeg(unsigned int, unsigned int)
0x1438b0 JBIG2Stream::readSegments()
0x144040 JBIG2Stream::reset()
0x1441a0 JBIG2Stream::close()
0x1442d0 JBIG2Stream::~JBIG2Stream()
0x144530 JBIG2Stream::~JBIG2Stream()
0x144550 JBIG2Stream::getKind()
0x144560 JBIG2Stream::getGlobalsStream()
0x144570 JBIG2Stream::getGlobalsStreamRef()
0x144580 JBIG2Stream::hasGetChars()
0x144590 JBIG2Bitmap::getType()
0x1445a0 JBIG2SymbolDict::getType()
0x1445b0 JBIG2PatternDict::getType()
0x1445c0 JBIG2CodeTable::getType()
0x1445d0 Object::streamGetPos() [clone .isra.9]
0x144610 Lexer::Lexer(XRef*, Stream*)
0x1446e0 Lexer::Lexer(XRef*, Object*)
0x1447e0 Lexer::~Lexer()
0x144850 Lexer::getChar(bool)
0x144910 Lexer::lookChar()
0x144940 Lexer::getObj(Object*, int)
0x1457d0 Lexer::getObj(Object*, char const*, int)
0x145970 Lexer::skipToNextLine()
0x1459b0 Lexer::isSpace(int)
0x1459d0 Linearization::Linearization(BaseStream*)
0x145c70 Linearization::~Linearization()
0x145c80 Linearization::getLength()
0x145ce0 Linearization::getHintsOffset()
0x145de0 Linearization::getHintsLength()
0x145ee0 Linearization::getHintsOffset2()
0x145fe0 Linearization::getHintsLength2()
0x1460e0 Linearization::getObjectNumberFirst()
0x146140 Linearization::getEndFirst()
0x1461a0 Linearization::getNumPages()
0x146200 Linearization::getMainXRefEntriesOffset()
0x146260 Linearization::getPageFirst()
0x1462e0 LinkGoTo::~LinkGoTo()
0x146330 LinkGoTo::~LinkGoTo()
0x146350 LinkGoToR::~LinkGoToR()
0x1463c0 LinkGoToR::~LinkGoToR()
0x1463e0 LinkLaunch::~LinkLaunch()
0x146440 LinkLaunch::~LinkLaunch()
0x146460 LinkURI::~LinkURI()
0x1464a0 LinkURI::~LinkURI()
0x1464c0 LinkNamed::~LinkNamed()
0x146500 LinkNamed::~LinkNamed()
0x146520 LinkMovie::~LinkMovie()
0x146560 LinkMovie::~LinkMovie()
0x146580 LinkJavaScript::~LinkJavaScript()
0x1465c0 LinkJavaScript::~LinkJavaScript()
0x1465e0 LinkUnknown::~LinkUnknown()
0x146620 LinkUnknown::~LinkUnknown()
0x146640 LinkSound::~LinkSound()
0x146680 LinkSound::~LinkSound()
0x1466a0 LinkRendition::~LinkRendition()
0x146710 LinkRendition::~LinkRendition()
0x146730 LinkDest::LinkDest(Array*)
0x147020 LinkDest::LinkDest(LinkDest*)
0x1470a0 LinkGoTo::LinkGoTo(Object*)
0x147190 LinkAction::parseDest(Object*)
0x1471e0 LinkGoToR::LinkGoToR(Object*, Object*)
0x147360 LinkLaunch::LinkLaunch(Object*)
0x1475c0 LinkURI::LinkURI(Object*, GooString*)
0x147750 LinkNamed::LinkNamed(Object*)
0x1477a0 LinkMovie::LinkMovie(Object*)
0x147a00 LinkSound::LinkSound(Object*)
0x147ca0 LinkRendition::LinkRendition(Object*)
0x148020 LinkJavaScript::LinkJavaScript(Object*)
0x1480b0 LinkOCGState::StateList::~StateList()
0x148110 LinkOCGState::LinkOCGState(Object*)
0x1484a0 LinkOCGState::~LinkOCGState()
0x148530 LinkOCGState::~LinkOCGState()
0x148550 LinkUnknown::LinkUnknown(char*)
0x148590 LinkAction::parseAction(Object*, GooString*)
0x148a10 Links::Links(Annots*)
0x148ad0 Links::~Links()
0x148b10 Links::find(double, double) const
0x148ba0 Links::onLink(double, double) const
0x148c10 LinkGoTo::isOk()
0x148c30 LinkGoTo::getKind()
0x148c40 LinkGoToR::isOk()
0x148c70 LinkGoToR::getKind()
0x148c80 LinkLaunch::isOk()
0x148c90 LinkLaunch::getKind()
0x148ca0 LinkURI::isOk()
0x148cb0 LinkURI::getKind()
0x148cc0 LinkNamed::isOk()
0x148cd0 LinkNamed::getKind()
0x148ce0 LinkMovie::isOk()
0x148d00 LinkMovie::getKind()
0x148d10 LinkRendition::isOk()
0x148d20 LinkRendition::getKind()
0x148d30 LinkSound::isOk()
0x148d40 LinkSound::getKind()
0x148d50 LinkJavaScript::isOk()
0x148d60 LinkJavaScript::getKind()
0x148d70 LinkOCGState::isOk()
0x148d80 LinkOCGState::getKind()
0x148d90 LinkUnknown::isOk()
0x148da0 LinkUnknown::getKind()
0x148db0 LocalPDFDocBuilder::buildPDFDoc(GooString const&, GooString*, GooString*, void*)
0x148e50 LocalPDFDocBuilder::supports(GooString const&)
0x148e90 LocalPDFDocBuilder::~LocalPDFDocBuilder()
0x148ea0 LocalPDFDocBuilder::~LocalPDFDocBuilder()
0x148eb0 MovieActivationParameters::MovieActivationParameters()
0x148f20 MovieActivationParameters::~MovieActivationParameters()
0x148f30 MovieActivationParameters::parseMovieActivation(Object*)
0x1496d0 Movie::parseMovie(Object*)
0x149ad0 Movie::~Movie()
0x149b10 Movie::Movie(Object*)
0x149b70 Movie::Movie(Object*, Object*)
0x149be0 Movie::getFloatingWindowSize(int*, int*)
0x149c40 Movie::copy()
0x149d20 NameToCharCode::NameToCharCode()
0x149d80 NameToCharCode::~NameToCharCode()
0x149dd0 NameToCharCode::hash(char const*)
0x149e00 NameToCharCode::add(char const*, unsigned int)
0x149f70 NameToCharCode::lookup(char const*)
0x149ff0 Object::initArray(XRef*)
0x14a030 Object::initDict(XRef*)
0x14a070 Object::initDict(Dict*)
0x14a090 Object::initStream(Stream*)
0x14a0a0 Object::copy(Object*)
0x14a160 Object::fetch(XRef*, Object*, int)
0x14a190 Object::free()
0x14a290 Object::getTypeName()
0x14a2a0 Object::print(_IO_FILE*)
0x14a630 Object::memCheck(_IO_FILE*)
0x14a640 Object::getArray() [clone .isra.12]
0x14a680 OCGs::hasOCGs()
0x14a690 OptionalContentGroup::OptionalContentGroup(Dict*)
0x14a900 OptionalContentGroup::OptionalContentGroup(GooString*)
0x14a910 OptionalContentGroup::getName() const
0x14a920 OptionalContentGroup::setRef(Ref)
0x14a930 OptionalContentGroup::getRef() const
0x14a940 OCGs::findOcgByRef(Ref const&)
0x14a9c0 OCGs::OCGs(Object*, XRef*)
0x14af50 OCGs::evalOCVisibilityExpr(Object*, int)
0x14b2a0 OCGs::allOn(Array*)
0x14b350 OCGs::allOff(Array*)
0x14b400 OCGs::anyOn(Array*)
0x14b4a0 OCGs::anyOff(Array*)
0x14b540 OCGs::optContentIsVisible(Object*)
0x14b920 OptionalContentGroup::~OptionalContentGroup()
0x14b950 OCDisplayNode::OCDisplayNode()
0x14b970 OCDisplayNode::OCDisplayNode(GooString*)
0x14b9b0 OCDisplayNode::OCDisplayNode(OptionalContentGroup*)
0x14ba10 OCDisplayNode::addChild(OCDisplayNode*)
0x14ba60 OCDisplayNode::addChildren(GooList*)
0x14bac0 OCDisplayNode::takeChildren()
0x14bad0 OCDisplayNode::~OCDisplayNode()
0x14bb60 OCGs::~OCGs()
0x14bbf0 OCDisplayNode::getNumChildren()
0x14bc10 OCDisplayNode::getChild(int)
0x14bc20 OCDisplayNode::parse(Object*, OCGs*, XRef*, int)
0x14bf20 OCGs::getDisplayRoot()
0x14bf60 OutlineItem::OutlineItem(Dict*, XRef*)
0x14c1e0 OutlineItem::readItemList(Object*, Object*, XRef*)
0x14c3f0 Outline::Outline(Object*, XRef*)
0x14c4d0 OutlineItem::open()
0x14c500 OutlineItem::close()
0x14c580 OutlineItem::~OutlineItem()
0x14c5d0 Outline::~Outline()
0x14c650 OutputDev::setDefaultCTM(double*)
0x14c720 OutputDev::cvtDevToUser(double, double, double*, double*)
0x14c760 OutputDev::cvtUserToDev(double, double, int*, int*)
0x14c7b0 OutputDev::beginType3Char(GfxState*, double, double, double, double, unsigned int, unsigned int*, int)
0x14c7c0 OutputDev::unsetSoftMaskFromImageMask(GfxState*, double*)
0x14c7d0 OutputDev::endMarkedContent(GfxState*)
0x14c7e0 OutputDev::beginMarkedContent(char*, Dict*)
0x14c7f0 OutputDev::markPoint(char*)
0x14c800 OutputDev::markPoint(char*, Dict*)
0x14c810 OutputDev::opiBegin(GfxState*, Dict*)
0x14c820 OutputDev::opiEnd(GfxState*, Dict*)
0x14c830 OutputDev::endProfile()
0x14c840 OutputDev::startProfile()
0x14c890 OutputDev::drawImageMask(GfxState*, Object*, Stream*, int, int, bool, bool, bool) [clone .part.0]
0x14c8f0 OutputDev::drawImageMask(GfxState*, Object*, Stream*, int, int, bool, bool, bool)
0x14c910 OutputDev::drawImage(GfxState*, Object*, Stream*, int, int, GfxImageColorMap*, bool, int*, bool) [clone .part.3]
0x14c990 OutputDev::drawImage(GfxState*, Object*, Stream*, int, int, GfxImageColorMap*, bool, int*, bool)
0x14c9c0 OutputDev::drawSoftMaskedImage(GfxState*, Object*, Stream*, int, int, GfxImageColorMap*, bool, Stream*, int, int, GfxImageColorMap*, bool)
0x14ca00 OutputDev::drawMaskedImage(GfxState*, Object*, Stream*, int, int, GfxImageColorMap*, bool, Stream*, int, int, bool, bool)
0x14ca40 OutputDev::setSoftMaskFromImageMask(GfxState*, Object*, Stream*, int, int, bool, bool, double*)
0x14caa0 OutputDev::updateAll(GfxState*)
0x14cd30 OutputDev::getIccColorSpaceCache()
0x14cd40 OutputDev::checkTransparencyGroup(GfxState*, bool)
0x14cd50 PDFRectangle::clipTo(PDFRectangle*)
0x14ce10 PageAttrs::~PageAttrs()
0x14ce70 PageAttrs::clipBoxes()
0x14ceb0 PageAttrs::readBox(Dict*, char const*, PDFRectangle*)
0x14d310 PageAttrs::PageAttrs(PageAttrs*, Dict*)
0x14d8c0 Page::Page(PDFDoc*, int, Dict*, Ref, PageAttrs*, Form*)
0x14dcf0 Page::~Page()
0x14dd80 Page::getResourceDict()
0x14dda0 Page::getResourceDictCopy(XRef*)
0x14de10 Page::replaceXRef(XRef*)
0x14dff0 Page::getAnnots(XRef*)
0x14e080 Page::addAnnot(Annot*)
0x14e260 Page::removeAnnot(Annot*)
0x14e470 Page::getLinks()
0x14e4b0 Page::getFormWidgets()
0x14e510 Page::display(Gfx*)
0x14e580 Page::loadThumb(unsigned char**, int*, int*, int*)
0x14eab0 Page::makeBox(double, double, int, bool, bool, double, double, double, double, PDFRectangle*, bool*)
0x14ed60 Page::createGfx(OutputDev*, double, double, int, bool, bool, int, int, int, int, bool, bool (*)(void*), void*, XRef*)
0x14efe0 Page::displaySlice(OutputDev*, double, double, int, bool, bool, int, int, int, int, bool, bool (*)(void*), void*, bool (*)(Annot*, void*), void*, bool)
0x14f340 Page::display(OutputDev*, double, double, int, bool, bool, bool, bool (*)(void*), void*, bool (*)(Annot*, void*), void*, bool)
0x14f380 Page::processLinks(OutputDev*)
0x14f3e0 Page::getDefaultCTM(double*, double, double, int, bool, bool)
0x14f4a0 Page::getAdditionalAction(Page::PageAdditionalActionsType)
0x14f5b0 PageTransition::PageTransition(Object*)
0x14faf0 PageTransition::~PageTransition()
0x14fb00 Parser::Parser(XRef*, Lexer*, bool)
0x14fb60 Parser::~Parser()
0x14fba0 Parser::shift(int)
0x14fc50 Parser::shift(char const*, int)
0x14fd30 Parser::makeStream(Object*, unsigned char*, CryptAlgorithm, int, int, int, int, bool)
0x150110 Parser::getObj(Object*, bool, unsigned char*, CryptAlgorithm, int, int, int, int, bool)
0x150780 Parser::getObj(Object*, int)
0x1507a0 get_id(GooString*, GooString*)
0x150850 Object::getRef() [clone .isra.22]
0x150890 PDFDoc::init()
0x150930 PDFDoc::PDFDoc()
0x150940 PDFDoc::checkFooter()
0x150a70 PDFDoc::checkHeader()
0x150b80 PDFDoc::checkEncryption(GooString*, GooString*)
0x150cf0 PDFDoc::getLinearization()
0x150d30 PDFDoc::isLinearized(bool)
0x150dd0 PDFDoc::getID(GooString*, GooString*)
0x150f80 PDFDoc::getHints()
0x151000 PDFDoc::saveWithoutChangesAs(OutStream*)
0x151060 PDFDoc::saveWithoutChangesAs(GooString*)
0x1510f0 PDFDoc::writeStream(Stream*, OutStream*)
0x151160 PDFDoc::writeRawStream(Stream*, OutStream*)
0x1512d0 PDFDoc::writeString(GooString*, OutStream*, unsigned char*, CryptAlgorithm, int, int, int)
0x151550 PDFDoc::writeObjectHeader(Ref*, OutStream*)
0x151590 PDFDoc::writeObject(Object*, OutStream*, XRef*, unsigned int, unsigned char*, CryptAlgorithm, int, int, int)
0x152030 PDFDoc::writeDictionnary(Dict*, OutStream*, XRef*, unsigned int, unsigned char*, CryptAlgorithm, int, int, int)
0x152170 PDFDoc::writeObjectFooter(OutStream*)
0x152190 PDFDoc::createTrailerDict(int, bool, long long, Ref*, XRef*, char const*, long long)
0x1526b0 PDFDoc::writeXRefTableTrailer(Dict*, XRef*, bool, long long, OutStream*, XRef*)
0x152760 PDFDoc::writeXRefStreamTrailer(Dict*, XRef*, Ref*, long long, OutStream*, XRef*)
0x1528a0 PDFDoc::writeHeader(OutStream*, int, int)
0x1528d0 PDFDoc::replacePageDict(int, int, PDFRectangle*, PDFRectangle*)
0x152cd0 PDFDoc::markAnnotations(Object*, XRef*, XRef*, unsigned int, int, int)
0x153360 PDFDoc::markDictionnary(Dict*, XRef*, XRef*, unsigned int, int, int)
0x1534a0 PDFDoc::markObject(Object*, XRef*, XRef*, unsigned int, int, int)
0x1537e0 PDFDoc::markPageObjects(Dict*, XRef*, XRef*, unsigned int, int, int)
0x153960 PDFDoc::markAcroForm(Object*, XRef*, XRef*, unsigned int, int, int)
0x153cb0 PDFDoc::writePageObjects(OutStream*, XRef*, unsigned int, bool)
0x153e80 PDFDoc::getOutline()
0x153ef0 PDFDoc::ErrorPDFDoc(int, GooString*)
0x153f20 PDFDoc::strToLongLong(char*)
0x153fb0 PDFDoc::getStartXRef(bool)
0x154280 PDFDoc::saveIncrementalUpdate(OutStream*)
0x154620 PDFDoc::writeXRefTableTrailer(long long, XRef*, bool, int, OutStream*, bool)
0x154730 PDFDoc::saveCompleteRewrite(OutStream*)
0x154a60 PDFDoc::saveAs(OutStream*, PDFWriteMode)
0x154b00 PDFDoc::saveAs(GooString*, PDFWriteMode)
0x154bb0 PDFDoc::getMainXRefEntriesOffset(bool)
0x154be0 PDFDoc::setup(GooString*, GooString*)
0x154e70 PDFDoc::PDFDoc(GooString*, GooString*, GooString*, void*)
0x154f70 PDFDoc::PDFDoc(BaseStream*, GooString*, GooString*, void*)
0x155030 PDFDoc::getNumPages()
0x155070 PDFDoc::~PDFDoc()
0x1551c0 PDFDoc::savePageAs(GooString*, int)
0x155d50 PDFDoc::parsePage(int)
0x155f10 PDFDoc::getPage(int)
0x156040 PDFDoc::displayPage(OutputDev*, int, double, double, int, bool, bool, bool, bool (*)(void*), void*, bool (*)(Annot*, void*), void*, bool)
0x156180 PDFDoc::displayPages(OutputDev*, int, int, double, double, int, bool, bool, bool, bool (*)(void*), void*, bool (*)(Annot*, void*), void*)
0x156250 PDFDoc::displayPageSlice(OutputDev*, int, double, double, int, bool, bool, bool, int, int, int, int, bool (*)(void*), void*, bool (*)(Annot*, void*), void*, bool)
0x1563b0 PDFDoc::getLinks(int)
0x1563f0 PDFDoc::processLinks(OutputDev*, int)
0x156430 BaseStream::getFileName()
0x156440 BaseStream::getLength()
0x156450 PDFDocFactory::PDFDocFactory(GooList*)
0x1564e0 PDFDocFactory::~PDFDocFactory()
0x156540 PDFDocFactory::createPDFDoc(GooString const&, GooString*, GooString*, void*)
0x156630 PDFDocFactory::registerPDFDocBuilder(PDFDocBuilder*)
0x156640 PopplerCacheItem::~PopplerCacheItem()
0x156650 PopplerCacheItem::~PopplerCacheItem()
0x156670 PopplerCacheKey::~PopplerCacheKey()
0x156680 PopplerCacheKey::~PopplerCacheKey()
0x1566a0 PopplerCache::PopplerCache(int)
0x156700 PopplerCache::~PopplerCache()
0x156780 PopplerCache::lookup(PopplerCacheKey const&)
0x1568d0 PopplerCache::put(PopplerCacheKey*, PopplerCacheItem*)
0x156990 PopplerCache::size()
0x1569a0 PopplerCache::numberOfItems()
0x1569b0 PopplerCache::item(int)
0x1569c0 PopplerCache::key(int)
0x1569d0 PopplerObjectCache::PopplerObjectCache(int, XRef*)
0x156a10 PopplerObjectCache::~PopplerObjectCache()
0x156a40 PopplerObjectCache::put(Ref const&)
0x156b00 PopplerObjectCache::lookup(Ref const&, Object*)
0x156b80 ObjectKey::operator==(PopplerCacheKey const&) const
0x156b90 ObjectItem::~ObjectItem()
0x156bc0 ObjectItem::~ObjectItem()
0x156bf0 ObjectKey::~ObjectKey()
0x156c10 ObjectKey::~ObjectKey()
0x156c30 ProfileData::ProfileData()
0x156c50 ProfileData::addElement(double)
0x156cb0 PreScanOutputDev::startPage(int, GfxState*, XRef*)
0x156cc0 PreScanOutputDev::endPage()
0x156cd0 PreScanOutputDev::functionShadedFill(GfxState*, GfxFunctionShading*)
0x156d60 PreScanOutputDev::axialShadedFill(GfxState*, GfxAxialShading*, double, double)
0x156df0 PreScanOutputDev::radialShadedFill(GfxState*, GfxRadialShading*, double, double)
0x156e80 PreScanOutputDev::clip(GfxState*)
0x156e90 PreScanOutputDev::eoClip(GfxState*)
0x156ea0 PreScanOutputDev::endStringOp(GfxState*)
0x156eb0 PreScanOutputDev::beginType3Char(GfxState*, double, double, double, double, unsigned int, unsigned int*, int)
0x156ec0 PreScanOutputDev::endType3Char(GfxState*)
0x156ed0 PreScanOutputDev::drawImage(GfxState*, Object*, Stream*, int, int, GfxImageColorMap*, bool, int*, bool)
0x157060 PreScanOutputDev::drawMaskedImage(GfxState*, Object*, Stream*, int, int, GfxImageColorMap*, bool, Stream*, int, int, bool, bool)
0x157120 PreScanOutputDev::drawSoftMaskedImage(GfxState*, Object*, Stream*, int, int, GfxImageColorMap*, bool, Stream*, int, int, GfxImageColorMap*, bool)
0x1571a0 PreScanOutputDev::beginTransparencyGroup(GfxState*, double*, GfxColorSpace*, bool, bool, bool)
0x1571b0 PreScanOutputDev::setSoftMask(GfxState*, double*, bool, Function*, GfxColor*)
0x1571c0 PreScanOutputDev::~PreScanOutputDev()
0x1571e0 PreScanOutputDev::~PreScanOutputDev()
0x157200 PreScanOutputDev::check(GfxColorSpace*, GfxColor*, double, GfxBlendMode)
0x1572f0 PreScanOutputDev::stroke(GfxState*)
0x157340 PreScanOutputDev::fill(GfxState*)
0x157360 PreScanOutputDev::eoFill(GfxState*)
0x157380 PreScanOutputDev::tilingPatternFill(GfxState*, Gfx*, Catalog*, Object*, double*, int, int, Dict*, double*, double*, int, int, int, int, double, double)
0x157450 PreScanOutputDev::beginStringOp(GfxState*)
0x1575a0 PreScanOutputDev::drawImageMask(GfxState*, Object*, Stream*, int, int, bool, bool, bool)
0x1576a0 PreScanOutputDev::paintTransparencyGroup(GfxState*, double*)
0x1576c0 PreScanOutputDev::clearStats()
0x1576f0 PreScanOutputDev::PreScanOutputDev(PDFDoc*)
0x157760 PreScanOutputDev::upsideDown()
0x157770 PreScanOutputDev::useDrawChar()
0x157780 PreScanOutputDev::useTilingPatternFill()
0x157790 PreScanOutputDev::useShadedFills(int)
0x1577a0 PreScanOutputDev::interpretType3Chars()
0x1577b0 PSTokenizer::PSTokenizer(int (*)(void*), void*)
0x1577c0 PSTokenizer::~PSTokenizer()
0x1577d0 PSTokenizer::lookChar()
0x1577f0 PSTokenizer::consumeChar()
0x157800 PSTokenizer::getChar()
0x157820 PSTokenizer::getToken(char*, int, int*)
0x157a20 MediaWindowParameters::MediaWindowParameters()
0x157a60 MediaWindowParameters::~MediaWindowParameters()
0x157a70 MediaWindowParameters::parseFWParams(Object*)
0x157ed0 MediaParameters::MediaParameters()
0x157f10 MediaParameters::~MediaParameters()
0x157f20 MediaParameters::parseMediaPlayParameters(Object*)
0x158400 MediaParameters::parseMediaScreenParameters(Object*)
0x1587e0 MediaRendition::~MediaRendition()
0x158860 MediaRendition::MediaRendition(Object*)
0x158e40 MediaRendition::outputToFile(_IO_FILE*)
0x158eb0 MediaRendition::copy()
0x158f50 StdinCacheLoader::load(std::vector<_ByteRange, std::allocator<_ByteRange> > const&, CachedFileWriter*)
0x158f60 StdinCacheLoader::init(GooString*, CachedFile*)
0x158fe0 StdinCacheLoader::~StdinCacheLoader()
0x158ff0 StdinCacheLoader::~StdinCacheLoader()
0x159000 StdinPDFDocBuilder::buildPDFDoc(GooString const&, GooString*, GooString*, void*)
0x1590b0 StdinPDFDocBuilder::supports(GooString const&)
0x1590e0 StdinPDFDocBuilder::~StdinPDFDocBuilder()
0x1590f0 StdinPDFDocBuilder::~StdinPDFDocBuilder()
0x159100 Stream::close()
0x159110 Stream::getLine(char*, int)
0x1591c0 FileOutStream::close()
0x1591d0 FilterStream::close()
0x1591e0 FileStream::reset()
0x159220 FileStream::close()
0x159240 FileStream::moveStart(long long)
0x159270 CachedFileStream::moveStart(long long)
0x1592a0 MemStream::reset()
0x1592b0 MemStream::close()
0x1592c0 MemStream::setPos(long long, int)
0x159310 MemStream::moveStart(long long)
0x159330 EmbedStream::getChar()
0x159360 EmbedStream::lookChar()
0x159390 ASCIIHexStream::reset()
0x1593b0 ASCIIHexStream::isBinary(bool)
0x1593c0 ASCII85Stream::reset()
0x1593f0 ASCII85Stream::isBinary(bool)
0x159400 LZWStream::isBinary(bool)
0x159420 RunLengthStream::reset()
0x159450 RunLengthStream::isBinary(bool)
0x159470 CCITTFaxStream::isBinary(bool)
0x159490 FlateStream::isBinary(bool)
0x1594b0 BufStream::reset()
0x159510 BufStream::getChar()
0x159560 BufStream::lookChar()
0x159570 BufStream::isBinary(bool)
0x159590 FixedLengthEncoder::reset()
0x1595b0 FixedLengthEncoder::getChar()
0x1595e0 FixedLengthEncoder::lookChar()
0x159610 FixedLengthEncoder::isBinary(bool)
0x159630 ASCIIHexEncoder::reset()
0x159660 ASCII85Encoder::reset()
0x159690 RunLengthEncoder::reset()
0x1596c0 CMYKGrayEncoder::reset()
0x1596e0 RGBGrayEncoder::reset()
0x159700 Stream::getRawChar()
0x159730 Stream::getChars(int, unsigned char*)
0x159760 Stream::getRawChars(int, int*)
0x159780 FilterStream::setPos(long long, int)
0x1597a0 EmbedStream::copy()
0x1597d0 EmbedStream::makeSubStream(long long, bool, long long, Object*)
0x159800 EmbedStream::setPos(long long, int)
0x159820 EmbedStream::getStart()
0x159850 EmbedStream::moveStart(long long)
0x159870 Stream::getPSFilter(int, char const*)
0x159890 FileOutStream::getPos()
0x1598a0 FileOutStream::put(char)
0x1598b0 FileOutStream::printf(char const*, ...)
0x159950 MemStream::getChars(int, unsigned char*)
0x1599b0 FileStream::setPos(long long, int)
0x159a10 CachedFileStream::reset()
0x159a60 CachedFileStream::setPos(long long, int)
0x159af0 ASCIIHexStream::getPSFilter(int, char const*)
0x159b50 ASCII85Stream::getPSFilter(int, char const*)
0x159bb0 RunLengthStream::getPSFilter(int, char const*)
0x159c10 ASCII85Stream::lookChar()
0x159db0 CCITTFaxStream::getPSFilter(int, char const*)
0x159f70 CachedFileStream::close()
0x159fa0 LZWStream::getPSFilter(int, char const*)
0x15a040 FlateStream::getPSFilter(int, char const*)
0x15a0b0 Object::getBool() [clone .isra.12]
0x15a0f0 Object::dictLookup(char const*, Object*, int) [clone .isra.20]
0x15a140 EmbedStream::getChars(int, unsigned char*)
0x15a220 ASCIIHexStream::lookChar()
0x15a410 Stream::Stream()
0x15a460 Stream::~Stream()
0x15a480 Stream::~Stream()
0x15a4a0 Stream::incRef()
0x15a4d0 Stream::decRef()
0x15a500 OutStream::OutStream()
0x15a520 OutStream::~OutStream()
0x15a530 FileOutStream::~FileOutStream()
0x15a550 FileOutStream::~FileOutStream()
0x15a570 OutStream::~OutStream()
0x15a590 FileOutStream::FileOutStream(_IO_FILE*, long long)
0x15a5c0 BaseStream::BaseStream(Object*, long long)
0x15a610 BaseStream::~BaseStream()
0x15a640 FileStream::~FileStream()
0x15a660 FileStream::~FileStream()
0x15a680 CachedFileStream::~CachedFileStream()
0x15a6b0 CachedFileStream::~CachedFileStream()
0x15a6d0 MemStream::~MemStream()
0x15a700 MemStream::~MemStream()
0x15a720 EmbedStream::~EmbedStream()
0x15a740 EmbedStream::~EmbedStream()
0x15a760 BaseStream::~BaseStream()
0x15a780 FilterStream::FilterStream(Stream*)
0x15a7b0 FilterStream::~FilterStream()
0x15a7d0 ASCIIHexStream::~ASCIIHexStream()
0x15a800 ASCIIHexStream::~ASCIIHexStream()
0x15a820 ASCII85Stream::~ASCII85Stream()
0x15a850 ASCII85Stream::~ASCII85Stream()
0x15a870 RunLengthStream::~RunLengthStream()
0x15a8a0 RunLengthStream::~RunLengthStream()
0x15a8c0 CCITTFaxStream::~CCITTFaxStream()
0x15a900 CCITTFaxStream::~CCITTFaxStream()
0x15a920 EOFStream::~EOFStream()
0x15a950 EOFStream::~EOFStream()
0x15a970 BufStream::~BufStream()
0x15a9b0 BufStream::~BufStream()
0x15a9d0 FixedLengthEncoder::~FixedLengthEncoder()
0x15aa10 FixedLengthEncoder::~FixedLengthEncoder()
0x15aa30 ASCIIHexEncoder::~ASCIIHexEncoder()
0x15aa70 ASCIIHexEncoder::~ASCIIHexEncoder()
0x15aa90 ASCII85Encoder::~ASCII85Encoder()
0x15aad0 ASCII85Encoder::~ASCII85Encoder()
0x15aaf0 RunLengthEncoder::~RunLengthEncoder()
0x15ab30 RunLengthEncoder::~RunLengthEncoder()
0x15ab50 CMYKGrayEncoder::~CMYKGrayEncoder()
0x15ab90 CMYKGrayEncoder::~CMYKGrayEncoder()
0x15abb0 RGBGrayEncoder::~RGBGrayEncoder()
0x15abf0 RGBGrayEncoder::~RGBGrayEncoder()
0x15ac10 FilterStream::~FilterStream()
0x15ac30 ImageStream::ImageStream(Stream*, int, int, int)
0x15acf0 ImageStream::~ImageStream()
0x15ad30 ImageStream::reset()
0x15ad40 ImageStream::close()
0x15ad50 ImageStream::getLine()
0x15afa0 ImageStream::getPixel(unsigned char*)
0x15b020 ImageStream::skipLine()
0x15b0a0 StreamPredictor::StreamPredictor(Stream*, int, int, int, int)
0x15b160 StreamPredictor::~StreamPredictor()
0x15b170 LZWStream::~LZWStream()
0x15b1c0 LZWStream::~LZWStream()
0x15b1e0 FlateStream::~FlateStream()
0x15b260 FlateStream::~FlateStream()
0x15b280 StreamPredictor::getNextLine()
0x15b6b0 StreamPredictor::lookChar()
0x15b6f0 StreamPredictor::getChar()
0x15b730 StreamPredictor::getChars(int, unsigned char*)
0x15b7c0 FileStream::FileStream(GooFile*, long long, bool, long long, Object*)
0x15b840 FileStream::copy()
0x15b880 FileStream::makeSubStream(long long, bool, long long, Object*)
0x15b8e0 FileStream::fillBuf()
0x15b990 CachedFileStream::CachedFileStream(CachedFile*, long long, bool, long long, Object*)
0x15ba10 CachedFileStream::copy()
0x15ba60 CachedFileStream::makeSubStream(long long, bool, long long, Object*)
0x15bac0 CachedFileStream::fillBuf()
0x15bb60 MemStream::MemStream(char*, long long, long long, Object*)
0x15bbc0 MemStream::copy()
0x15bc00 MemStream::makeSubStream(long long, bool, long long, Object*)
0x15bc80 EmbedStream::EmbedStream(Stream*, Object*, bool, long long)
0x15bcd0 ASCIIHexStream::ASCIIHexStream(Stream*)
0x15bd00 ASCII85Stream::ASCII85Stream(Stream*)
0x15bd30 LZWStream::clearTable()
0x15bd60 LZWStream::LZWStream(Stream*, int, int, int, int, int)
0x15be20 LZWStream::reset()
0x15be50 LZWStream::getCode()
0x15bec0 LZWStream::processNextCode()
0x15c130 LZWStream::getChar()
0x15c1a0 LZWStream::lookChar()
0x15c210 LZWStream::getRawChar()
0x15c270 LZWStream::getChars(int, unsigned char*)
0x15c340 LZWStream::getRawChars(int, int*)
0x15c3d0 RunLengthStream::RunLengthStream(Stream*)
0x15c410 RunLengthStream::fillBuf()
0x15c500 RunLengthStream::getChars(int, unsigned char*)
0x15c5b0 CCITTFaxStream::CCITTFaxStream(Stream*, int, bool, bool, int, int, bool, bool)
0x15c6e0 CCITTFaxStream::ccittReset(bool)
0x15c730 CCITTFaxStream::unfilteredReset()
0x15c740 CCITTFaxStream::lookBits(int)
0x15c7d0 CCITTFaxStream::reset()
0x15c890 CCITTFaxStream::getTwoDimCode()
0x15ca00 CCITTFaxStream::getWhiteCode()
0x15cc10 CCITTFaxStream::getBlackCode()
0x15ced0 CCITTFaxStream::lookChar()
0x15e3f0 FlateStream::FlateStream(Stream*, int, int, int, int)
0x15e4b0 FlateStream::flateReset(bool)
0x15e510 FlateStream::unfilteredReset()
0x15e520 FlateStream::reset()
0x15e660 FlateStream::loadFixedCodes()
0x15e6a0 FlateStream::compHuffmanCodes(int*, int, FlateHuffmanTab*)
0x15e810 FlateStream::getHuffmanCodeWord(FlateHuffmanTab*)
0x15e8d0 FlateStream::getCodeWord(int)
0x15e960 FlateStream::readDynamicCodes()
0x15ec80 FlateStream::startBlock()
0x15ee80 FlateStream::readSome()
0x15f0d0 FlateStream::getChar()
0x15f140 FlateStream::lookChar()
0x15f1a0 FlateStream::getRawChar()
0x15f210 FlateStream::getRawChars(int, int*)
0x15f2a0 FlateStream::getChars(int, unsigned char*)
0x15f380 EOFStream::EOFStream(Stream*)
0x15f3a0 Stream::makeFilter(char*, Stream*, Object*, int, Object*)
0x15fe50 Stream::addFilters(Object*, int)
0x160150 BufStream::BufStream(Stream*, int)
0x160190 BufStream::lookChar(int)
0x1601a0 FixedLengthEncoder::FixedLengthEncoder(Stream*, int)
0x1601d0 ASCIIHexEncoder::ASCIIHexEncoder(Stream*)
0x160200 ASCIIHexEncoder::fillBuf()
0x1602b0 ASCII85Encoder::ASCII85Encoder(Stream*)
0x1602e0 ASCII85Encoder::fillBuf()
0x160530 RunLengthEncoder::RunLengthEncoder(Stream*)
0x160570 RunLengthEncoder::fillBuf()
0x160800 CMYKGrayEncoder::CMYKGrayEncoder(Stream*)
0x160830 CMYKGrayEncoder::fillBuf()
0x1608f0 RGBGrayEncoder::RGBGrayEncoder(Stream*)
0x160920 RGBGrayEncoder::fillBuf()
0x1609e0 Stream::getNextStream()
0x1609f0 BaseStream::isBinary(bool)
0x160a00 BaseStream::getBaseStream()
0x160a10 BaseStream::getUndecodedStream()
0x160a20 FileStream::getKind()
0x160a30 FileStream::getPos()
0x160a50 FileStream::getStart()
0x160a60 FileStream::hasGetChars()
0x160a70 CachedFileStream::getKind()
0x160a80 CachedFileStream::getPos()
0x160aa0 CachedFileStream::getStart()
0x160ab0 CachedFileStream::unfilteredReset()
0x160ac0 MemStream::getKind()
0x160ad0 MemStream::getChar()
0x160b00 MemStream::lookChar()
0x160b20 MemStream::getPos()
0x160b30 MemStream::getStart()
0x160b40 MemStream::hasGetChars()
0x160b50 EmbedStream::getKind()
0x160b60 EmbedStream::reset()
0x160b70 EmbedStream::getPos()
0x160b80 EmbedStream::getUnfilteredChar()
0x160b90 EmbedStream::unfilteredReset()
0x160ba0 EmbedStream::hasGetChars()
0x160bb0 ASCIIHexStream::getKind()
0x160bc0 ASCIIHexStream::getChar()
0x160be0 ASCII85Stream::getKind()
0x160bf0 ASCII85Stream::getChar()
0x160c00 LZWStream::getKind()
0x160c10 LZWStream::hasGetChars()
0x160c20 RunLengthStream::getKind()
0x160c30 RunLengthStream::hasGetChars()
0x160c40 CCITTFaxStream::getKind()
0x160c50 CCITTFaxStream::getChar()
0x160c70 FlateStream::getKind()
0x160c80 FlateStream::hasGetChars()
0x160c90 EOFStream::getKind()
0x160ca0 EOFStream::reset()
0x160cb0 EOFStream::getChar()
0x160cc0 EOFStream::lookChar()
0x160cd0 EOFStream::getPSFilter(int, char const*)
0x160ce0 EOFStream::isBinary(bool)
0x160cf0 BufStream::getKind()
0x160d00 BufStream::getPSFilter(int, char const*)
0x160d10 FixedLengthEncoder::getKind()
0x160d20 FixedLengthEncoder::getPSFilter(int, char const*)
0x160d30 FixedLengthEncoder::isEncoder()
0x160d40 ASCIIHexEncoder::getKind()
0x160d50 ASCIIHexEncoder::getPSFilter(int, char const*)
0x160d60 ASCIIHexEncoder::isBinary(bool)
0x160d70 ASCIIHexEncoder::isEncoder()
0x160d80 ASCII85Encoder::getKind()
0x160d90 ASCII85Encoder::getPSFilter(int, char const*)
0x160da0 ASCII85Encoder::isBinary(bool)
0x160db0 ASCII85Encoder::isEncoder()
0x160dc0 RunLengthEncoder::getKind()
0x160dd0 RunLengthEncoder::getPSFilter(int, char const*)
0x160de0 RunLengthEncoder::isBinary(bool)
0x160df0 RunLengthEncoder::isEncoder()
0x160e00 CMYKGrayEncoder::getKind()
0x160e10 CMYKGrayEncoder::getPSFilter(int, char const*)
0x160e20 CMYKGrayEncoder::isBinary(bool)
0x160e30 CMYKGrayEncoder::isEncoder()
0x160e40 RGBGrayEncoder::getKind()
0x160e50 RGBGrayEncoder::getPSFilter(int, char const*)
0x160e60 RGBGrayEncoder::isBinary(bool)
0x160e70 RGBGrayEncoder::isEncoder()
0x160e80 MemStream::unfilteredReset()
0x160eb0 FileStream::unfilteredReset()
0x160f10 MemStream::getUnfilteredChar()
0x160f50 BaseStream::getDict()
0x160f90 FileStream::lookChar()
0x160fd0 FileStream::getChar()
0x161020 FileStream::getChars(int, unsigned char*)
0x1610d0 FileStream::getUnfilteredChar()
0x161130 CachedFileStream::lookChar()
0x161170 CachedFileStream::getChar()
0x1611c0 CachedFileStream::getUnfilteredChar()
0x161220 RunLengthStream::lookChar()
0x161260 RunLengthStream::getChar()
0x1612b0 ASCIIHexEncoder::lookChar()
0x1612f0 ASCIIHexEncoder::getChar()
0x161330 ASCII85Encoder::lookChar()
0x161370 ASCII85Encoder::getChar()
0x1613b0 RunLengthEncoder::lookChar()
0x1613f0 RunLengthEncoder::getChar()
0x161440 CMYKGrayEncoder::lookChar()
0x161480 CMYKGrayEncoder::getChar()
0x1614c0 RGBGrayEncoder::lookChar()
0x161500 RGBGrayEncoder::getChar()
0x161540 StructTreeRoot::~StructTreeRoot()
0x161600 StructTreeRoot::parentTreeAdd(Ref const&, StructElement*)
0x161660 StructTreeRoot::parse(Dict*)
0x1621f0 StructTreeRoot::StructTreeRoot(PDFDoc*, Dict*)
0x1622a0 std::vector<StructElement*, std::allocator<StructElement*> >::_M_insert_aux(__gnu_cxx::__normal_iterator<StructElement**, std::vector<StructElement*, std::allocator<StructElement*> > >, StructElement* const&)
0x162430 std::vector<StructTreeRoot::Parent, std::allocator<StructTreeRoot::Parent> >::_M_fill_insert(__gnu_cxx::__normal_iterator<StructTreeRoot::Parent*, std::vector<StructTreeRoot::Parent, std::allocator<StructTreeRoot::Parent> > >, unsigned long, StructTreeRoot::Parent const&)
0x1627a0 std::vector<StructTreeRoot::Parent, std::allocator<StructTreeRoot::Parent> >::operator=(std::vector<StructTreeRoot::Parent, std::allocator<StructTreeRoot::Parent> > const&)
0x162960 std::vector<std::vector<StructTreeRoot::Parent, std::allocator<StructTreeRoot::Parent> >, std::allocator<std::vector<StructTreeRoot::Parent, std::allocator<StructTreeRoot::Parent> > > >::_M_fill_insert(__gnu_cxx::__normal_iterator<std::vector<StructTreeRoot::Parent, std::allocator<StructTreeRoot::Parent> >*, std::vector<std::vector<StructTreeRoot::Parent, std::allocator<StructTreeRoot::Parent> >, std::allocator<std::vector<StructTreeRoot::Parent, std::allocator<StructTreeRoot::Parent> > > > >, unsigned long, std::vector<StructTreeRoot::Parent, std::allocator<StructTreeRoot::Parent> > const&)
0x163260 isNumber(Object*)
0x163280 isTextString(Object*)
0x163290 isBorderStyleName(Object*)
0x163390 isTableScopeName(Object*)
0x1633f0 isFieldCheckedName(Object*)
0x163450 isFieldRoleName(Object*)
0x1634d0 isListNumberingName(Object*)
0x1635b0 isRubyAlignName(Object*)
0x163640 isRubyPositionName(Object*)
0x1636c0 isGlyphOrientationName(Object*)
0x163770 isTextDecorationName(Object*)
0x1637f0 isLineHeight(Object*)
0x163850 isInlineAlignName(Object*)
0x1638b0 isBlockAlignName(Object*)
0x163930 isNumberOrAuto(Object*)
0x163970 isTextAlignName(Object*)
0x1639f0 isWritingModeName(Object*)
0x163a50 isPlacementName(Object*)
0x163ae0 Object::getDict() [clone .isra.22]
0x163b20 isNatural(Object*)
0x163b50 isPositive(Object*)
0x163bf0 isTableHeaders(Object*)
0x163ca0 isNumberOrArrayN(Object*)
0x163d70 isPositiveOrArray4(Object*)
0x163e40 isPositiveOrOptionalArray4(Object*)
0x163f00 isNumberArray4(Object*)
0x163fd0 isBorderStyle(Object*)
0x164090 isRGBColor(Object*)
0x164200 isRGBColorOrOptionalArray4(Object*)
0x1642c0 Attribute::Attribute(char const*, int, Object*)
0x164340 Attribute::~Attribute()
0x164380 Attribute::getTypeName() const
0x164400 Attribute::getOwnerName() const
0x164440 Attribute::getDefaultValue(Attribute::Type)
0x1644c0 Attribute::setFormattedValue(char const*)
0x164550 Attribute::checkType(StructElement*)
0x164610 Attribute::Attribute(Attribute::Type, Object*)
0x1646a0 Attribute::getTypeForName(char const*, StructElement*)
0x164760 Attribute::parseUserProperty(Dict*)
0x1649d0 StructElement::StructData::StructData()
0x164a50 StructElement::StructElement(int, StructTreeRoot*, StructElement*)
0x164ae0 StructElement::StructElement(Ref const&, StructTreeRoot*, StructElement*)
0x164b80 StructElement::~StructElement()
0x164bd0 StructElement::StructData::~StructData()
0x164d00 StructElement::isBlock() const
0x164d40 StructElement::isInline() const
0x164d80 StructElement::isGrouping() const
0x164dc0 StructElement::hasPageRef() const
0x164de0 StructElement::getPageRef(Ref&) const
0x164e10 StructElement::getTypeName() const
0x164e70 StructElement::findAttribute(Attribute::Type, bool, Attribute::Owner) const
0x165170 StructElement::getTextSpansInternal(MarkedContentOutputDev&) const
0x165250 StructElement::parseAttributes(Dict*, bool)
0x165800 StructElement::parse(Dict*)
0x166260 StructElement::parseChild(Object*, Object*, std::set<int, std::less<int>, std::allocator<int> >&)
0x166790 StructElement::parseChildren(Dict*, std::set<int, std::less<int>, std::allocator<int> >&)
0x166930 StructElement::StructElement(Dict*, StructTreeRoot*, StructElement*, std::set<int, std::less<int>, std::allocator<int> >&)
0x1669f0 StructElement::appendSubTreeText(GooString*, bool) const
0x166b80 std::vector<Attribute*, std::allocator<Attribute*> >::_M_insert_aux(__gnu_cxx::__normal_iterator<Attribute**, std::vector<Attribute*, std::allocator<Attribute*> > >, Attribute* const&)
0x166d10 UnicodeMap::UnicodeMap(GooString*)
0x166d80 UnicodeMap::parse(GooString*)
0x1670e0 UnicodeMap::UnicodeMap(char const*, bool, UnicodeMapRange*, int)
0x167180 UnicodeMap::UnicodeMap(char const*, bool, int (*)(unsigned int, char*, int))
0x167210 UnicodeMap::~UnicodeMap()
0x167270 UnicodeMap::incRefCnt()
0x1672a0 UnicodeMap::decRefCnt()
0x1672f0 UnicodeMap::match(GooString*)
0x167310 UnicodeMap::mapUnicode(unsigned int, char*, int)
0x167460 UnicodeMapCache::UnicodeMapCache()
0x167480 UnicodeMapCache::~UnicodeMapCache()
0x1674b0 UnicodeMapCache::getUnicodeMap(GooString*)
0x1675a0 decomp_compat(unsigned int, unsigned int*)
0x167650 unicodeTypeL(unsigned int)
0x167690 unicodeTypeR(unsigned int)
0x1676d0 unicodeTypeNum(unsigned int)
0x167710 unicodeTypeAlphaNum(unsigned int)
0x167780 unicodeIsAlphabeticPresentationForm(unsigned int)
0x167790 unicodeToUpper(unsigned int)
0x1677c0 unicodeNormalizeNFKC(unsigned int*, int, int*, int**)
0x167fa0 UnicodeIsValid(unsigned int)
0x167fe0 UTF16toUCS4(unsigned int const*, int, unsigned int**)
0x168190 TextStringToUCS4(GooString*, unsigned int**)
0x168280 ViewerPreferences::~ViewerPreferences()
0x168290 ViewerPreferences::init()
0x1682d0 ViewerPreferences::ViewerPreferences(Dict*)
0x168780 XRef::XRefTableWriter::startSection(int, int)
0x1687a0 XRef::XRefTableWriter::writeEntry(long long, int, XRefEntryType)
0x1687d0 XRef::XRefPreScanWriter::startSection(int, int)
0x1687e0 XRef::XRefPreScanWriter::writeEntry(long long, int, XRefEntryType)
0x1687f0 XRef::XRefStreamWriter::writeEntry(long long, int, XRefEntryType)
0x168850 Object::getInt() [clone .isra.13]
0x168890 Object::getInt64() [clone .isra.21]
0x1688d0 XRef::XRefStreamWriter::startSection(int, int)
0x168960 ObjectStream::~ObjectStream()
0x1689c0 ObjectStream::getObject(int, int, Object*)
0x168a10 XRef::init()
0x168ae0 XRef::XRef()
0x168b00 XRef::XRef(Object*)
0x168b50 XRef::~XRef()
0x168bf0 XRef::reserve(int)
0x168c70 XRef::copy()
0x168e50 XRef::resize(int)
0x168f40 XRef::readXRefStreamSection(Stream*, int*, int, int)
0x169170 XRef::readXRefStream(Stream*, long long*)
0x169560 XRef::constructXRef(bool*, bool)
0x169b10 XRef::setEncryption(int, bool, unsigned char*, int, int, int, CryptAlgorithm)
0x169b70 XRef::getEncryptionParameters(unsigned char**, CryptAlgorithm*, int*)
0x169bb0 XRef::okToPrint(bool)
0x169bd0 XRef::okToPrintHighRes(bool)
0x169c30 XRef::okToChange(bool)
0x169c50 XRef::okToCopy(bool)
0x169c70 XRef::okToAddNotes(bool)
0x169c90 XRef::okToFillForm(bool)
0x169cb0 XRef::okToAccessibility(bool)
0x169cd0 XRef::okToAssemble(bool)
0x169cf0 XRef::lock()
0x169d00 XRef::unlock()
0x169d10 XRef::getDocInfo(Object*)
0x169d60 XRef::getDocInfoNF(Object*)
0x169db0 XRef::getStreamEnd(long long, long long*)
0x169e10 XRef::XRefTableWriter::XRefTableWriter(OutStream*)
0x169e30 XRef::XRefStreamWriter::XRefStreamWriter(Object*, GooString*, int)
0x169e50 XRef::XRefPreScanWriter::XRefPreScanWriter()
0x169e70 XRef::parseEntry(long long, XRefEntry*)
0x16a0f0 XRef::readXRefTable(Parser*, long long*, std::vector<long long, std::allocator<long long> >*, std::vector<int, std::allocator<int> >*)
0x16a6c0 XRef::readXRef(long long*, std::vector<long long, std::allocator<long long> >*, std::vector<int, std::allocator<int> >*)
0x16a960 XRef::XRef(BaseStream*, long long, long long, bool*, bool)
0x16ac20 XRef::readXRefUntil(int, std::vector<int, std::allocator<int> >*)
0x16ae40 XRef::getEntry(int, bool)
0x16afd0 XRef::fetch(int, int, Object*, int)
0x16b590 ObjectStream::ObjectStream(XRef*, int, int)
0x16bbf0 XRef::getCatalog(Object*)
0x16bc70 XRef::getNumEntry(long long)
0x16bd00 XRef::add(int, int, long long, bool)
0x16be40 XRef::setModifiedObject(Object*, Ref)
0x16bed0 XRef::addIndirectObject(Object*)
0x16bf80 XRef::removeIndirectObject(Ref)
0x16c020 XRef::writeXRef(XRef::XRefWriter*, bool)
0x16c210 XRef::writeTableToFile(OutStream*, bool)
0x16c260 XRef::writeStreamToBuffer(GooString*, Dict*, XRef*)
0x16c430 XRef::markUnencrypted(Object*)
0x16c580 XRef::markUnencrypted()
0x16c620 XRef::scanSpecialFlags()
0x16c800 ObjectStreamKey::operator==(PopplerCacheKey const&) const
0x16c810 XRef::XRefPreScanWriter::~XRefPreScanWriter()
0x16c820 XRef::XRefStreamWriter::~XRefStreamWriter()
0x16c830 XRef::XRefTableWriter::~XRefTableWriter()
0x16c840 XRef::XRefTableWriter::~XRefTableWriter()
0x16c850 XRef::XRefStreamWriter::~XRefStreamWriter()
0x16c860 XRef::XRefPreScanWriter::~XRefPreScanWriter()
0x16c870 ObjectStreamKey::~ObjectStreamKey()
0x16c890 ObjectStreamKey::~ObjectStreamKey()
0x16c8b0 ObjectStreamItem::~ObjectStreamItem()
0x16c8f0 ObjectStreamItem::~ObjectStreamItem()
0x16c940 std::vector<long long, std::allocator<long long> >::_M_insert_aux(__gnu_cxx::__normal_iterator<long long*, std::vector<long long, std::allocator<long long> > >, long long const&)
0x16cad0 PSOutputDev::beginTextObject(GfxState*)
0x16cae0 DeviceNRecoder::~DeviceNRecoder()
0x16cb40 DeviceNRecoder::~DeviceNRecoder()
0x16cb60 DeviceNRecoder::reset()
0x16cbc0 outputToFile(void*, char const*, int)
0x16cbe0 DeviceNRecoder::fillBuf() [clone .part.158]
0x16cd10 PSOutCustomColor::PSOutCustomColor(double, double, double, double, GooString*)
0x16cd30 PSOutCustomColor::~PSOutCustomColor()
0x16cd60 DeviceNRecoder::DeviceNRecoder(Stream*, int, int, GfxImageColorMap*)
0x16ce00 DeviceNRecoder::fillBuf()
0x16ce20 PSOutputDev::addProcessColor(double, double, double, double)
0x16ce60 PSOutputDev::addCustomColor(GfxSeparationColorSpace*)
0x16d050 PSOutputDev::opiTransform(GfxState*, double, double, double*, double*)
0x16d150 PSOutputDev::writePSChar(char)
0x16d1a0 PSOutputDev::psXObject(Stream*, Stream*)
0x16d200 PSOutputDev::writePS(char const*)
0x16d250 PSOutputDev::writePageTrailer()
0x16d270 PSOutputDev::saveState(GfxState*)
0x16d290 PSOutputDev::restoreState(GfxState*)
0x16d2b0 PSOutputDev::saveTextPos(GfxState*)
0x16d2c0 PSOutputDev::restoreTextPos(GfxState*)
0x16d2d0 PSOutputDev::endTextObject(GfxState*)
0x16d300 PSOutputDev::unsetSoftMaskFromImageMask(GfxState*, double*)
0x16d320 PSOutputDev::opiEnd(GfxState*, Dict*)
0x16d430 PSOutputDev::type3D1(GfxState*, double, double, double, double, double, double)
0x16d4b0 PSOutputDev::endPage()
0x16d590 PSOutputDev::writePSBuf(char const*, int)
0x16d5f0 PSOutputDev::writePSFmt(char const*, ...)
0x16d6e0 PSOutputDev::writeXpdfProcset()
0x16d930 PSOutputDev::setupEmbeddedType1Font(Ref*, GooString*)
0x16dfe0 PSOutputDev::setupExternalType1Font(GooString*, GooString*)
0x16e2c0 PSOutputDev::setupEmbeddedType1CFont(GfxFont*, Ref*, GooString*)
0x16e4a0 PSOutputDev::setupEmbeddedOpenTypeT1CFont(GfxFont*, Ref*, GooString*)
0x16e690 PSOutputDev::setupEmbeddedTrueTypeFont(GfxFont*, Ref*, GooString*)
0x16e820 PSOutputDev::setupExternalTrueTypeFont(GfxFont*, GooString*, GooString*)
0x16e980 PSOutputDev::setupExternalCIDTrueTypeFont(GfxFont*, GooString*, GooString*, bool)
0x16ebb0 PSOutputDev::setupEmbeddedCIDType0Font(GfxFont*, Ref*, GooString*)
0x16eda0 PSOutputDev::setupEmbeddedCIDTrueTypeFont(GfxFont*, Ref*, GooString*, bool)
0x16ef00 PSOutputDev::setupEmbeddedOpenTypeCFFFont(GfxFont*, Ref*, GooString*)
0x16f100 PSOutputDev::setupImage(Ref, Stream*, bool)
0x16f6e0 PSOutputDev::setupImages(Dict*)
0x16fb70 PSOutputDev::setupForm(Ref, Object*)
0x1701c0 PSOutputDev::setupForms(Dict*)
0x170470 PSOutputDev::checkPageSlice(Page*, double, double, int, bool, bool, int, int, int, int, bool, bool (*)(void*), void*, bool (*)(Annot*, void*), void*)
0x171a30 PSOutputDev::updateCTM(GfxState*, double, double, double, double, double, double)
0x171a50 PSOutputDev::updateLineDash(GfxState*)
0x171af0 PSOutputDev::updateFlatness(GfxState*)
0x171b10 PSOutputDev::updateLineJoin(GfxState*)
0x171b30 PSOutputDev::updateLineCap(GfxState*)
0x171b50 PSOutputDev::updateMiterLimit(GfxState*)
0x171b70 PSOutputDev::updateLineWidth(GfxState*)
0x171b90 PSOutputDev::updateFillColor(GfxState*)
0x171e60 PSOutputDev::updateStrokeColor(GfxState*)
0x172130 PSOutputDev::updateFillOverprint(GfxState*)
0x172170 PSOutputDev::updateStrokeOverprint(GfxState*)
0x1721b0 PSOutputDev::updateOverprintMode(GfxState*)
0x1721f0 PSOutputDev::updateFont(GfxState*)
0x172250 PSOutputDev::updateTextMat(GfxState*)
0x1722f0 PSOutputDev::updateCharSpace(GfxState*)
0x172310 PSOutputDev::updateRender(GfxState*)
0x172350 PSOutputDev::updateRise(GfxState*)
0x172370 PSOutputDev::updateWordSpace(GfxState*)
0x172390 PSOutputDev::updateHorizScaling(GfxState*)
0x1723e0 PSOutputDev::updateTextPos(GfxState*)
0x172410 PSOutputDev::updateTextShift(GfxState*, double)
0x172460 PSOutputDev::tilingPatternFillL1(GfxState*, Catalog*, Object*, double*, int, int, Dict*, double*, double*, int, int, int, int, double, double)
0x1728b0 PSOutputDev::tilingPatternFillL2(GfxState*, Catalog*, Object*, double*, int, int, Dict*, double*, double*, int, int, int, int, double, double)
0x172b60 PSOutputDev::tilingPatternFill(GfxState*, Gfx*, Catalog*, Object*, double*, int, int, Dict*, double*, double*, int, int, int, int, double, double)
0x172da0 PSOutputDev::doPath(GfxPath*)
0x173050 PSOutputDev::stroke(GfxState*)
0x1730a0 PSOutputDev::fill(GfxState*)
0x1730c0 PSOutputDev::eoFill(GfxState*)
0x1730e0 PSOutputDev::clip(GfxState*)
0x173100 PSOutputDev::eoClip(GfxState*)
0x173120 PSOutputDev::clipToStrokePath(GfxState*)
0x173140 PSOutputDev::maskToClippingPath(Stream*, int, int, bool)
0x1737f0 PSOutputDev::setSoftMaskFromImageMask(GfxState*, Object*, Stream*, int, int, bool, bool, double*)
0x173820 PSOutputDev::doImageL1(Object*, GfxImageColorMap*, bool, bool, Stream*, int, int, int, int*, Stream*, int, int, bool)
0x173ea0 PSOutputDev::doImageL1Sep(Object*, GfxImageColorMap*, bool, bool, Stream*, int, int, int, int*, Stream*, int, int, bool)
0x174400 PSOutputDev::type3D0(GfxState*, double, double)
0x174430 PSOutputDev::drawForm(Ref)
0x174450 PSOutputDev::cvtFunction(Function*, bool)
0x174e40 PSOutputDev::updateTransfer(GfxState*)
0x174f00 PSOutputDev::functionShadedFill(GfxState*, GfxFunctionShading*)
0x175130 PSOutputDev::axialShadedFill(GfxState*, GfxAxialShading*, double, double)
0x1756d0 PSOutputDev::radialShadedFill(GfxState*, GfxRadialShading*, double, double)
0x176500 PSOutputDev::writePSString(GooString*)
0x176620 PSOutputDev::writeTrailer()
0x176820 PSOutputDev::drawString(GfxState*, GooString*)
0x176ee0 PSOutputDev::dumpColorSpaceL2(GfxColorSpace*, bool, bool, bool)
0x177b80 PSOutputDev::updateFillColorSpace(GfxState*)
0x177bf0 PSOutputDev::updateStrokeColorSpace(GfxState*)
0x177c70 PSOutputDev::doImageL2(Object*, GfxImageColorMap*, bool, bool, Stream*, int, int, int, int*, Stream*, int, int, bool)
0x179150 PSOutputDev::doImageL3(Object*, GfxImageColorMap*, bool, bool, Stream*, int, int, int, int*, Stream*, int, int, bool)
0x17a3d0 PSOutputDev::drawImageMask(GfxState*, Object*, Stream*, int, int, bool, bool, bool)
0x17a4b0 PSOutputDev::drawImage(GfxState*, Object*, Stream*, int, int, GfxImageColorMap*, bool, int*, bool)
0x17a5e0 PSOutputDev::drawMaskedImage(GfxState*, Object*, Stream*, int, int, GfxImageColorMap*, bool, Stream*, int, int, bool, bool)
0x17a730 PSOutputDev::opiBegin20(GfxState*, Dict*)
0x17b040 PSOutputDev::opiBegin13(GfxState*, Dict*)
0x17c500 PSOutputDev::opiBegin(GfxState*, Dict*)
0x17c5d0 PSOutputDev::writePSName(char const*)
0x17c660 PSOutputDev::filterPSName(GooString*)
0x17c770 PSOutputDev::makePSFontName(GfxFont*, Ref*)
0x17c8b0 PSOutputDev::filterPSLabel(GooString*, bool*)
0x17ca90 PSOutputDev::writePSTextLine(GooString*)
0x17cba0 PSOutputDev::writeHeader(std::vector<int, std::allocator<int> > const&, PDFRectangle*, PDFRectangle*, int, char*)
0x17d220 PSOutputDev::~PSOutputDev()
0x17d520 PSOutputDev::~PSOutputDev()
0x17d540 PSOutputDev::setupResources(Dict*)
0x17db20 PSOutputDev::writeDocSetup(PDFDoc*, Catalog*, std::vector<int, std::allocator<int> > const&, bool)
0x17df10 PSOutputDev::setupType3Font(GfxFont*, GooString*, Dict*)
0x17e410 PSOutputDev::setupFont(GfxFont*, Dict*)
0x17ed20 PSOutputDev::setupFonts(Dict*)
0x17eeb0 PSOutputDev::init(void (*)(void*, char const*, int), void*, PSFileType, char*, PDFDoc*, std::vector<int, std::allocator<int> > const&, PSOutMode, int, int, int, int, bool, int, int, bool, bool)
0x17f830 PSOutputDev::PSOutputDev(char const*, PDFDoc*, char*, std::vector<int, std::allocator<int> > const&, PSOutMode, int, int, bool, bool, int, int, int, int, bool, bool, GooString* (*)(PSOutputDev*, PSOutCustomCodeLocation, int, void*), void*)
0x17fbb0 PSOutputDev::PSOutputDev(void (*)(void*, char const*, int), void*, char*, PDFDoc*, std::vector<int, std::allocator<int> > const&, PSOutMode, int, int, bool, bool, int, int, int, int, bool, bool, GooString* (*)(PSOutputDev*, PSOutCustomCodeLocation, int, void*), void*)
0x17fe90 PSOutputDev::startPage(int, GfxState*, XRef*)
0x180d60 PSOutputDev::isOk()
0x180d70 PSOutputDev::upsideDown()
0x180d80 PSOutputDev::useDrawChar()
0x180d90 PSOutputDev::useTilingPatternFill()
0x180da0 PSOutputDev::useShadedFills(int)
0x180dc0 PSOutputDev::useDrawForm()
0x180dd0 PSOutputDev::interpretType3Chars()
0x180de0 PSOutputDev::needClipToCropBox()
0x180df0 DeviceNRecoder::getKind()
0x180e00 DeviceNRecoder::getPSFilter(int, char const*)
0x180e10 DeviceNRecoder::isBinary(bool)
0x180e20 DeviceNRecoder::isEncoder()
0x180e30 DeviceNRecoder::getChar()
0x180e80 DeviceNRecoder::lookChar()
0x180ec0 std::vector<int, std::allocator<int> >::operator=(std::vector<int, std::allocator<int> > const&)
0x181000 std::_Rb_tree<int, std::pair<int const, int>, std::_Select1st<std::pair<int const, int> >, std::less<int>, std::allocator<std::pair<int const, int> > >::_M_erase(std::_Rb_tree_node<std::pair<int const, int> >*)
0x181040 std::_Rb_tree<int, std::pair<int const, int>, std::_Select1st<std::pair<int const, int> >, std::less<int>, std::allocator<std::pair<int const, int> > >::_M_get_insert_unique_pos(int const&)
0x1810d0 std::_Rb_tree<int, std::pair<int const, int>, std::_Select1st<std::pair<int const, int> >, std::less<int>, std::allocator<std::pair<int const, int> > >::_M_insert_(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::pair<int const, int> const&)
0x181150 std::_Rb_tree<int, std::pair<int const, int>, std::_Select1st<std::pair<int const, int> >, std::less<int>, std::allocator<std::pair<int const, int> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<int const, int> >, int const&)
0x181250 TextWord::cmpYX(void const*, void const*)
0x1812a0 TextLineFrag::cmpYXPrimaryRot(void const*, void const*)
0x181400 TextLineFrag::cmpYXLineRot(void const*, void const*)
0x181500 TextLineFrag::cmpXYLineRot(void const*, void const*)
0x181600 TextLineFrag::cmpXYColumnPrimaryRot(void const*, void const*)
0x1816e0 TextLineFrag::cmpXYColumnLineRot(void const*, void const*)
0x1817c0 TextBlock::cmpXYPrimaryRot(void const*, void const*)
0x1818c0 TextOutputDev::beginString(GfxState*, GooString*)
0x1818d0 TextOutputDev::endString(GfxState*)
0x1818e0 TextSelectionDumper::visitWord(TextWord*, int, int, PDFRectangle*)
0x181920 TextSelectionPainter::visitWord(TextWord*, int, int, PDFRectangle*)
0x181960 TextSelectionDumper::~TextSelectionDumper()
0x181a00 TextSelectionDumper::~TextSelectionDumper()
0x181a20 TextSelectionSizer::visitLine(TextLine*, TextWord*, TextWord*, int, int, PDFRectangle*)
0x181b30 TextSelectionPainter::~TextSelectionPainter()
0x181bc0 TextSelectionPainter::~TextSelectionPainter()
0x181be0 TextSelectionPainter::visitLine(TextLine*, TextWord*, TextWord*, int, int, PDFRectangle*)
0x181e90 TextOutputDev_outputToFile(void*, char const*, int)
0x181eb0 TextOutputDev::eoFill(GfxState*)
0x181ed0 TextFontInfo::TextFontInfo(GfxState*)
0x181f60 TextFontInfo::~TextFontInfo()
0x181fa0 TextFontInfo::matches(GfxState*)
0x181fb0 TextFontInfo::matches(TextFontInfo*)
0x181fc0 TextWord::TextWord(GfxState*, int, double)
0x1820c0 TextWord::~TextWord()
0x182100 TextWord::addChar(GfxState*, TextFontInfo*, double, double, double, double, int, int, unsigned int, unsigned int, Matrix)
0x182770 TextWord::merge(TextWord*)
0x182990 TextWord::primaryDelta(TextWord*)
0x1829f0 TextWord::getText()
0x182a90 TextWord::getCharBBox(int, double*, double*, double*, double*)
0x182b90 TextPool::TextPool()
0x182bc0 TextPool::~TextPool()
0x182c40 TextPool::getBaseIdx(double)
0x182c60 TextPool::addWord(TextWord*)
0x182fe0 TextLine::TextLine(TextBlock*, int, double)
0x183070 TextLine::~TextLine()
0x1830f0 TextLine::addWord(TextWord*)
0x1831a0 TextLine::primaryDelta(TextLine*)
0x183200 TextLine::primaryCmp(TextLine*)
0x1832a0 TextLine::secondaryCmp(TextLine*)
0x1832f0 TextLine::cmpXY(void const*, void const*)
0x183330 TextLine::cmpYX(TextLine*)
0x183370 TextLine::coalesce(UnicodeMap*)
0x183770 TextLineFrag::init(TextLine*, int, int)
0x183790 TextLineFrag::computeCoords(bool)
0x183d20 TextBlock::TextBlock(TextPage*, int)
0x183db0 TextBlock::~TextBlock()
0x183e00 TextBlock::addWord(TextWord*)
0x183eb0 TextBlock::coalesce(UnicodeMap*, double)
0x184ac0 TextBlock::updatePriMinMax(TextBlock*)
0x184c00 TextBlock::cmpYXPrimaryRot(void const*, void const*)
0x184d00 TextBlock::primaryCmp(TextBlock*)
0x184da0 TextBlock::secondaryDelta(TextBlock*)
0x184e00 TextBlock::isBelow(TextBlock*)
0x184ed0 TextBlock::isBeforeByRule1(TextBlock*)
0x184fd0 TextBlock::isBeforeByRule2(TextBlock*)
0x185080 TextBlock::visitDepthFirst(TextBlock*, int, TextBlock**, int, bool*)
0x185260 TextFlow::TextFlow(TextPage*, TextBlock*)
0x1852b0 TextFlow::~TextFlow()
0x185300 TextFlow::addBlock(TextBlock*)
0x185370 TextFlow::blockFits(TextBlock*, TextBlock*)
0x185400 TextWordList::TextWordList(TextPage*, bool)
0x185650 TextWordList::~TextWordList()
0x185680 TextWordList::getLength()
0x185690 TextWordList::get(int)
0x1856b0 TextPage::TextPage(bool)
0x1857d0 TextPage::incRefCnt()
0x1857e0 TextPage::clear()
0x185a90 TextPage::~TextPage()
0x185b90 TextPage::decRefCnt()
0x185bc0 TextPage::startPage(GfxState*)
0x185c10 TextOutputDev::startPage(int, GfxState*, XRef*)
0x185c20 TextPage::updateFont(GfxState*)
0x185eb0 TextOutputDev::restoreState(GfxState*)
0x185ec0 TextOutputDev::updateFont(GfxState*)
0x185ed0 TextPage::beginWord(GfxState*)
0x186070 TextPage::incCharCount(int)
0x186080 TextOutputDev::incCharCount(int)
0x186090 TextPage::addWord(TextWord*)
0x1860f0 TextPage::endWord()
0x186120 TextPage::endPage()
0x186140 TextPage::addChar(GfxState*, double, double, double, double, unsigned int, int, unsigned int*, int)
0x186950 TextPage::addUnderline(double, double, double, double)
0x1869d0 TextOutputDev::stroke(GfxState*)
0x186ac0 TextOutputDev::fill(GfxState*)
0x186d00 TextPage::addLink(int, int, int, int, AnnotLink*)
0x186d60 TextOutputDev::processLink(AnnotLink*)
0x186f40 TextPage::coalesce(bool, double, bool)
0x1894a0 TextPage::findText(unsigned int*, int, bool, bool, bool, bool, bool, bool, bool, double*, double*, double*, double*)
0x189ff0 TextSelectionVisitor::TextSelectionVisitor(TextPage*)
0x18a010 TextSelectionDumper::TextSelectionDumper(TextPage*)
0x18a070 TextSelectionDumper::finishLine()
0x18a100 TextSelectionDumper::startLine()
0x18a130 TextSelectionDumper::visitLine(TextLine*, TextWord*, TextWord*, int, int, PDFRectangle*)
0x18a1d0 TextSelectionDumper::endPage()
0x18a1e0 TextSelectionDumper::takeWordList(int*)
0x18a210 TextSelectionSizer::TextSelectionSizer(TextPage*, double)
0x18a260 TextSelectionPainter::TextSelectionPainter(TextPage*, double, int, OutputDev*, GfxColor*, GfxColor*)
0x18a4a0 TextSelectionPainter::endPage()
0x18a900 TextWord::visitSelection(TextSelectionVisitor*, PDFRectangle*, SelectionStyle)
0x18a9b0 TextLine::visitSelection(TextSelectionVisitor*, PDFRectangle*, SelectionStyle)
0x18ac60 TextBlock::visitSelection(TextSelectionVisitor*, PDFRectangle*, SelectionStyle)
0x18b280 TextPage::visitSelection(TextSelectionVisitor*, PDFRectangle*, SelectionStyle)
0x18b9d0 TextPage::drawSelection(OutputDev*, double, int, PDFRectangle*, SelectionStyle, GfxColor*, GfxColor*)
0x18ba30 TextPage::getSelectionRegion(PDFRectangle*, SelectionStyle, double)
0x18ba70 TextPage::getSelectionWords(PDFRectangle*, SelectionStyle, int*)
0x18bae0 TextPage::findCharRange(int, int, double*, double*, double*, double*)
0x18bdd0 TextPage::assignColumns(TextLineFrag*, int, bool)
0x18c270 TextPage::dumpFragment(unsigned int*, int, UnicodeMap*, GooString*)
0x18c750 TextPage::getText(double, double, double, double)
0x18d370 TextSelectionDumper::getText()
0x18d4e0 TextPage::getSelectionText(PDFRectangle*, SelectionStyle)
0x18d540 TextPage::dump(void*, void (*)(void*, char const*, int), bool)
0x18dd40 TextOutputDev::endPage()
0x18ddb0 TextPage::makeWordList(bool)
0x18dde0 ActualText::ActualText(TextPage*)
0x18de10 ActualText::~ActualText()
0x18de50 TextOutputDev::~TextOutputDev()
0x18ded0 TextOutputDev::~TextOutputDev()
0x18def0 ActualText::addChar(GfxState*, double, double, double, double, unsigned int, int, unsigned int*, int)
0x18df30 TextOutputDev::drawChar(GfxState*, double, double, double, double, double, double, unsigned int, int, unsigned int*, int)
0x18df40 ActualText::begin(GfxState*, GooString*)
0x18df90 TextOutputDev::beginActualText(GfxState*, GooString*)
0x18dfa0 ActualText::end(GfxState*)
0x18e040 TextOutputDev::endActualText(GfxState*)
0x18e050 TextOutputDev::TextOutputDev(char*, bool, double, bool, bool)
0x18e200 TextOutputDev::TextOutputDev(void (*)(void*, char const*, int), void*, bool, double, bool)
0x18e2f0 TextOutputDev::findText(unsigned int*, int, bool, bool, bool, bool, bool, bool, bool, double*, double*, double*, double*)
0x18e330 TextOutputDev::getText(double, double, double, double)
0x18e340 TextOutputDev::drawSelection(OutputDev*, double, int, PDFRectangle*, SelectionStyle, GfxColor*, GfxColor*)
0x18e350 TextOutputDev::getSelectionRegion(PDFRectangle*, SelectionStyle, double)
0x18e360 TextOutputDev::getSelectionText(PDFRectangle*, SelectionStyle)
0x18e370 TextOutputDev::findCharRange(int, int, double*, double*, double*, double*)
0x18e380 TextOutputDev::makeWordList()
0x18e3a0 TextOutputDev::takeText()
0x18e3e0 TextOutputDev::isOk()
0x18e3f0 TextOutputDev::upsideDown()
0x18e400 TextOutputDev::useDrawChar()
0x18e410 TextOutputDev::interpretType3Chars()
0x18e420 TextOutputDev::needNonText()
0x18e430 TextOutputDev::needCharCount()
0x18e440 TextSelectionDumper::visitBlock(TextBlock*, TextLine*, TextLine*, PDFRectangle*)
0x18e450 TextSelectionSizer::~TextSelectionSizer()
0x18e460 TextSelectionSizer::visitBlock(TextBlock*, TextLine*, TextLine*, PDFRectangle*)
0x18e470 TextSelectionSizer::visitWord(TextWord*, int, int, PDFRectangle*)
0x18e480 TextSelectionPainter::visitBlock(TextBlock*, TextLine*, TextLine*, PDFRectangle*)
0x18e490 TextSelectionSizer::~TextSelectionSizer()
0x18e4a0 MarkedContentOutputDev::startPage(int, GfxState*, XRef*)
0x18e4e0 MarkedContentOutputDev::endPage()
0x18e500 MarkedContentOutputDev::~MarkedContentOutputDev()
0x18e600 MarkedContentOutputDev::~MarkedContentOutputDev()
0x18e620 MarkedContentOutputDev::MarkedContentOutputDev(int)
0x18e700 MarkedContentOutputDev::needFontChange(GfxFont*) const
0x18e750 MarkedContentOutputDev::getTextSpans() const
0x18e760 MarkedContentOutputDev::endSpan()
0x18e870 MarkedContentOutputDev::endMarkedContent(GfxState*)
0x18e8c0 MarkedContentOutputDev::drawChar(GfxState*, double, double, double, double, double, double, unsigned int, int, unsigned int*, int)
0x18ec30 MarkedContentOutputDev::beginMarkedContent(char*, Dict*)
0x18ece0 MarkedContentOutputDev::isOk()
0x18ecf0 MarkedContentOutputDev::upsideDown()
0x18ed00 MarkedContentOutputDev::useDrawChar()
0x18ed10 MarkedContentOutputDev::interpretType3Chars()
0x18ed20 MarkedContentOutputDev::needNonText()
0x18ed30 MarkedContentOutputDev::needCharCount()
0x18ed40 std::vector<TextSpan, std::allocator<TextSpan> >::_M_insert_aux(__gnu_cxx::__normal_iterator<TextSpan*, std::vector<TextSpan, std::allocator<TextSpan> > >, TextSpan const&)
0x18f030 toRoman(int, GooString*, bool)
0x18f180 PageLabelInfo::Interval::Interval(Object*, int)
0x18f3e0 PageLabelInfo::Interval::~Interval()
0x18f410 PageLabelInfo::~PageLabelInfo()
0x18f470 PageLabelInfo::parse(Object*)
0x18f6c0 PageLabelInfo::PageLabelInfo(Object*, int)
0x18f740 PageLabelInfo::labelToIndex(GooString*, int*)
0x18f9f0 PageLabelInfo::indexToLabel(int, GooString*)
0x18fc30 StandardSecurityHandler::isUnencrypted()
0x18fc50 StandardSecurityHandler::getAuthData()
0x18fc60 StandardSecurityHandler::makeAuthData(GooString*, GooString*)
0x18fcc0 StandardSecurityHandler::authorize(void*)
0x18fd30 Object::getName() [clone .isra.14]
0x18fd70 Object::dictLookup(char const*, Object*, int) [clone .isra.17] [clone .constprop.23]
0x18fdc0 StandardSecurityHandler::freeAuthData(void*)
0x18fe20 SecurityHandler::SecurityHandler(PDFDoc*)
0x18fe40 SecurityHandler::~SecurityHandler()
0x18fe50 StandardSecurityHandler::~StandardSecurityHandler()
0x18ff10 StandardSecurityHandler::~StandardSecurityHandler()
0x18ff30 SecurityHandler::~SecurityHandler()
0x18ff50 SecurityHandler::checkEncryption(GooString*, GooString*)
0x1900e0 StandardSecurityHandler::StandardSecurityHandler(PDFDoc*, Object*)
0x190ca0 SecurityHandler::make(PDFDoc*, Object*)
0x190da0 SecurityHandler::isUnencrypted()
0x190db0 StandardSecurityHandler::getPermissionFlags()
0x190dc0 StandardSecurityHandler::getOwnerPasswordOk()
0x190dd0 StandardSecurityHandler::getFileKey()
0x190de0 StandardSecurityHandler::getFileKeyLength()
0x190df0 StandardSecurityHandler::getEncVersion()
0x190e00 StandardSecurityHandler::getEncRevision()
0x190e10 StandardSecurityHandler::getEncAlgorithm()
0x190e20 Sound::Sound(Object*, bool)
0x191180 Sound::parseSound(Object*)
0x191220 Sound::~Sound()
0x191260 Sound::getStream()
0x1912a0 Sound::copy()
0x191320 getCurrentDir()
0x191380 appendToPath(GooString*, char const*)
0x191490 grabPath(char*)
0x1914f0 isAbsolutePath(char*)
0x191500 getModTime(char*)
0x191530 openTempFile(GooString**, _IO_FILE**, char const*)
0x191620 openFile(char const*, char const*)
0x191630 getLine(char*, int, _IO_FILE*)
0x1916d0 Gfseek(_IO_FILE*, long long, int)
0x1916e0 Gftell(_IO_FILE*)
0x1916f0 GoffsetMax()
0x191700 GooFile::read(char*, int, long long) const
0x191720 GooFile::size() const
0x191730 GooFile::open(GooString const*)
0x191760 GDirEntry::GDirEntry(char*, char*, bool)
0x191820 GDirEntry::~GDirEntry()
0x191870 GDir::GDir(char*, bool)
0x1918c0 GDir::~GDir()
0x191900 GDir::getNextEntry()
0x1919a0 GDir::rewind()
0x1919c0 GooHash::GooHash(bool)
0x191a20 GooHash::~GooHash()
0x191ab0 GooHash::startIter(GooHashIter**)
0x191ae0 GooHash::getNext(GooHashIter**, GooString**, void**)
0x191ba0 GooHash::getNext(GooHashIter**, GooString**, int*)
0x191c50 GooHash::killIter(GooHashIter**)
0x191c70 GooHash::hash(GooString*)
0x191cb0 GooHash::expand()
0x191d70 GooHash::add(GooString*, void*)
0x191de0 GooHash::add(GooString*, int)
0x191e50 GooHash::find(GooString*, int*)
0x191eb0 GooHash::replace(GooString*, void*)
0x191f10 GooHash::replace(GooString*, int)
0x191f70 GooHash::lookup(GooString*)
0x191fa0 GooHash::lookupInt(GooString*)
0x191fd0 GooHash::remove(GooString*)
0x192060 GooHash::removeInt(GooString*)
0x192100 GooHash::hash(char const*)
0x192130 GooHash::find(char const*, int*)
0x192190 GooHash::lookup(char const*)
0x1921c0 GooHash::lookupInt(char const*)
0x1921f0 GooHash::remove(char const*)
0x192280 GooHash::removeInt(char const*)
0x192320 GooList::GooList()
0x192350 GooList::GooList(int)
0x192380 GooList::~GooList()
0x192390 GooList::copy()
0x1923e0 GooList::sort(int (*)(void const*, void const*))
0x192400 GooList::reverse()
0x192460 GooList::expand()
0x192490 GooList::append(void*)
0x1924d0 GooList::append(GooList*)
0x192540 GooList::insert(int, void*)
0x1925d0 GooList::shrink()
0x192600 GooList::del(int)
0x192680 GooTimer::start()
0x1926a0 GooTimer::GooTimer()
0x1926b0 GooTimer::stop()
0x1926d0 GooTimer::getElapsed()
0x192750 GooString::Set(char const*, int, char const*, int)
0x192a20 GooString::GooString()
0x192a50 GooString::GooString(char const*)
0x192a70 GooString::GooString(char const*, int)
0x192a90 GooString::GooString(GooString*, int, int)
0x192af0 GooString::GooString(GooString const*)
0x192b20 GooString::GooString(GooString*, GooString*)
0x192b50 GooString::~GooString()
0x192b70 GooString::clear()
0x192c30 GooString::append(char const*, int)
0x192e30 GooString::append(char)
0x192e50 GooString::append(GooString*)
0x192e60 GooString::formatInt(long long, char*, int, bool, int, int, char**, int*, bool)
0x192f70 GooString::fromInt(int)
0x192fd0 GooString::formatUInt(unsigned long long, char*, int, bool, int, int, char**, int*, bool)
0x1930b0 GooString::formatDouble(double, char*, int, int, bool, char**, int*)
0x193310 GooString::formatDoubleSmallAware(double, char*, int, int, bool, char**, int*)
0x193360 GooString::appendfv(char const*, __va_list_tag*)
0x193ca0 GooString::format(char const*, ...)
0x193d60 GooString::formatv(char const*, __va_list_tag*)
0x193da0 GooString::appendf(char const*, ...)
0x193e40 GooString::insert(int, char const*, int)
0x194090 GooString::insert(int, char)
0x1940b0 GooString::insert(int, GooString*)
0x1940c0 GooString::del(int, int)
0x1942c0 GooString::upperCase()
0x194320 GooString::lowerCase()
0x194380 GooString::cmp(GooString*) const
0x1943f0 GooString::cmpN(GooString*, int) const
0x194470 GooString::cmp(char const*) const
0x1944f0 GooString::cmpN(char const*, int) const
0x194580 GooString::endsWith(char const*) const
0x1945d0 GooString::hasUnicodeMarker()
0x1945f0 GooString::sanitizedName(bool)
0x1946e0 gmalloc
0x194740 gmalloc_checkoverflow
0x194790 grealloc
0x194810 grealloc_checkoverflow(void*, unsigned long)
0x194880 gmallocn
0x194930 gmallocn_checkoverflow
0x1949d0 gmallocn3
0x194a80 gmallocn3_checkoverflow
0x194b30 gfree
0x194b50 greallocn_checkoverflow
0x194c40 greallocn
0x194d10 copyString
0x194d30 gstrndup
0x194d60 NetPBMWriter::writePointers(unsigned char**, int)
0x194db0 NetPBMWriter::close()
0x194dc0 NetPBMWriter::init(_IO_FILE*, int, int, int, int)
0x194e60 NetPBMWriter::writeRow(unsigned char**)
0x194ef0 NetPBMWriter::NetPBMWriter(NetPBMWriter::Format)
0x194f10 ImgWriter::supportCMYK()
0x194f20 NetPBMWriter::~NetPBMWriter()
0x194f40 NetPBMWriter::~NetPBMWriter()
0x194f60 PNGWriter::~PNGWriter()
0x194fc0 PNGWriter::~PNGWriter()
0x194fe0 PNGWriter::init(_IO_FILE*, int, int, int, int)
0x1952d0 PNGWriter::writePointers(unsigned char**, int)
0x195330 PNGWriter::writeRow(unsigned char**)
0x1953a0 PNGWriter::close()
0x195410 PNGWriter::PNGWriter(PNGWriter::Format)
0x195460 PNGWriter::setICCProfile(char const*, unsigned char*, int)
0x1954c0 PNGWriter::setSRGBProfile()
0x1954d0 JpegWriter::supportCMYK()
0x1954e0 outputMessage(jpeg_common_struct*)
0x195520 JpegWriter::~JpegWriter()
0x195560 JpegWriter::~JpegWriter()
0x195580 JpegWriter::init(_IO_FILE*, int, int, int, int)
0x195740 JpegWriter::writePointers(unsigned char**, int)
0x1957b0 JpegWriter::writeRow(unsigned char**)
0x195810 JpegWriter::close()
0x195830 JpegWriter::JpegWriter(int, bool, JpegWriter::Format)
0x195880 JpegWriter::JpegWriter(JpegWriter::Format)
0x1958c0 TiffWriter::~TiffWriter()
0x1958f0 TiffWriter::~TiffWriter()
0x195910 TiffWriter::init(_IO_FILE*, int, int, int, int)
0x195d20 TiffWriter::writePointers(unsigned char**, int)
0x195db0 TiffWriter::close()
0x195dd0 TiffWriter::writeRow(unsigned char**)
0x195e20 TiffWriter::TiffWriter(TiffWriter::Format)
0x195e70 TiffWriter::setCompressionString(char const*)
0x195e80 TiffWriter::supportCMYK()
0x195e90 ImgWriter::~ImgWriter()
0x195ea0 ImgWriter::~ImgWriter()
0x195ec0 gstrtod
0x196170 gatof
0x196180 grandom_fill
0x1961f0 grandom_double
0x196240 FoFiBase::~FoFiBase()
0x196270 FoFiBase::~FoFiBase()
0x196290 FoFiBase::FoFiBase(char*, int, bool)
0x1962b0 FoFiBase::readFile(char*, int*)
0x1963f0 FoFiBase::getS8(int, bool*)
0x196420 FoFiBase::getU8(int, bool*)
0x196440 FoFiBase::getS16BE(int, bool*)
0x196490 FoFiBase::getU16BE(int, bool*)
0x1964d0 FoFiBase::getS32BE(int, bool*)
0x196520 FoFiBase::getU32BE(int, bool*)
0x196570 FoFiBase::getU32LE(int, bool*)
0x1965c0 FoFiBase::getUVarBE(int, int, bool*)
0x196610 FoFiBase::checkRegion(int, int)
0x196630 FoFiTrueType::~FoFiTrueType()
0x196680 FoFiTrueType::~FoFiTrueType()
0x1966a0 void std::__unguarded_linear_insert<TrueTypeLoca*, __gnu_cxx::__ops::_Val_comp_iter<cmpTrueTypeLocaOffsetFunctor> >(TrueTypeLoca*, __gnu_cxx::__ops::_Val_comp_iter<cmpTrueTypeLocaOffsetFunctor>) [clone .isra.11]
0x196700 void std::__unguarded_linear_insert<TrueTypeLoca*, __gnu_cxx::__ops::_Val_comp_iter<cmpTrueTypeLocaIdxFunctor> >(TrueTypeLoca*, __gnu_cxx::__ops::_Val_comp_iter<cmpTrueTypeLocaIdxFunctor>) [clone .isra.15]
0x196750 void std::__insertion_sort<TrueTypeLoca*, __gnu_cxx::__ops::_Iter_comp_iter<cmpTrueTypeLocaOffsetFunctor> >(TrueTypeLoca*, TrueTypeLoca*, __gnu_cxx::__ops::_Iter_comp_iter<cmpTrueTypeLocaOffsetFunctor>) [clone .isra.19]
0x196820 void std::__insertion_sort<TrueTypeLoca*, __gnu_cxx::__ops::_Iter_comp_iter<cmpTrueTypeLocaIdxFunctor> >(TrueTypeLoca*, TrueTypeLoca*, __gnu_cxx::__ops::_Iter_comp_iter<cmpTrueTypeLocaIdxFunctor>) [clone .isra.21]
0x1968d0 FoFiTrueType::getNumCmaps()
0x1968e0 FoFiTrueType::getCmapPlatform(int)
0x196900 FoFiTrueType::getCmapEncoding(int)
0x196920 FoFiTrueType::findCmap(int, int)
0x196970 FoFiTrueType::mapCodeToGID(int, unsigned int)
0x196c90 FoFiTrueType::mapNameToGID(char*)
0x196cb0 FoFiTrueType::cvtEncoding(char**, void (*)(void*, char const*, int), void*)
0x196dc0 FoFiTrueType::cvtCharStrings(char**, int*, void (*)(void*, char const*, int), void*)
0x196f40 FoFiTrueType::dumpString(unsigned char*, int, void (*)(void*, char const*, int), void*)
0x1970c0 FoFiTrueType::computeTableChecksum(unsigned char*, int)
0x197170 FoFiTrueType::seekTable(char const*)
0x1971e0 FoFiTrueType::getCFFBlock(char**, int*)
0x197270 FoFiTrueType::getCIDToGIDMap(int*)
0x1972e0 FoFiTrueType::getFontMatrix(double*)
0x197340 FoFiTrueType::convertToType1(char*, char const**, bool, void (*)(void*, char const*, int), void*)
0x1973d0 FoFiTrueType::convertToCIDType0(char*, int*, int, void (*)(void*, char const*, int), void*)
0x197460 FoFiTrueType::convertToType0(char*, int*, int, void (*)(void*, char const*, int), void*)
0x1974f0 FoFiTrueType::getEmbeddingRights()
0x197570 FoFiTrueType::readPostTable()
0x197980 FoFiTrueType::parse()
0x197e60 FoFiTrueType::FoFiTrueType(char*, int, bool, int)
0x197ed0 FoFiTrueType::make(char*, int, int)
0x197f60 FoFiTrueType::load(char*, int)
0x198000 FoFiTrueType::charToTag(char const*)
0x198070 FoFiTrueType::setupGSUB(char const*, char const*)
0x1983d0 FoFiTrueType::setupGSUB(char const*)
0x1983e0 FoFiTrueType::checkGIDInCoverage(unsigned int, unsigned int)
0x198500 FoFiTrueType::scanLookupSubTable(unsigned int, unsigned int)
0x1985d0 FoFiTrueType::scanLookupList(unsigned int, unsigned int)
0x198690 FoFiTrueType::doMapToVertGID(unsigned int)
0x198720 FoFiTrueType::mapToVertGID(unsigned int)
0x198740 FoFiTrueType::cvtSfnts(void (*)(void*, char const*, int), void*, GooString*, bool, int*)
0x1995a0 FoFiTrueType::convertToType42(char*, char**, int*, void (*)(void*, char const*, int), void*)
0x199740 FoFiTrueType::convertToCIDType2(char*, int*, int, bool, void (*)(void*, char const*, int), void*)
0x199e00 FoFiTrueType::convertToType0(char*, int*, int, bool, void (*)(void*, char const*, int), void*)
0x19a3a0 void std::__adjust_heap<TrueTypeLoca*, long, TrueTypeLoca, __gnu_cxx::__ops::_Iter_comp_iter<cmpTrueTypeLocaOffsetFunctor> >(TrueTypeLoca*, long, long, TrueTypeLoca, __gnu_cxx::__ops::_Iter_comp_iter<cmpTrueTypeLocaOffsetFunctor>)
0x19a560 void std::__heap_select<TrueTypeLoca*, __gnu_cxx::__ops::_Iter_comp_iter<cmpTrueTypeLocaOffsetFunctor> >(TrueTypeLoca*, TrueTypeLoca*, TrueTypeLoca*, __gnu_cxx::__ops::_Iter_comp_iter<cmpTrueTypeLocaOffsetFunctor>)
0x19a660 void std::__introsort_loop<TrueTypeLoca*, long, __gnu_cxx::__ops::_Iter_comp_iter<cmpTrueTypeLocaOffsetFunctor> >(TrueTypeLoca*, TrueTypeLoca*, long, __gnu_cxx::__ops::_Iter_comp_iter<cmpTrueTypeLocaOffsetFunctor>)
0x19a960 void std::__adjust_heap<TrueTypeLoca*, long, TrueTypeLoca, __gnu_cxx::__ops::_Iter_comp_iter<cmpTrueTypeLocaIdxFunctor> >(TrueTypeLoca*, long, long, TrueTypeLoca, __gnu_cxx::__ops::_Iter_comp_iter<cmpTrueTypeLocaIdxFunctor>)
0x19aae0 void std::__heap_select<TrueTypeLoca*, __gnu_cxx::__ops::_Iter_comp_iter<cmpTrueTypeLocaIdxFunctor> >(TrueTypeLoca*, TrueTypeLoca*, TrueTypeLoca*, __gnu_cxx::__ops::_Iter_comp_iter<cmpTrueTypeLocaIdxFunctor>)
0x19abd0 void std::__introsort_loop<TrueTypeLoca*, long, __gnu_cxx::__ops::_Iter_comp_iter<cmpTrueTypeLocaIdxFunctor> >(TrueTypeLoca*, TrueTypeLoca*, long, __gnu_cxx::__ops::_Iter_comp_iter<cmpTrueTypeLocaIdxFunctor>)
0x19adf0 FoFiType1::~FoFiType1()
0x19ae70 FoFiType1::~FoFiType1()
0x19ae90 FoFiType1::getNextLine(char*)
0x19af00 FoFiType1::writeEncoded(char const**, void (*)(void*, char const*, int), void*)
0x19b230 FoFiType1::parse()
0x19b7d0 FoFiType1::getName()
0x19b7f0 FoFiType1::getEncoding()
0x19b810 FoFiType1::getFontMatrix(double*)
0x19b860 FoFiType1::undoPFB()
0x19b970 FoFiType1::FoFiType1(char*, int, bool)
0x19b9e0 FoFiType1::make(char*, int)
0x19ba10 FoFiType1::load(char*)
0x19ba60 FoFiType1C::~FoFiType1C()
0x19bb40 FoFiType1C::~FoFiType1C()
0x19bb60 FoFiType1C::FoFiType1C(char*, int, bool)
0x19bbc0 FoFiType1C::getName()
0x19bbe0 FoFiType1C::getEncoding()
0x19bbf0 FoFiType1C::getCIDToGIDMap(int*)
0x19bd00 FoFiType1C::getFontMatrix(double*)
0x19be60 FoFiType1C::cvtNum(double, bool, GooString*)
0x19bfe0 FoFiType1C::cvtGlyphWidth(bool, GooString*, Type1CPrivateDict*)
0x19c0c0 FoFiType1C::eexecWrite(Type1CEexecBuf*, char const*)
0x19c1d0 FoFiType1C::eexecWriteCharstring(Type1CEexecBuf*, unsigned char*, int)
0x19c2c0 FoFiType1C::writePSString(char*, void (*)(void*, char const*, int), void*)
0x19c400 FoFiType1C::readFDSelect()
0x19c5e0 FoFiType1C::readCharset()
0x19c8d0 FoFiType1C::getOp(int, bool, bool*)
0x19ccb0 FoFiType1C::getDeltaIntArray(int*, int)
0x19ccf0 FoFiType1C::getDeltaFPArray(double*, int)
0x19cd30 FoFiType1C::readPrivateDict(int, int, Type1CPrivateDict*)
0x19d210 FoFiType1C::readFD(int, int, Type1CPrivateDict*)
0x19d3e0 FoFiType1C::getIndex(int, Type1CIndex*, bool*)
0x19d4b0 FoFiType1C::getIndexVal(Type1CIndex*, int, Type1CIndexVal*, bool*)
0x19d580 FoFiType1C::cvtGlyph(int, int, GooString*, Type1CIndex*, Type1CPrivateDict*, bool)
0x19f2c0 FoFiType1C::eexecCvtGlyph(Type1CEexecBuf*, char const*, int, int, Type1CIndex*, Type1CPrivateDict*)
0x19f3a0 FoFiType1C::convertToType0(char*, int*, int, void (*)(void*, char const*, int), void*)
0x1a08d0 FoFiType1C::readTopDict()
0x1a0f00 FoFiType1C::getString(int, char*, bool*)
0x1a0fb0 FoFiType1C::getGlyphName(int)
0x1a1030 FoFiType1C::convertToType1(char*, char const**, bool, void (*)(void*, char const*, int), void*)
0x1a2230 FoFiType1C::convertToCIDType0(char*, int*, int, void (*)(void*, char const*, int), void*)
0x1a3810 FoFiType1C::buildEncoding()
0x1a3c60 FoFiType1C::parse()
0x1a3f90 FoFiType1C::make(char*, int)
0x1a4000 FoFiType1C::load(char*)
0x1a4090 (anonymous namespace)::MemReader::~MemReader()
0x1a40a0 (anonymous namespace)::MemReader::getByte(int)
0x1a40c0 (anonymous namespace)::StreamReader::~StreamReader()
0x1a40d0 (anonymous namespace)::MemReader::cmp(int, char const*)
0x1a4130 (anonymous namespace)::MemReader::~MemReader()
0x1a4140 (anonymous namespace)::StreamReader::~StreamReader()
0x1a4150 (anonymous namespace)::FileReader::~FileReader()
0x1a4170 (anonymous namespace)::FileReader::~FileReader()
0x1a4190 (anonymous namespace)::MemReader::getU16BE(int, int*)
0x1a41d0 (anonymous namespace)::MemReader::getU32BE(int, unsigned int*)
0x1a4220 (anonymous namespace)::MemReader::getU32LE(int, unsigned int*)
0x1a4270 (anonymous namespace)::MemReader::getUVarBE(int, int, unsigned int*)
0x1a42d0 identifyCFF((anonymous namespace)::Reader*, int)
0x1a4560 identify((anonymous namespace)::Reader*)
0x1a4900 (anonymous namespace)::FileReader::fillBuf(int, int)
0x1a4990 (anonymous namespace)::FileReader::cmp(int, char const*)
0x1a49f0 (anonymous namespace)::FileReader::getByte(int)
0x1a4a30 (anonymous namespace)::FileReader::getUVarBE(int, int, unsigned int*)
0x1a4ac0 (anonymous namespace)::FileReader::getU32LE(int, unsigned int*)
0x1a4b30 (anonymous namespace)::FileReader::getU32BE(int, unsigned int*)
0x1a4ba0 (anonymous namespace)::FileReader::getU16BE(int, int*)
0x1a4bf0 (anonymous namespace)::StreamReader::fillBuf(int, int)
0x1a4d30 (anonymous namespace)::StreamReader::cmp(int, char const*)
0x1a4d90 (anonymous namespace)::StreamReader::getByte(int)
0x1a4dd0 (anonymous namespace)::StreamReader::getUVarBE(int, int, unsigned int*)
0x1a4e60 (anonymous namespace)::StreamReader::getU32LE(int, unsigned int*)
0x1a4ed0 (anonymous namespace)::StreamReader::getU32BE(int, unsigned int*)
0x1a4f40 (anonymous namespace)::StreamReader::getU16BE(int, int*)
0x1a4f90 FoFiIdentifier::identifyMem(char*, int)
0x1a4fd0 FoFiIdentifier::identifyFile(char*)
0x1a5040 FoFiIdentifier::identifyStream(int (*)(void*), void*)
0x1a50a0 blendXor(unsigned char*, unsigned char*, unsigned char*, SplashColorMode)
0x1a50e0 Splash::pipeRunSimpleMono8(SplashPipe*)
0x1a5120 Splash::pipeRunSimpleRGB8(SplashPipe*)
0x1a51a0 Splash::pipeRunSimpleXBGR8(SplashPipe*)
0x1a5230 Splash::pipeRunSimpleBGR8(SplashPipe*)
0x1a52b0 Splash::pipeRunAAMono8(SplashPipe*)
0x1a5350 Splash::pipeRunAARGB8(SplashPipe*)
0x1a5480 Splash::pipeRunAAXBGR8(SplashPipe*)
0x1a55c0 Splash::pipeRunAABGR8(SplashPipe*)
0x1a56f0 expandRow(unsigned char*, unsigned char*, int, int, int)
0x1a5820 splashFloor(double) [clone .part.0]
0x1a5840 Splash::pipeRunSimpleMono1(SplashPipe*)
0x1a5900 Splash::pipeRunAAMono1(SplashPipe*)
0x1a5a20 imgCoordMungeLowerC(double, bool)
0x1a5a70 imgCoordMungeUpperC(double, bool)
0x1a5ac0 Splash::pipeRun(SplashPipe*)
0x1a67c0 Splash::clearModRegion()
0x1a67f0 Splash::Splash(SplashBitmap*, bool, SplashScreenParams*)
0x1a6930 Splash::Splash(SplashBitmap*, bool, SplashScreen*)
0x1a6a70 Splash::getMatrix()
0x1a6a80 Splash::getStrokePattern()
0x1a6a90 Splash::getFillPattern()
0x1a6aa0 Splash::getScreen()
0x1a6ab0 Splash::getBlendFunc()
0x1a6ac0 Splash::getStrokeAlpha()
0x1a6ad0 Splash::getFillAlpha()
0x1a6ae0 Splash::getLineWidth()
0x1a6af0 Splash::getLineCap()
0x1a6b00 Splash::getLineJoin()
0x1a6b10 Splash::getMiterLimit()
0x1a6b20 Splash::getFlatness()
0x1a6b30 Splash::getLineDash()
0x1a6b40 Splash::getLineDashLength()
0x1a6b50 Splash::getLineDashPhase()
0x1a6b60 Splash::getStrokeAdjust()
0x1a6b70 Splash::getClip()
0x1a6b80 Splash::getSoftMask()
0x1a6b90 Splash::getInNonIsolatedGroup()
0x1a6ba0 Splash::setMatrix(double*)
0x1a6be0 Splash::setStrokePattern(SplashPattern*)
0x1a6bf0 Splash::setFillPattern(SplashPattern*)
0x1a6c00 Splash::setScreen(SplashScreen*)
0x1a6c10 Splash::setBlendFunc(void (*)(unsigned char*, unsigned char*, unsigned char*, SplashColorMode))
0x1a6c20 Splash::setStrokeAlpha(double)
0x1a6c30 Splash::setFillAlpha(double)
0x1a6c40 Splash::setFillOverprint(bool)
0x1a6c50 Splash::setStrokeOverprint(bool)
0x1a6c60 Splash::setOverprintMode(int)
0x1a6c70 Splash::setLineWidth(double)
0x1a6c80 Splash::setLineCap(int)
0x1a6c90 Splash::setLineJoin(int)
0x1a6ca0 Splash::setMiterLimit(double)
0x1a6cb0 Splash::setFlatness(double)
0x1a6ce0 Splash::setLineDash(double*, int, double)
0x1a6cf0 Splash::setStrokeAdjust(bool)
0x1a6d00 Splash::clipResetToRect(double, double, double, double)
0x1a6d10 Splash::clipToRect(double, double, double, double)
0x1a6d20 Splash::clipToPath(SplashPath*, bool)
0x1a6d40 Splash::setSoftMask(SplashBitmap*)
0x1a6d50 Splash::setInNonIsolatedGroup(SplashBitmap*, int, int)
0x1a6d70 Splash::setTransfer(unsigned char*, unsigned char*, unsigned char*, unsigned char*)
0x1a6d80 Splash::setOverprintMask(unsigned int, bool)
0x1a6da0 Splash::saveState()
0x1a6de0 Splash::restoreState()
0x1a6e10 Splash::~Splash()
0x1a6e90 Splash::clear(unsigned char*, unsigned char)
0x1a7210 Splash::strokeNarrow(SplashPath*)
0x1a81d0 Splash::flattenCurve(double, double, double, double, double, double, double, double, double*, double, SplashPath*)
0x1a85d0 Splash::flattenPath(SplashPath*, double*, double)
0x1a8740 Splash::makeDashedPath(SplashPath*)
0x1a8cc0 Splash::pathAllOutside(SplashPath*)
0x1a9050 Splash::fillWithPattern(SplashPath*, bool, SplashPattern*, double)
0x1a9e60 Splash::xorFill(SplashPath*, bool)
0x1aa440 Splash::fillGlyph2(int, int, SplashGlyphBitmap*, bool)
0x1ab3b0 Splash::fillChar(double, double, int, SplashFont*)
0x1ab610 Splash::fillGlyph(double, double, SplashGlyphBitmap*)
0x1ab720 Splash::scaleMaskYdXd(bool (*)(void*, unsigned char*), void*, int, int, int, int, SplashBitmap*)
0x1ab960 Splash::scaleMaskYdXu(bool (*)(void*, unsigned char*), void*, int, int, int, int, SplashBitmap*)
0x1abb60 Splash::scaleMaskYuXd(bool (*)(void*, unsigned char*), void*, int, int, int, int, SplashBitmap*)
0x1abd50 Splash::scaleMaskYuXu(bool (*)(void*, unsigned char*), void*, int, int, int, int, SplashBitmap*)
0x1abee0 Splash::scaleMask(bool (*)(void*, unsigned char*), void*, int, int, int, int)
0x1abff0 Splash::arbitraryTransformMask(bool (*)(void*, unsigned char*), void*, int, int, double*, bool)
0x1adeb0 Splash::blitMask(SplashBitmap*, int, int, SplashClipResult)
0x1ae890 Splash::scaleImageYdXd(bool (*)(void*, unsigned char*, unsigned char*), void*, SplashColorMode, int, bool, int, int, int, int, SplashBitmap*)
0x1aeda0 Splash::scaleImageYdXu(bool (*)(void*, unsigned char*, unsigned char*), void*, SplashColorMode, int, bool, int, int, int, int, SplashBitmap*)
0x1af260 Splash::scaleImageYuXd(bool (*)(void*, unsigned char*, unsigned char*), void*, SplashColorMode, int, bool, int, int, int, int, SplashBitmap*)
0x1af6d0 Splash::scaleImageYuXu(bool (*)(void*, unsigned char*, unsigned char*), void*, SplashColorMode, int, bool, int, int, int, int, SplashBitmap*)
0x1afb00 Splash::scaleImageYuXuBilinear(bool (*)(void*, unsigned char*, unsigned char*), void*, SplashColorMode, int, bool, int, int, int, int, SplashBitmap*)
0x1b0150 Splash::scaleImage(bool (*)(void*, unsigned char*, unsigned char*), void*, SplashColorMode, int, bool, int, int, int, int, bool, bool)
0x1b03e0 Splash::arbitraryTransformImage(bool (*)(void*, unsigned char*, unsigned char*), void*, SplashColorMode, int, bool, int, int, double*, bool, bool)
0x1b26c0 Splash::vertFlipImage(SplashBitmap*, int, int, int)
0x1b27f0 Splash::fillImageMask(bool (*)(void*, unsigned char*), void*, int, int, double*, bool)
0x1b2c20 Splash::blitImageClipped(SplashBitmap*, bool, int, int, int, int, int, int)
0x1b3a50 Splash::blitImage(SplashBitmap*, bool, int, int, SplashClipResult)
0x1b3fe0 Splash::drawImage(bool (*)(void*, unsigned char*, unsigned char*), void*, SplashColorMode, bool, int, int, double*, bool, bool)
0x1b4830 Splash::blitImage(SplashBitmap*, bool, int, int)
0x1b48a0 Splash::composite(SplashBitmap*, int, int, int, int, int, int, bool, bool, bool, double)
0x1b5470 Splash::compositeBackground(unsigned char*)
0x1b58a0 Splash::gouraudTriangleShadedFill(SplashGouraudColor*)
0x1b6c20 Splash::blitTransparent(SplashBitmap*, int, int, int, int, int, int)
0x1b6fb0 Splash::makeStrokePath(SplashPath*, double, bool)
0x1b8350 Splash::strokeWide(SplashPath*, double)
0x1b83b0 Splash::dumpPath(SplashPath*)
0x1b8470 Splash::stroke(SplashPath*)
0x1b8690 Splash::fill(SplashPath*, bool)
0x1b86f0 Splash::dumpXPath(SplashXPath*)
0x1b87a0 Splash::shadedFill(SplashPath*, bool, SplashPattern*)
0x1b9430 Splash::pipeInit(SplashPipe*, int, int, SplashPattern*, unsigned char*, unsigned char, bool, bool, bool, unsigned char)
0x1b9910 Splash::pipeSetXY(SplashPipe*, int, int)
0x1b9a50 Splash::drawPixel(SplashPipe*, int, int, bool)
0x1b9d30 Splash::drawAAPixel(SplashPipe*, int, int)
0x1ba050 Splash::drawSpan(SplashPipe*, int, int, int, bool)
0x1ba400 SplashBitmap::SplashBitmap(int, int, int, SplashColorMode, bool, bool, GooList*)
0x1ba5b0 SplashBitmap::copy(SplashBitmap*)
0x1ba690 SplashBitmap::~SplashBitmap()
0x1ba720 SplashBitmap::writePNMFile(_IO_FILE*)
0x1ba990 SplashBitmap::writePNMFile(char*)
0x1ba9e0 SplashBitmap::writeAlphaPGMFile(char*)
0x1baa60 SplashBitmap::getPixel(int, int, unsigned char*)
0x1bab60 SplashBitmap::getAlpha(int, int)
0x1bab80 SplashBitmap::takeData()
0x1bab90 SplashBitmap::getRGBLine(int, unsigned char*)
0x1bafb0 SplashBitmap::getXBGRLine(int, unsigned char*)
0x1bb3d0 SplashBitmap::convertToXBGR()
0x1bb490 SplashBitmap::writeImgFile(ImgWriter*, _IO_FILE*, int, int)
0x1bb8f0 SplashBitmap::writeImgFile(SplashImageFileFormat, _IO_FILE*, int, int, char const*)
0x1bba80 SplashBitmap::writeImgFile(SplashImageFileFormat, char*, int, int, char const*)
0x1bbaf0 SplashClip::SplashClip(double, double, double, double, bool)
0x1bbc30 SplashClip::SplashClip(SplashClip*)
0x1bbdb0 SplashClip::~SplashClip()
0x1bbe40 SplashClip::grow(int)
0x1bbec0 SplashClip::resetToRect(double, double, double, double)
0x1bc0d0 SplashClip::clipToRect(double, double, double, double)
0x1bc320 SplashClip::clipToPath(SplashPath*, double*, double, bool)
0x1bc6b0 SplashClip::testRect(int, int, int, int)
0x1bc750 SplashClip::testSpan(int, int, int)
0x1bc8c0 SplashClip::clipAALine(SplashBitmap*, int*, int*, int, bool)
0x1bcc00 SplashFTFont::~SplashFTFont()
0x1bcc20 SplashFTFont::~SplashFTFont()
0x1bcc40 SplashFTFont::getGlyphAdvance(int)
0x1bcda0 SplashFTFont::makeGlyph(int, int, int, SplashGlyphBitmap*, int, int, SplashClip*, SplashClipResult*)
0x1bd080 SplashFTFont::getGlyphPath(int)
0x1bd210 glyphPathCubicTo(FT_Vector_ const*, FT_Vector_ const*, FT_Vector_ const*, void*)
0x1bd2a0 glyphPathConicTo(FT_Vector_ const*, FT_Vector_ const*, void*)
0x1bd380 glyphPathLineTo(FT_Vector_ const*, void*)
0x1bd3d0 glyphPathMoveTo(FT_Vector_ const*, void*)
0x1bd440 SplashFTFont::SplashFTFont(SplashFTFontFile*, double*, double*)
0x1bd8d0 SplashFTFont::getGlyph(int, int, int, SplashGlyphBitmap*, int, int, SplashClip*, SplashClipResult*)
0x1bd8e0 SplashFTFontEngine::SplashFTFontEngine(bool, bool, bool, FT_LibraryRec_*)
0x1bd950 SplashFTFontEngine::init(bool, bool, bool)
0x1bd9b0 SplashFTFontEngine::~SplashFTFontEngine()
0x1bd9c0 SplashFTFontEngine::loadType1Font(SplashFontFileID*, SplashFontSrc*, char const**)
0x1bd9d0 SplashFTFontEngine::loadType1CFont(SplashFontFileID*, SplashFontSrc*, char const**)
0x1bd9e0 SplashFTFontEngine::loadOpenTypeT1CFont(SplashFontFileID*, SplashFontSrc*, char const**)
0x1bd9f0 SplashFTFontEngine::loadCIDFont(SplashFontFileID*, SplashFontSrc*)
0x1bdad0 SplashFTFontEngine::loadOpenTypeCFFFont(SplashFontFileID*, SplashFontSrc*, int*, int)
0x1bdbd0 SplashFTFontEngine::loadTrueTypeFont(SplashFontFileID*, SplashFontSrc*, int*, int, int)
0x1bdbe0 SplashFTFontFile::~SplashFTFontFile()
0x1bdc20 SplashFTFontFile::~SplashFTFontFile()
0x1bdc40 SplashFTFontFile::makeFont(double*, double*)
0x1bdc90 SplashFTFontFile::SplashFTFontFile(SplashFTFontEngine*, SplashFontFileID*, SplashFontSrc*, FT_FaceRec_*, int*, int, bool, bool)
0x1bdd00 SplashFTFontFile::loadType1Font(SplashFTFontEngine*, SplashFontFileID*, SplashFontSrc*, char const**)
0x1bde40 SplashFTFontFile::loadCIDFont(SplashFTFontEngine*, SplashFontFileID*, SplashFontSrc*, int*, int)
0x1bdf00 SplashFTFontFile::loadTrueTypeFont(SplashFTFontEngine*, SplashFontFileID*, SplashFontSrc*, int*, int, int)
0x1bdfc0 SplashFont::getGlyph(int, int, int, SplashGlyphBitmap*, int, int, SplashClip*, SplashClipResult*)
0x1be3a0 SplashFont::SplashFont(SplashFontFile*, double*, double*, bool)
0x1be470 SplashFont::initCache()
0x1be610 SplashFont::~SplashFont()
0x1be660 SplashFont::~SplashFont()
0x1be680 SplashFontEngine::SplashFontEngine(bool, bool, bool, bool)
0x1be6e0 SplashFontEngine::~SplashFontEngine()
0x1be740 SplashFontEngine::getFontFile(SplashFontFileID*)
0x1be7b0 SplashFontEngine::loadType1Font(SplashFontFileID*, SplashFontSrc*, char const**)
0x1be800 SplashFontEngine::loadType1CFont(SplashFontFileID*, SplashFontSrc*, char const**)
0x1be850 SplashFontEngine::loadOpenTypeT1CFont(SplashFontFileID*, SplashFontSrc*, char const**)
0x1be8a0 SplashFontEngine::loadCIDFont(SplashFontFileID*, SplashFontSrc*)
0x1be8f0 SplashFontEngine::loadOpenTypeCFFFont(SplashFontFileID*, SplashFontSrc*, int*, int)
0x1be940 SplashFontEngine::loadTrueTypeFont(SplashFontFileID*, SplashFontSrc*, int*, int, int)
0x1be990 SplashFontEngine::getAA()
0x1be9b0 SplashFontEngine::setAA(bool)
0x1be9d0 SplashFontEngine::getFont(SplashFontFile*, double*, double*)
0x1bec80 SplashFontFile::incRefCnt()
0x1bec90 SplashFontFile::decRefCnt()
0x1becb0 SplashFontSrc::SplashFontSrc()
0x1becd0 SplashFontSrc::~SplashFontSrc()
0x1bed30 SplashFontSrc::ref()
0x1bed40 SplashFontFile::SplashFontFile(SplashFontFileID*, SplashFontSrc*)
0x1bed70 SplashFontSrc::unref()
0x1beda0 SplashFontFile::~SplashFontFile()
0x1bede0 SplashFontFile::~SplashFontFile()
0x1bee00 SplashFontSrc::setFile(GooString*, bool)
0x1bee50 SplashFontSrc::setFile(char const*, bool)
0x1beea0 SplashFontSrc::setBuf(char*, int, bool)
0x1beeb0 SplashFontFileID::SplashFontFileID()
0x1beec0 SplashFontFileID::~SplashFontFileID()
0x1beed0 SplashFontFileID::~SplashFontFileID()
0x1beef0 SplashPath::SplashPath()
0x1bef30 SplashPath::SplashPath(SplashPath*)
0x1befe0 SplashPath::~SplashPath()
0x1bf000 SplashPath::grow(int)
0x1bf060 SplashPath::append(SplashPath*)
0x1bf0f0 SplashPath::moveTo(double, double)
0x1bf170 SplashPath::lineTo(double, double)
0x1bf1e0 SplashPath::curveTo(double, double, double, double, double, double)
0x1bf2d0 SplashPath::close(bool)
0x1bf370 SplashPath::addStrokeAdjustHint(int, int, int, int)
0x1bf400 SplashPath::offset(double, double)
0x1bf450 SplashPath::getCurPt(double*, double*)
0x1bf490 SplashSolidColor::getColor(int, int, unsigned char*)
0x1bf4b0 SplashPattern::SplashPattern()
0x1bf4c0 SplashPattern::~SplashPattern()
0x1bf4d0 SplashSolidColor::~SplashSolidColor()
0x1bf4f0 SplashSolidColor::~SplashSolidColor()
0x1bf510 SplashPattern::~SplashPattern()
0x1bf530 SplashSolidColor::SplashSolidColor(unsigned char*)
0x1bf570 SplashSolidColor::testPosition(int, int)
0x1bf580 SplashSolidColor::isStatic()
0x1bf590 SplashSolidColor::isCMYK()
0x1bf5a0 SplashSolidColor::copy()
0x1bf5d0 void std::__unguarded_linear_insert<SplashScreenPoint*, __gnu_cxx::__ops::_Val_comp_iter<cmpDistancesFunctor> >(SplashScreenPoint*, __gnu_cxx::__ops::_Val_comp_iter<cmpDistancesFunctor>) [clone .isra.5]
0x1bf610 void std::__insertion_sort<SplashScreenPoint*, __gnu_cxx::__ops::_Iter_comp_iter<cmpDistancesFunctor> >(SplashScreenPoint*, SplashScreenPoint*, __gnu_cxx::__ops::_Iter_comp_iter<cmpDistancesFunctor>) [clone .isra.8]
0x1bf6c0 SplashScreen::SplashScreen(SplashScreenParams*)
0x1bf6f0 SplashScreen::buildDispersedMatrix(int, int, int, int, int)
0x1bf820 SplashScreen::buildClusteredMatrix()
0x1bfa90 SplashScreen::distance(int, int, int, int)
0x1bfad0 SplashScreen::SplashScreen(SplashScreen*)
0x1bfb30 SplashScreen::~SplashScreen()
0x1bfb40 SplashScreen::buildSCDMatrix(int)
0x1c0260 SplashScreen::createMatrix()
0x1c0510 void std::__adjust_heap<SplashScreenPoint*, long, SplashScreenPoint, __gnu_cxx::__ops::_Iter_comp_iter<cmpDistancesFunctor> >(SplashScreenPoint*, long, long, SplashScreenPoint, __gnu_cxx::__ops::_Iter_comp_iter<cmpDistancesFunctor>)
0x1c06a0 void std::__heap_select<SplashScreenPoint*, __gnu_cxx::__ops::_Iter_comp_iter<cmpDistancesFunctor> >(SplashScreenPoint*, SplashScreenPoint*, SplashScreenPoint*, __gnu_cxx::__ops::_Iter_comp_iter<cmpDistancesFunctor>)
0x1c07c0 void std::__introsort_loop<SplashScreenPoint*, long, __gnu_cxx::__ops::_Iter_comp_iter<cmpDistancesFunctor> >(SplashScreenPoint*, SplashScreenPoint*, long, __gnu_cxx::__ops::_Iter_comp_iter<cmpDistancesFunctor>)
0x1c09e0 SplashState::SplashState(int, int, bool, SplashScreenParams*)
0x1c0be0 SplashState::SplashState(int, int, bool, SplashScreen*)
0x1c0de0 SplashState::SplashState(SplashState*)
0x1c1100 SplashState::~SplashState()
0x1c11a0 SplashState::setStrokePattern(SplashPattern*)
0x1c11d0 SplashState::setFillPattern(SplashPattern*)
0x1c1200 SplashState::setScreen(SplashScreen*)
0x1c1230 SplashState::setLineDash(double*, int, double)
0x1c12b0 SplashState::setSoftMask(SplashBitmap*)
0x1c1300 SplashState::setTransfer(unsigned char*, unsigned char*, unsigned char*, unsigned char*)
0x1c1420 SplashXPath::strokeAdjust(SplashXPathAdjust*, double*, double*)
0x1c1510 SplashXPath::SplashXPath(SplashXPath*)
0x1c1560 SplashXPath::~SplashXPath()
0x1c1570 SplashXPath::grow(int)
0x1c15c0 SplashXPath::addSegment(double, double, double, double)
0x1c16e0 SplashXPath::addCurve(double, double, double, double, double, double, double, double, double, bool, bool, bool, bool)
0x1c1a10 SplashXPath::SplashXPath(SplashPath*, double*, double, bool, bool, int)
0x1c2140 SplashXPath::aaScale()
0x1c21c0 SplashXPath::sort()
0x1c2290 SplashXPathSeg* std::__unguarded_partition<SplashXPathSeg*, __gnu_cxx::__ops::_Iter_comp_iter<cmpXPathSegsFunctor> >(SplashXPathSeg*, SplashXPathSeg*, SplashXPathSeg*, __gnu_cxx::__ops::_Iter_comp_iter<cmpXPathSegsFunctor>)
0x1c2400 void std::__unguarded_linear_insert<SplashXPathSeg*, __gnu_cxx::__ops::_Val_comp_iter<cmpXPathSegsFunctor> >(SplashXPathSeg*, __gnu_cxx::__ops::_Val_comp_iter<cmpXPathSegsFunctor>)
0x1c2500 void std::__insertion_sort<SplashXPathSeg*, __gnu_cxx::__ops::_Iter_comp_iter<cmpXPathSegsFunctor> >(SplashXPathSeg*, SplashXPathSeg*, __gnu_cxx::__ops::_Iter_comp_iter<cmpXPathSegsFunctor>)
0x1c26a0 void std::__adjust_heap<SplashXPathSeg*, long, SplashXPathSeg, __gnu_cxx::__ops::_Iter_comp_iter<cmpXPathSegsFunctor> >(SplashXPathSeg*, long, long, SplashXPathSeg, __gnu_cxx::__ops::_Iter_comp_iter<cmpXPathSegsFunctor>)
0x1c29f0 void std::__make_heap<SplashXPathSeg*, __gnu_cxx::__ops::_Iter_comp_iter<cmpXPathSegsFunctor> >(SplashXPathSeg*, SplashXPathSeg*, __gnu_cxx::__ops::_Iter_comp_iter<cmpXPathSegsFunctor>)
0x1c2ac0 void std::__introsort_loop<SplashXPathSeg*, long, __gnu_cxx::__ops::_Iter_comp_iter<cmpXPathSegsFunctor> >(SplashXPathSeg*, SplashXPathSeg*, long, __gnu_cxx::__ops::_Iter_comp_iter<cmpXPathSegsFunctor>)
0x1c3090 void std::__unguarded_linear_insert<SplashIntersect*, __gnu_cxx::__ops::_Val_comp_iter<cmpIntersectFunctor> >(SplashIntersect*, __gnu_cxx::__ops::_Val_comp_iter<cmpIntersectFunctor>) [clone .isra.10]
0x1c30e0 void std::__insertion_sort<SplashIntersect*, __gnu_cxx::__ops::_Iter_comp_iter<cmpIntersectFunctor> >(SplashIntersect*, SplashIntersect*, __gnu_cxx::__ops::_Iter_comp_iter<cmpIntersectFunctor>) [clone .isra.13]
0x1c31a0 SplashXPathScanner::~SplashXPathScanner()
0x1c31c0 SplashXPathScanner::getBBoxAA(int*, int*, int*, int*)
0x1c3210 SplashXPathScanner::getSpanBounds(int, int*, int*)
0x1c32a0 SplashXPathScanner::test(int, int)
0x1c3350 SplashXPathScanner::testSpan(int, int, int)
0x1c3490 SplashXPathScanner::getNextSpan(int, int*, int*)
0x1c3590 SplashXPathScanner::addIntersection(double, double, unsigned int, int, int, int)
0x1c36e0 SplashXPathScanner::renderAALine(SplashBitmap*, int*, int*, int, bool)
0x1c39b0 SplashXPathScanner::clipAALine(SplashBitmap*, int*, int*, int)
0x1c3c90 SplashXPathScanner::computeIntersections()
0x1c4310 SplashXPathScanner::SplashXPathScanner(SplashXPath*, bool, int, int)
0x1c45d0 void std::__adjust_heap<SplashIntersect*, long, SplashIntersect, __gnu_cxx::__ops::_Iter_comp_iter<cmpIntersectFunctor> >(SplashIntersect*, long, long, SplashIntersect, __gnu_cxx::__ops::_Iter_comp_iter<cmpIntersectFunctor>)
0x1c4770 void std::__heap_select<SplashIntersect*, __gnu_cxx::__ops::_Iter_comp_iter<cmpIntersectFunctor> >(SplashIntersect*, SplashIntersect*, SplashIntersect*, __gnu_cxx::__ops::_Iter_comp_iter<cmpIntersectFunctor>)
