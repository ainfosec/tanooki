0x000ba0e0 gmallocn@plt                                                (Quality:       6    4603    4597   90536   90542   95139)
0x00194880 gmallocn                                                    (Quality:      10    4589    4579   90545   90535   95134)
0x000b6730 PSOutputDev::writePSString(GooString*)@plt                  (Quality:      12    4359    4347   78360   78372   82719)
0x00176500 PSOutputDev::writePSString(GooString*)                      (Quality:       4    4347    4343   78370   78366   82717)
0x00176820 PSOutputDev::drawString(GfxState*, GooString*)              (Quality:       3    4345    4342   78372   78369   82717)
0x00172410 PSOutputDev::updateTextShift(GfxState*, double)             (Quality:       8    3888    3880   69692   69700   73580)
0x000baf80 Gfx::checkArg(Object*, TchkType)@plt                        (Quality:       0    3140    3140   58945   58945   62085)
0x000fd820 Gfx::checkArg(Object*, TchkType)                            (Quality:       2    3132    3130   58946   58948   62078)
0x000ba240 greallocn@plt                                               (Quality:       3    2604    2601   64090   64087   66694)
0x00194c40 greallocn                                                   (Quality:       7    2607    2600   64086   64093   66693)
0x00192680 GooTimer::start()                                           (Quality:       3    2077    2074   40004   40007   42081)
0x000ba9c0 GooTimer::GooTimer()@plt                                    (Quality:       1    2075    2074   40007   40008   42082)
0x000fd900 Gfx::execOp(Object*, Object*, int)                          (Quality:       2    2075    2073   40005   40007   42080)
0x000fd780 Gfx::findOp(char*)                                          (Quality:       2    2075    2073   40006   40004   42081)
0x000ba3f0 gettimeofday@plt                                            (Quality:       1    2074    2073   40007   40006   42081)
0x000b8d60 Gfx::findOp(char*)@plt                                      (Quality:       0    2072    2072   40005   40005   42077)
0x000bab90 Gfx::execOp(Object*, Object*, int)@plt                      (Quality:       3    2075    2072   40005   40008   42080)
0x000b9f50 GooTimer::start()@plt                                       (Quality:       1    2070    2069   40006   40005   42076)
0x001926a0 GooTimer::GooTimer()                                        (Quality:       3    2072    2069   40003   40006   42075)
0x000ba500 realloc@plt                                                 (Quality:       0    1549    1549   32346   32346   33895)
0x000bb1d0 FileStream::fillBuf()@plt                                   (Quality:       0    1275    1275   56483   56483   57758)
0x000b8df0 FoFiType1::getNextLine(char*)@plt                           (Quality:       1    1271    1270   63985   63986   65256)
0x0019ae90 FoFiType1::getNextLine(char*)                               (Quality:       3    1270    1267   63987   63984   65257)
0x00191700 GooFile::read(char*, int, long long) const                  (Quality:       1    1267    1266   56481   56482   57748)
0x000b8cb0 GooFile::read(char*, int, long long) const@plt              (Quality:       5    1270    1265   56485   56480   57755)
0x000ba510 pread64@plt                                                 (Quality:       3    1265    1262   56486   56483   57751)
0x0015b8e0 FileStream::fillBuf()                                       (Quality:       4    1261    1257   56488   56484   57749)
0x000b5bc0 strncpy@plt                                                 (Quality:       2    1232    1230   49477   49479   50709)
0x000b9210 NameToCharCode::lookup(char const*)@plt                     (Quality:       1    1224    1223   45011   45010   46235)
0x000b8330 GlobalParams::mapNameToUnicodeText(char const*)@plt         (Quality:       3    1221    1218   45011   45014   46232)
0x000b9a00 NameToCharCode::hash(char const*)@plt                       (Quality:       6    1223    1217   58317   58323   59540)
0x001335a0 GlobalParams::mapNameToUnicodeText(char const*)             (Quality:       4    1219    1215   45012   45016   46231)
0x00149dd0 NameToCharCode::hash(char const*)                           (Quality:       2    1216    1214   58324   58322   59540)
0x00149f70 NameToCharCode::lookup(char const*)                         (Quality:       2    1215    1213   45013   45015   46228)
0x000b5670 pthread_mutexattr_destroy@plt                               (Quality:       1    1078    1077   51309   51310   52387)
0x000bafd0 pthread_mutexattr_settype@plt                               (Quality:       1    1073    1072   51315   51314   52388)
0x000b9480 pthread_mutexattr_init@plt                                  (Quality:       1    1071    1070   51314   51313   52385)
0x000b9af0 pthread_mutex_init@plt                                      (Quality:      10    1080    1070   51308   51318   52388)
0x000b8810 pthread_mutex_destroy@plt                                   (Quality:       2    1069    1067   51316   51314   52385)
0x000ba910 Array::Array(XRef*)@plt                                     (Quality:       1     970     969   28186   28185   29156)
0x000dde70 Array::Array(XRef*)                                         (Quality:       2     968     966   28188   28186   29156)
0x000dded0 Array::~Array()                                             (Quality:       2     965     963   28188   28186   29153)
0x000b43f0 Array::~Array()@plt                                         (Quality:       3     965     962   28191   28188   29156)
0x000b4d10 Array::decRef()@plt                                         (Quality:       0     945     945   23254   23254   24199)
0x000ddf50 Array::decRef()                                             (Quality:       2     945     943   23252   23254   24197)
0x00149ff0 Object::initArray(XRef*)                                    (Quality:       2     931     929   20782   20784   21713)
0x000b7ff0 Object::initArray(XRef*)@plt                                (Quality:       2     927     925   20786   20784   21713)
0x00110d10 Gfx::opShowSpaceText(Object*, int)                          (Quality:       1     924     923   17348   17349   18272)
0x000fb030 Gfx::opTextMoveSet(Object*, int)                            (Quality:       3     681     678   10613   10610   11294)
0x000ba860 GfxState::getFontTransMat(double*, double*, double*, double*)@plt (Quality:       2     462     460    8675    8677    9137)
0x00156ea0 PreScanOutputDev::endStringOp(GfxState*)                    (Quality:       0     460     460    8675    8675    9135)
0x000b5400 PreScanOutputDev::check(GfxColorSpace*, GfxColor*, double, GfxBlendMode)@plt (Quality:       1     461     460    8761    8762    9222)
0x00157200 PreScanOutputDev::check(GfxColorSpace*, GfxColor*, double, GfxBlendMode) (Quality:       2     462     460    8761    8763    9223)
0x00118d10 GfxDeviceGrayColorSpace::getRGB(GfxColor*, GfxRGB*)         (Quality:       1     460     459    8762    8761    9222)
0x001281c0 GfxState::getFontTransMat(double*, double*, double*, double*) (Quality:       2     459     457    8675    8677    9134)
0x00157450 PreScanOutputDev::beginStringOp(GfxState*)                  (Quality:       3     456     453    8678    8675    9134)
0x001723e0 PSOutputDev::updateTextPos(GfxState*)                       (Quality:       2     424     422    8012    8010    8436)
0x000b7fb0 GooString::formatInt(long long, char*, int, bool, int, int, char**, int*, bool)@plt (Quality:       0     281     281    6214    6214    6495)
0x00192e60 GooString::formatInt(long long, char*, int, bool, int, int, char**, int*, bool) (Quality:       2     281     279    6215    6217    6496)
0x000b98f0 GfxFont::decRefCnt()@plt                                    (Quality:       0     215     215    5128    5128    5343)
0x00112480 GfxFont::decRefCnt()                                        (Quality:       0     215     215    5128    5128    5343)
0x00128480 GfxState::setFont(GfxFont*, double)                         (Quality:       0     212     212    4013    4013    4225)
0x000bab50 GfxFont::incRefCnt()@plt                                    (Quality:       0     212     212    4012    4012    4224)
0x00112470 GfxFont::incRefCnt()                                        (Quality:       0     212     212    4013    4013    4225)
0x000fc2d0 Gfx::opSetFont(Object*, int)                                (Quality:       1     213     212    4013    4012    4226)
0x000fc270 GfxResources::lookupFont(char*)                             (Quality:       0     212     212    4012    4012    4224)
0x000baec0 GfxState::setFont(GfxFont*, double)@plt                     (Quality:       1     212     211    4012    4013    4224)
0x001166a0 GfxFontDict::lookup(char*)                                  (Quality:       2     213     211    4012    4014    4225)
0x000bb370 GfxResources::lookupFont(char*)@plt                         (Quality:       1     212     211    4013    4012    4225)
0x000b8b10 GfxFontDict::lookup(char*)@plt                              (Quality:       2     212     210    4012    4014    4224)
0x000b9960 PSTokenizer::getChar()@plt                                  (Quality:       3     211     208   75894   75897   76105)
0x000b4e10 FlateStream::compHuffmanCodes(int*, int, FlateHuffmanTab*)@plt (Quality:       1     208     207    8497    8496    8705)
0x0015e6a0 FlateStream::compHuffmanCodes(int*, int, FlateHuffmanTab*)  (Quality:       2     209     207    8496    8498    8705)
0x00157800 PSTokenizer::getChar()                                      (Quality:       4     206     202   75893   75897   76099)
0x000b9150 Dict::lookup(char const*, Object*, int)@plt                 (Quality:       2     183     181   40062   40064   40245)
0x000ec880 Dict::lookup(char const*, Object*, int)                     (Quality:       3     179     176   40064   40067   40243)
0x000f2160 std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase(std::_Rb_tree_node<int>*) (Quality:       0     151     151     151     151       0)
0x000ebec0 Dict::add(char*, Object*)                                   (Quality:       2     151     149   46406   46404   46557)
0x000b8540 Dict::add(char*, Object*)@plt                               (Quality:       1     148     147   46408   46409   46556)
0x001721f0 PSOutputDev::updateFont(GfxState*)                          (Quality:       0     128     128    2643    2643    2771)
0x000bb320 PSTokenizer::getToken(char*, int, int*)@plt                 (Quality:       3     107     104   39062   39065   39169)
0x000fa320 Gfx::opTextNextLine(Object*, int)                           (Quality:       0     104     104    3486    3486    3590)
0x00157820 PSTokenizer::getToken(char*, int, int*)                     (Quality:       1     103     102   39066   39067   39169)
0x00150780 Parser::getObj(Object*, int)                                (Quality:       1      96      95   21759   21758   21855)
0x0015f140 FlateStream::lookChar()                                     (Quality:       1      93      92    2221    2220    2128)
0x000ba7c0 Parser::getObj(Object*, int)@plt                            (Quality:       5      93      88   21761   21756   21854)
0x00159220 FileStream::close()                                         (Quality:       1      89      88   21537   21538   21626)
0x0015f2a0 FlateStream::getChars(int, unsigned char*)                  (Quality:       0      85      85    5569    5569    5484)
0x0015a4d0 Stream::decRef()                                            (Quality:       1      85      84   18326   18327   18411)
0x000baaf0 Stream::decRef()@plt                                        (Quality:       2      86      84   18326   18328   18412)
0x00160c80 FlateStream::hasGetChars()                                  (Quality:       1      84      83    5568    5569    5484)
0x000b4b50 grealloc@plt                                                (Quality:       0      83      83    7424    7424    7341)
0x00194790 grealloc                                                    (Quality:       0      83      83    7424    7424    7341)
0x000bb2a0 FlateStream::readDynamicCodes()@plt                         (Quality:       0      69      69    2832    2832    2901)
0x0015e960 FlateStream::readDynamicCodes()                             (Quality:       1      68      67    2833    2832    2901)
0x000ebe90 Dict::decRef()                                              (Quality:       0      66      66    8148    8148    8214)
0x000baee0 Dict::decRef()@plt                                          (Quality:       2      68      66    8148    8150    8216)
0x00168850 Object::getInt() [clone .isra.13]                           (Quality:       1      64      63   14505   14506   14569)
0x000b7360 Stream::~Stream()@plt                                       (Quality:       0      61      61   14299   14299   14360)
0x000fb3d0 Gfx::opSetTextMatrix(Object*, int)                          (Quality:       0      58      58    1632    1632    1690)
0x0015a460 Stream::~Stream()                                           (Quality:       2      60      58   14297   14299   14357)
0x0015a410 Stream::Stream()                                            (Quality:       1      58      57   14298   14297   14356)
0x00194470 GooString::cmp(char const*) const                           (Quality:       0      57      57   17588   17588   17531)
0x000b7610 GooString::cmp(char const*) const@plt                       (Quality:       1      58      57   17588   17589   17530)
0x000ba3e0 FlateStream::loadFixedCodes()@plt                           (Quality:       0      56      56     673     673     617)
0x0015e660 FlateStream::loadFixedCodes()                               (Quality:       0      56      56     673     673     617)
0x000bba00 Stream::Stream()@plt                                        (Quality:       3      58      55   14298   14301   14356)
0x000b9a80 BaseStream::BaseStream(Object*, long long)@plt              (Quality:       0      47      47   10777   10777   10824)
0x000b45d0 FileStream::FileStream(GooFile*, long long, bool, long long, Object*)@plt (Quality:       0      47      47   10775   10775   10822)
0x000faaf0 Gfx::opSetCharSpacing(Object*, int)                         (Quality:       0      46      46     686     686     732)
0x0014a090 Object::initStream(Stream*)                                 (Quality:       0      45      45   10775   10775   10820)
0x000b7f30 FileStream::close()@plt                                     (Quality:       1      46      45   10775   10776   10821)
0x0015b7c0 FileStream::FileStream(GooFile*, long long, bool, long long, Object*) (Quality:       1      46      45   10776   10775   10822)
0x0015a5c0 BaseStream::BaseStream(Object*, long long)                  (Quality:       1      45      44   10777   10776   10822)
0x000b54f0 Object::initStream(Stream*)@plt                             (Quality:       1      45      44   10775   10774   10820)
0x0015a640 FileStream::~FileStream()                                   (Quality:       1      45      44   10777   10776   10822)
0x000b8250 BaseStream::~BaseStream()@plt                               (Quality:       2      45      43   10775   10777   10820)
0x0015b880 FileStream::makeSubStream(long long, bool, long long, Object*) (Quality:       2      45      43   10775   10777   10820)
0x000ba950 FileStream::~FileStream()@plt                               (Quality:       1      43      42   10777   10776   10820)
0x001115b0 readFromStream(void*)                                       (Quality:       3      45      42   17860   17857   17905)
0x001591e0 FileStream::reset()                                         (Quality:       2      44      42   10765   10763   10809)
0x0015a660 FileStream::~FileStream()                                   (Quality:       0      42      42   10778   10778   10820)
0x000bb100 Dict::~Dict()@plt                                           (Quality:       2      43      41    7626    7624    7669)
0x000ebe00 Dict::~Dict()                                               (Quality:       2      43      41    7626    7624    7669)
0x0015a610 BaseStream::~BaseStream()                                   (Quality:       3      43      40   10778   10775   10821)
0x000b45a0 sprintf@plt                                                 (Quality:       0      40      40     636     636     596)
0x0015a4a0 Stream::incRef()                                            (Quality:       1      39      38    7551    7550    7590)
0x001447e0 Lexer::~Lexer()                                             (Quality:       0      37      37    7402    7402    7439)
0x0014a030 Object::initDict(XRef*)                                     (Quality:       0      36      36    7330    7330    7366)
0x000b5d80 Parser::~Parser()@plt                                       (Quality:       0      36      36    7403    7403    7439)
0x000b55c0 Object::initDict(XRef*)@plt                                 (Quality:       1      37      36    7331    7332    7368)
0x000bb8d0 Stream::incRef()@plt                                        (Quality:       2      38      36    7553    7551    7591)
0x000ebbc0 Dict::Dict(XRef*)                                           (Quality:       0      35      35    7330    7330    7365)
0x0014fb60 Parser::~Parser()                                           (Quality:       2      37      35    7402    7404    7439)
0x000b5100 Dict::Dict(XRef*)@plt                                       (Quality:       1      35      34    7330    7331    7365)
0x0014fb00 Parser::Parser(XRef*, Lexer*, bool)                         (Quality:       1      35      34    7404    7403    7439)
0x000b4f40 Lexer::~Lexer()@plt                                         (Quality:       0      34      34    7404    7404    7438)
0x00172250 PSOutputDev::updateTextMat(GfxState*)                       (Quality:       0      33      33     961     961     994)
0x000b6db0 Lexer::Lexer(XRef*, Stream*)@plt                            (Quality:       1      33      32    7255    7254    7288)
0x0016afd0 XRef::fetch(int, int, Object*, int)                         (Quality:       1      32      31    7252    7253    7284)
0x00144610 Lexer::Lexer(XRef*, Stream*)                                (Quality:       1      32      31    7254    7255    7286)
0x000b88c0 XRef::fetch(int, int, Object*, int)@plt                     (Quality:       1      32      31    7252    7253    7284)
0x000b5450 XRef::getEntry(int, bool)@plt                               (Quality:       1      32      31    7253    7252    7285)
0x0016ae40 XRef::getEntry(int, bool)                                   (Quality:       0      31      31    7253    7253    7284)
0x000b4090 Parser::Parser(XRef*, Lexer*, bool)@plt                     (Quality:       2      33      31    7405    7403    7438)
0x000b4960 Dict::incRef()@plt                                          (Quality:       0      26      26     672     672     698)
0x000ebe60 Dict::incRef()                                              (Quality:       0      25      25     672     672     697)
0x0011e420 GfxDeviceGrayColorSpace::GfxDeviceGrayColorSpace()          (Quality:       0      24      24     908     908     932)
0x0011dd70 GfxColorSpace::GfxColorSpace()                              (Quality:       0      24      24     910     910     934)
0x000b9820 GfxColorSpace::GfxColorSpace()@plt                          (Quality:       0      24      24     910     910     934)
0x0011dda0 GfxDeviceGrayColorSpace::~GfxDeviceGrayColorSpace()         (Quality:       0      24      24     908     908     932)
0x000b7aa0 GfxDeviceGrayColorSpace::~GfxDeviceGrayColorSpace()@plt     (Quality:       0      24      24     908     908     932)
0x0011dd90 GfxColorSpace::~GfxColorSpace()                             (Quality:       0      24      24     910     910     934)
0x000b93e0 GfxDeviceGrayColorSpace::GfxDeviceGrayColorSpace()@plt      (Quality:       0      24      24     908     908     932)
0x000b9750 GfxColorSpace::~GfxColorSpace()@plt                         (Quality:       1      24      23     911     910     935)
0x0011ddc0 GfxDeviceGrayColorSpace::~GfxDeviceGrayColorSpace()         (Quality:       1      23      22     909     908     932)
0x0015ec80 FlateStream::startBlock()                                   (Quality:       0      22      22    3719    3719    3741)
0x001722f0 PSOutputDev::updateCharSpace(GfxState*)                     (Quality:       0      22      22     343     343     365)
0x000ec6c0 Dict::lookupNF(char const*, Object*)                        (Quality:       0      21      21    1795    1795    1816)
0x000babd0 Dict::lookupNF(char const*, Object*)@plt                    (Quality:       1      21      20    1795    1796    1816)
0x000b6ca0 strtod@plt                                                  (Quality:       0      19      19    6696    6696    6715)
0x000b4a50 FlateStream::startBlock()@plt                               (Quality:       2      20      18    3721    3719    3741)
0x000b9f90 strtok@plt                                                  (Quality:       0      18      18    6697    6697    6715)
0x00192a50 GooString::GooString(char const*)                           (Quality:       0      17      17    5610    5610    5627)
0x000b71f0 Gfx::bottomGuard()@plt                                      (Quality:       0      16      16     602     602     618)
0x00106d00 Gfx::bottomGuard()                                          (Quality:       0      16      16     602     602     618)
0x0011e440 GfxDeviceGrayColorSpace::copy()                             (Quality:       0      16      16     612     612     628)
0x00160a30 FileStream::getPos()                                        (Quality:       0      15      15    3521    3521    3536)
0x000b9170 Parser::shift(char const*, int)@plt                         (Quality:       0      15      15    3520    3520    3535)
0x000baf00 strtok_r@plt                                                (Quality:       0      15      15    5581    5581    5596)
0x001591d0 FilterStream::close()                                       (Quality:       0      15      15    3507    3507    3522)
0x000b5d90 memset@plt                                                  (Quality:       0      14      14    3514    3514    3528)
0x0015f3a0 Stream::makeFilter(char*, Stream*, Object*, int, Object*)   (Quality:       0      14      14    3520    3520    3534)
0x0015b1e0 FlateStream::~FlateStream()                                 (Quality:       0      13      13    3514    3514    3527)
0x0014fc50 Parser::shift(char const*, int)                             (Quality:       1      14      13    3520    3521    3534)
0x000b8a40 FlateStream::flateReset(bool)@plt                           (Quality:       0      13      13    3505    3505    3518)
0x0015fe50 Stream::addFilters(Object*, int)                            (Quality:       0      13      13    3520    3520    3533)
0x00126060 GfxState::~GfxState()                                       (Quality:       0      13      13     454     454     467)
0x000ddf20 Array::incRef()                                             (Quality:       0      13      13    2470    2470    2483)
0x000b7af0 GooString::GooString(char const*)@plt                       (Quality:       1      14      13    5609    5608    5623)
0x000b6670 XRef::getStreamEnd(long long, long long*)@plt               (Quality:       0      13      13    3520    3520    3533)
0x0015e520 FlateStream::reset()                                        (Quality:       0      13      13    3505    3505    3518)
0x000b9de0 FlateStream::~FlateStream()@plt                             (Quality:       0      13      13    3514    3514    3527)
0x0015b260 FlateStream::~FlateStream()                                 (Quality:       1      14      13    3514    3515    3528)
0x000b4970 Lexer::skipToNextLine()@plt                                 (Quality:       1      13      12    3520    3521    3533)
0x00150cf0 PDFDoc::getLinearization()                                  (Quality:       0      12      12     449     449     461)
0x0015e3f0 FlateStream::FlateStream(Stream*, int, int, int, int)       (Quality:       0      12      12    3515    3515    3527)
0x00150d30 PDFDoc::isLinearized(bool)                                  (Quality:       0      12      12     449     449     461)
0x000b4c00 PDFDoc::isLinearized(bool)@plt                              (Quality:       0      12      12     449     449     461)
0x00169db0 XRef::getStreamEnd(long long, long long*)                   (Quality:       1      13      12    3520    3521    3533)
0x000b6000 Linearization::getLength()@plt                              (Quality:       0      12      12     449     449     461)
0x00160a00 BaseStream::getBaseStream()                                 (Quality:       1      13      12    3520    3521    3533)
0x0015a780 FilterStream::FilterStream(Stream*)                         (Quality:       1      13      12    3523    3524    3536)
0x0014fd30 Parser::makeStream(Object*, unsigned char*, CryptAlgorithm, int, int, int, int, bool) (Quality:       0      12      12    3521    3521    3533)
0x000b5eb0 PDFDoc::getLinearization()@plt                              (Quality:       0      12      12     449     449     461)
0x000b4530 ceil@plt                                                    (Quality:       0      12      12     444     444     456)
0x000baf60 FlateStream::FlateStream(Stream*, int, int, int, int)@plt   (Quality:       1      13      12    3515    3514    3528)
0x001599b0 FileStream::setPos(long long, int)                          (Quality:       1      13      12    3522    3523    3535)
0x000b8a60 Array::incRef()@plt                                         (Quality:       0      12      12    2470    2470    2482)
0x000b8e90 operator delete[](void*)@plt                                (Quality:       0      12      12     449     449     461)
0x000ba9f0 GfxState::~GfxState()@plt                                   (Quality:       0      12      12     454     454     466)
0x00145c80 Linearization::getLength()                                  (Quality:       0      12      12     449     449     461)
0x000b3e20 operator new[](unsigned long)@plt                           (Quality:       0      12      12     449     449     461)
0x0015a7b0 FilterStream::~FilterStream()                               (Quality:       1      12      11    3523    3522    3535)
0x0015e4b0 FlateStream::flateReset(bool)                               (Quality:       1      12      11    3506    3505    3518)
0x00145970 Lexer::skipToNextLine()                                     (Quality:       1      12      11    3521    3520    3533)
0x000b6cd0 Stream::addFilters(Object*, int)@plt                        (Quality:       1      12      11    3521    3520    3533)
0x000b9470 FilterStream::~FilterStream()@plt                           (Quality:       2      13      11    3524    3522    3537)
0x000b6180 FilterStream::FilterStream(Stream*)@plt                     (Quality:       1      12      11    3523    3522    3535)
0x000ebc20 Dict::Dict(Dict*)                                           (Quality:       0      10      10     294     294     304)
0x000ebd00 Dict::copy(XRef*)                                           (Quality:       0      10      10     294     294     304)
0x0014ceb0 PageAttrs::readBox(Dict*, char const*, PDFRectangle*)       (Quality:       0      10      10     415     415     425)
0x000b8d50 GlobalParams::getPrintCommands()@plt                        (Quality:       0      10      10     370     370     380)
0x000b7db0 Dict::Dict(Dict*)@plt                                       (Quality:       0      10      10     294     294     304)
0x000bb500 Dict::copy(XRef*)@plt                                       (Quality:       0      10      10     294     294     304)
0x00134d10 GlobalParams::getPrintCommands()                            (Quality:       0      10      10     370     370     380)
0x000e2ba0 Catalog::getPage(int)                                       (Quality:       0      10      10     371     371     381)
0x000b4a20 Catalog::getPage(int)@plt                                   (Quality:       0      10      10     371     371     381)
0x000b77c0 Stream::makeFilter(char*, Stream*, Object*, int, Object*)@plt (Quality:       2      11       9    3522    3520    3533)
0x000ba250 Parser::makeStream(Object*, unsigned char*, CryptAlgorithm, int, int, int, int, bool)@plt (Quality:       2      11       9    3522    3520    3533)
0x000b51f0 strchr@plt                                                  (Quality:       0       9       9    3348    3348    3357)
0x000b4070 GfxFontDict::GfxFontDict(XRef*, Ref*, Dict*)@plt            (Quality:       0       9       9     216     216     225)
0x000b3eb0 GfxFontDict::~GfxFontDict()@plt                             (Quality:       0       9       9     216     216     225)
0x000b8240 PageAttrs::readBox(Dict*, char const*, PDFRectangle*)@plt   (Quality:       1      10       9     415     416     425)
0x000b9d30 Gfx::restoreState()@plt                                     (Quality:       0       9       9     306     306     315)
0x00116650 GfxFontDict::~GfxFontDict()                                 (Quality:       0       9       9     216     216     225)
0x000b6ac0 PDFRectangle::clipTo(PDFRectangle*)@plt                     (Quality:       0       8       8     296     296     304)
0x000b8310 Object::initDict(Dict*)@plt                                 (Quality:       0       8       8     220     220     228)
0x00106e10 Gfx::popStateGuard()                                        (Quality:       0       8       8     296     296     304)
0x000b6530 Gfx::popStateGuard()@plt                                    (Quality:       0       8       8     296     296     304)
0x0014cd50 PDFRectangle::clipTo(PDFRectangle*)                         (Quality:       0       8       8     296     296     304)
0x000b6140 Catalog::getNumPages()@plt                                  (Quality:       0       8       8     299     299     307)
0x000b7fa0 Gfx::pushStateGuard()@plt                                   (Quality:       0       8       8     296     296     304)
0x000bb6c0 GfxState::GfxState(GfxState*, bool)@plt                     (Quality:       0       8       8     306     306     314)
0x000b97d0 Gfx::saveState()@plt                                        (Quality:       0       8       8     306     306     314)
0x00106d20 Gfx::saveState()                                            (Quality:       0       8       8     306     306     314)
0x00131360 GfxDeviceGrayColorSpace::getNComps()                        (Quality:       0       8       8     296     296     304)
0x00128c30 GfxState::restore()                                         (Quality:       0       8       8     306     306     314)
0x00128bf0 GfxState::save()                                            (Quality:       0       8       8     306     306     314)
0x0014a070 Object::initDict(Dict*)                                     (Quality:       0       8       8     220     220     228)
0x000b8430 GfxState::save()@plt                                        (Quality:       0       8       8     306     306     314)
0x000fa4b0 Gfx::opEndText(Object*, int)                                (Quality:       0       8       8     290     290     298)
0x00106d80 Gfx::restoreState()                                         (Quality:       0       8       8     306     306     314)
0x00126220 GfxState::GfxState(GfxState*, bool)                         (Quality:       0       8       8     306     306     314)
0x000b98a0 GfxState::restore()@plt                                     (Quality:       0       8       8     306     306     314)
0x000fa3c0 Gfx::opBeginText(Object*, int)                              (Quality:       0       8       8     290     290     298)
0x00108180 Gfx::pushStateGuard()                                       (Quality:       1       9       8     296     297     305)
0x000e0a00 Catalog::getNumPages()                                      (Quality:       0       8       8     299     299     307)
0x000b9c60 std::vector<int, std::allocator<int> >::_M_insert_aux(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int const&)@plt (Quality:       0       8       8     298     298     306)
0x00117e00 GfxFontDict::GfxFontDict(XRef*, Ref*, Dict*)                (Quality:       1       9       8     216     217     225)
0x001a4d30 (anonymous namespace)::StreamReader::cmp(int, char const*)  (Quality:       0       7       7    2232    2232    2239)
0x00125140 GfxSubpath::lineTo(double, double)                          (Quality:       0       7       7     542     542     549)
0x000fa580 Gfx::opSetLineCap(Object*, int)                             (Quality:       0       6       6     148     148     154)
0x0014dff0 Page::getAnnots(XRef*)                                      (Quality:       0       6       6     222     222     228)
0x000b44c0 GfxPath::lineTo(double, double)@plt                         (Quality:       0       6       6     534     534     540)
0x000ba5d0 PDFDoc::getNumPages()@plt                                   (Quality:       0       6       6     223     223     229)
0x0019b7d0 FoFiType1::getName()                                        (Quality:       0       6       6    2232    2232    2238)
0x000b9760 PopplerCache::~PopplerCache()@plt                           (Quality:       0       6       6     224     224     230)
0x000fecc0 Gfx::opLineTo(Object*, int)                                 (Quality:       0       6       6     510     510     516)
0x001254d0 GfxPath::lineTo(double, double)                             (Quality:       0       6       6     534     534     540)
0x000b6ec0 Page::getAnnots(XRef*)@plt                                  (Quality:       0       6       6     222     222     228)
0x000bb3f0 GfxSubpath::lineTo(double, double)@plt                      (Quality:       0       6       6     542     542     548)
0x00155f10 PDFDoc::getPage(int)                                        (Quality:       0       6       6     223     223     229)
0x000fa5e0 Gfx::opSetLineJoin(Object*, int)                            (Quality:       0       6       6     148     148     154)
0x0016bbf0 XRef::getCatalog(Object*)                                   (Quality:       0       6       6     225     225     231)
0x001a4bf0 (anonymous namespace)::StreamReader::fillBuf(int, int)      (Quality:       0       6       6    2232    2232    2238)
0x000b46d0 GfxPath::GfxPath()@plt                                      (Quality:       0       6       6     326     326     332)
0x00155030 PDFDoc::getNumPages()                                       (Quality:       0       6       6     224     224     230)
0x00156700 PopplerCache::~PopplerCache()                               (Quality:       0       6       6     224     224     230)
0x00125370 GfxPath::GfxPath()                                          (Quality:       0       6       6     326     326     332)
0x000b8460 PDFDoc::getPage(int)@plt                                    (Quality:       0       6       6     223     223     229)
0x000b3f50 PopplerCache::PopplerCache(int)@plt                         (Quality:       0       6       6     224     224     230)
0x001253b0 GfxPath::~GfxPath()                                         (Quality:       0       6       6     326     326     332)
0x001566a0 PopplerCache::PopplerCache(int)                             (Quality:       0       6       6     224     224     230)
0x000b5cc0 XRef::getCatalog(Object*)@plt                               (Quality:       0       6       6     225     225     231)
0x000b5900 GfxPath::~GfxPath()@plt                                     (Quality:       1       6       5     326     327     332)
0x0016cad0 PSOutputDev::beginTextObject(GfxState*)                     (Quality:       0       5       5     145     145     150)
0x000b56d0 memcmp@plt                                                  (Quality:       1       6       5    2232    2233    2238)
0x000ba320 FoFiType1::getName()@plt                                    (Quality:       1       6       5    2233    2232    2239)
0x00171b10 PSOutputDev::updateLineJoin(GfxState*)                      (Quality:       0       5       5     148     148     153)
0x00171b30 PSOutputDev::updateLineCap(GfxState*)                       (Quality:       0       5       5     148     148     153)
0x00171b70 PSOutputDev::updateLineWidth(GfxState*)                     (Quality:       0       5       5     149     149     154)
0x000fc200 GfxResources::~GfxResources()                               (Quality:       0       4       4     148     148     152)
0x000b8740 Dict::is(char const*)@plt                                   (Quality:       0       4       4     165     165     169)
0x000ec500 Dict::is(char const*)                                       (Quality:       0       4       4     165     165     169)
0x000b88a0 Gfx::Gfx(PDFDoc*, OutputDev*, int, Dict*, double, double, PDFRectangle*, PDFRectangle*, int, bool (*)(void*), void*, XRef*)@plt (Quality:       0       4       4     148     148     152)
0x000b8c50 GfxResources::GfxResources(XRef*, Dict*, GfxResources*)@plt (Quality:       0       4       4     148     148     152)
0x0014ed60 Page::createGfx(OutputDev*, double, double, int, bool, bool, int, int, int, int, bool, bool (*)(void*), void*, XRef*) (Quality:       0       4       4     148     148     152)
0x0014eab0 Page::makeBox(double, double, int, bool, bool, double, double, double, double, PDFRectangle*, bool*) (Quality:       0       4       4     148     148     152)
0x000fa9b0 Gfx::opSetLineWidth(Object*, int)                           (Quality:       1       5       4     151     150     156)
0x000b8700 PopplerObjectCache::~PopplerObjectCache()@plt               (Quality:       0       4       4     148     148     152)
0x000b85e0 Lexer::Lexer(XRef*, Object*)@plt                            (Quality:       0       4       4     148     148     152)
0x000fbf20 GfxResources::GfxResources(XRef*, Dict*, GfxResources*)     (Quality:       0       4       4     148     148     152)
0x0014efe0 Page::displaySlice(OutputDev*, double, double, int, bool, bool, int, int, int, int, bool, bool (*)(void*), void*, bool (*)(Annot*, void*), void*, bool) (Quality:       0       4       4     148     148     152)
0x00180d70 PSOutputDev::upsideDown()                                   (Quality:       0       4       4     148     148     152)
0x000fd600 Gfx::initDisplayProfile()                                   (Quality:       0       4       4     148     148     152)
0x000b4e50 Page::createGfx(OutputDev*, double, double, int, bool, bool, int, int, int, int, bool, bool (*)(void*), void*, XRef*)@plt (Quality:       0       4       4     148     148     152)
0x0014caa0 OutputDev::updateAll(GfxState*)                             (Quality:       0       4       4     148     148     152)
0x000b95f0 Gfx::go(bool)@plt                                           (Quality:       0       4       4     148     148     152)
0x000b4de0 GlobalParams::getProfileCommands()@plt                      (Quality:       0       4       4     148     148     152)
0x0014c650 OutputDev::setDefaultCTM(double*)                           (Quality:       0       4       4     148     148     152)
0x00106d70 Gfx::opSave(Object*, int)                                   (Quality:       0       4       4     158     158     162)
0x00106e00 Gfx::opRestore(Object*, int)                                (Quality:       0       4       4     158     158     162)
0x00176ee0 PSOutputDev::dumpColorSpaceL2(GfxColorSpace*, bool, bool, bool) (Quality:       0       4       4     149     149     153)
0x00107c10 Gfx::popResources()                                         (Quality:       0       4       4     148     148     152)
0x00108070 Gfx::~Gfx()                                                 (Quality:       0       4       4     148     148     152)
0x001081c0 Gfx::Gfx(PDFDoc*, OutputDev*, int, Dict*, double, double, PDFRectangle*, PDFRectangle*, int, bool (*)(void*), void*, XRef*) (Quality:       0       4       4     148     148     152)
0x001569d0 PopplerObjectCache::PopplerObjectCache(int, XRef*)          (Quality:       0       4       4     148     148     152)
0x000b7d50 GfxColorSpace::setupColorProfiles()@plt                     (Quality:       0       4       4     148     148     152)
0x00156a10 PopplerObjectCache::~PopplerObjectCache()                   (Quality:       0       4       4     148     148     152)
0x00108850 Gfx::go(bool)                                               (Quality:       0       4       4     148     148     152)
0x00108d50 Gfx::display(Object*, bool)                                 (Quality:       0       4       4     148     148     152)
0x000ba140 GfxFont::~GfxFont()@plt                                     (Quality:       0       4       4    1116    1116    1120)
0x000baf30 Gfx::popResources()@plt                                     (Quality:       0       4       4     148     148     152)
0x00112150 GfxFont::GfxFont(char const*, Ref, GooString*, GfxFontType, Ref) (Quality:       0       4       4    1116    1116    1120)
0x001122e0 Gfx8BitFont::~Gfx8BitFont()                                 (Quality:       0       4       4    1116    1116    1120)
0x000b5aa0 Page::displaySlice(OutputDev*, double, double, int, bool, bool, int, int, int, int, bool, bool (*)(void*), void*, bool (*)(Annot*, void*), void*, bool)@plt (Quality:       0       4       4     148     148     152)
0x000ba750 Gfx::initDisplayProfile()@plt                               (Quality:       0       4       4     148     148     152)
0x001446e0 Lexer::Lexer(XRef*, Object*)                                (Quality:       0       4       4     148     148     152)
0x000bb540 PopplerObjectCache::PopplerObjectCache(int, XRef*)@plt      (Quality:       0       4       4     148     148     152)
0x000b6ff0 GfxFont::GfxFont(char const*, Ref, GooString*, GfxFontType, Ref)@plt (Quality:       0       4       4    1116    1116    1120)
0x0016d2d0 PSOutputDev::endTextObject(GfxState*)                       (Quality:       0       4       4     145     145     149)
0x0019b860 FoFiType1::undoPFB()                                        (Quality:       0       4       4    1116    1116    1120)
0x00134d40 GlobalParams::getProfileCommands()                          (Quality:       0       4       4     148     148     152)
0x0016d290 PSOutputDev::restoreState(GfxState*)                        (Quality:       0       4       4     153     153     157)
0x0016d270 PSOutputDev::saveState(GfxState*)                           (Quality:       0       4       4     153     153     157)
0x000b69d0 std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase(std::_Rb_tree_node<int>*)@plt (Quality:       0       4       4     151     151     155)
0x000b6620 GfxResources::~GfxResources()@plt                           (Quality:       0       4       4     148     148     152)
0x000b4360 GfxState::GfxState(double, double, PDFRectangle*, int, bool)@plt (Quality:       0       4       4     148     148     152)
0x0011e290 GfxColorSpace::setupColorProfiles()                         (Quality:       0       4       4     148     148     152)
0x000bb110 Gfx::~Gfx()@plt                                             (Quality:       0       4       4     148     148     152)
0x00125b10 GfxState::GfxState(double, double, PDFRectangle*, int, bool) (Quality:       0       4       4     148     148     152)
0x000b5e20 PSOutputDev::dumpColorSpaceL2(GfxColorSpace*, bool, bool, bool)@plt (Quality:       0       4       4     149     149     153)
0x00157760 PreScanOutputDev::upsideDown()                              (Quality:       0       4       4     148     148     152)
0x000b9f70 Gfx::display(Object*, bool)@plt                             (Quality:       0       4       4     148     148     152)
0x001577c0 PSTokenizer::~PSTokenizer()                                 (Quality:       0       3       3    1116    1116    1119)
0x001577b0 PSTokenizer::PSTokenizer(int (*)(void*), void*)             (Quality:       0       3       3    1116    1116    1119)
0x000b4cd0 CharCodeToUnicode::parseCMap1(int (*)(void*), void*, int)@plt (Quality:       0       3       3    1116    1116    1119)
0x001a5040 FoFiIdentifier::identifyStream(int (*)(void*), void*)       (Quality:       1       4       3    1116    1117    1120)
0x000b5ff0 FoFiType1::getEncoding()@plt                                (Quality:       0       3       3    1116    1116    1119)
0x000b61d0 GooHash::startIter(GooHashIter**)@plt                       (Quality:       0       3       3    1125    1125    1128)
0x000b6290 CharCodeToUnicode::CharCodeToUnicode(GooString*, unsigned int*, unsigned int, bool, CharCodeToUnicodeString*, int, int)@plt (Quality:       0       3       3    1116    1116    1119)
0x001a4560 identify((anonymous namespace)::Reader*)                    (Quality:       0       3       3    1116    1116    1119)
0x0019b9e0 FoFiType1::make(char*, int)                                 (Quality:       0       3       3    1116    1116    1119)
0x000b4340 GooHash::getNext(GooHashIter**, GooString**, void**)@plt    (Quality:       0       3       3    1131    1131    1134)
0x000bab20 GfxFont::makeFont(XRef*, char const*, Ref, Dict*)@plt       (Quality:       0       3       3    1116    1116    1119)
0x00117cc0 GfxFont::makeFont(XRef*, char const*, Ref, Dict*)           (Quality:       0       3       3    1116    1116    1119)
0x00113b50 Gfx8BitFont::Gfx8BitFont(XRef*, char const*, Ref, GooString*, GfxFontType, Ref, Dict*) (Quality:       0       3       3    1116    1116    1119)
0x000b6b30 Gfx8BitFont::Gfx8BitFont(XRef*, char const*, Ref, GooString*, GfxFontType, Ref, Dict*)@plt (Quality:       0       3       3    1116    1116    1119)
0x001136b0 GfxFont::readToUnicodeCMap(Dict*, int, CharCodeToUnicode*)  (Quality:       0       3       3    1116    1116    1119)
0x00112d10 GfxFont::readFontDescriptor(XRef*, Dict*)                   (Quality:       0       3       3    1116    1116    1119)
0x001124a0 GfxFont::getFontType(XRef*, Dict*, Ref*)                    (Quality:       0       3       3    1116    1116    1119)
0x000bb420 FoFiType1::make(char*, int)@plt                             (Quality:       0       3       3    1116    1116    1119)
0x0019b7f0 FoFiType1::getEncoding()                                    (Quality:       0       3       3    1116    1116    1119)
0x000bb7e0 FoFiType1::~FoFiType1()@plt                                 (Quality:       0       3       3    1116    1116    1119)
0x000b7210 Gfx8BitFont::~Gfx8BitFont()@plt                             (Quality:       0       3       3    1116    1116    1119)
0x0019b230 FoFiType1::parse()                                          (Quality:       0       3       3    1116    1116    1119)
0x00112380 Gfx8BitFont::~Gfx8BitFont()                                 (Quality:       0       3       3    1116    1116    1119)
0x000b9810 CharCodeToUnicode::decRefCnt()@plt                          (Quality:       0       3       3    1116    1116    1119)
0x000b7a10 Page::makeBox(double, double, int, bool, bool, double, double, double, double, PDFRectangle*, bool*)@plt (Quality:       1       4       3     148     149     152)
0x000b7a50 GfxFont::readFontDescriptor(XRef*, Dict*)@plt               (Quality:       0       3       3    1116    1116    1119)
0x000ba400 FoFiIdentifier::identifyStream(int (*)(void*), void*)@plt   (Quality:       0       3       3    1116    1116    1119)
0x0019ae70 FoFiType1::~FoFiType1()                                     (Quality:       0       3       3    1116    1116    1119)
0x000b48b0 Stream::fillGooString(GooString*)@plt                       (Quality:       0       3       3    1116    1116    1119)
0x000ba350 GooString::endsWith(char const*) const@plt                  (Quality:       0       3       3    1116    1116    1119)
0x0019adf0 FoFiType1::~FoFiType1()                                     (Quality:       0       3       3    1116    1116    1119)
0x001064f0 Gfx::doEndPath()                                            (Quality:       0       3       3     178     178     181)
0x00196420 FoFiBase::getU8(int, bool*)                                 (Quality:       0       3       3    1116    1116    1119)
0x00196290 FoFiBase::FoFiBase(char*, int, bool)                        (Quality:       0       3       3    1116    1116    1119)
0x000b8030 Dict::getKey(int)@plt                                       (Quality:       0       3       3    1116    1116    1119)
0x000b8130 FoFiType1::parse()@plt                                      (Quality:       0       3       3    1116    1116    1119)
0x00196240 FoFiBase::~FoFiBase()                                       (Quality:       0       3       3    1116    1116    1119)
0x00194580 GooString::endsWith(char const*) const                      (Quality:       0       3       3    1116    1116    1119)
0x000ec130 Dict::getValNF(int, Object*)                                (Quality:       0       3       3    1118    1118    1121)
0x000b88d0 GlobalParams::getUnicodeToUnicode(GooString*)@plt           (Quality:       0       3       3    1116    1116    1119)
0x000b8900 Dict::getValNF(int, Object*)@plt                            (Quality:       0       3       3    1118    1118    1121)
0x00191ab0 GooHash::startIter(GooHashIter**)                           (Quality:       0       3       3    1125    1125    1128)
0x00172130 PSOutputDev::updateFillOverprint(GfxState*)                 (Quality:       0       3       3      74      74      77)
0x000b8b70 FoFiBase::getU8(int, bool*)@plt                             (Quality:       0       3       3    1116    1116    1119)
0x000b8c10 GfxFont::readEmbFontFile(XRef*, int*)@plt                   (Quality:       0       3       3    1116    1116    1119)
0x000ec0f0 Dict::getKey(int)                                           (Quality:       0       3       3    1116    1116    1119)
0x000b9b90 GfxFont::getFontType(XRef*, Dict*, Ref*)@plt                (Quality:       0       3       3    1116    1116    1119)
0x000b9270 PSTokenizer::PSTokenizer(int (*)(void*), void*)@plt         (Quality:       0       3       3    1116    1116    1119)
0x000b93b0 CharCodeToUnicode::mergeCMap(GooString*, int)@plt           (Quality:       0       3       3    1116    1116    1119)
0x000e4530 CharCodeToUnicode::~CharCodeToUnicode()                     (Quality:       0       3       3    1116    1116    1119)
0x000e44f0 CharCodeToUnicode::make8BitToUnicode(unsigned int*)         (Quality:       0       3       3    1116    1116    1119)
0x000e3e80 CharCodeToUnicode::CharCodeToUnicode(GooString*, unsigned int*, unsigned int, bool, CharCodeToUnicodeString*, int, int) (Quality:       1       4       3    1116    1117    1120)
0x000b9730 FoFiType1::FoFiType1(char*, int, bool)@plt                  (Quality:       0       3       3    1116    1116    1119)
0x000e34d0 CharCodeToUnicode::parseCMap1(int (*)(void*), void*, int)   (Quality:       0       3       3    1116    1116    1119)
0x000e2cd0 Stream::fillGooString(GooString*)                           (Quality:       0       3       3    1116    1116    1119)
0x00112220 GfxFont::~GfxFont()                                         (Quality:       0       3       3    1116    1116    1119)
0x00177bf0 PSOutputDev::updateStrokeColorSpace(GfxState*)              (Quality:       0       2       2      74      74      76)
0x000e2190 Catalog::cachePageTree(int)                                 (Quality:       0       2       2      74      74      76)
0x000b4510 std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)@plt (Quality:       0       2       2      76      76      78)
0x0017c8b0 PSOutputDev::filterPSLabel(GooString*, bool*)               (Quality:       0       2       2      74      74      76)
0x00177b80 PSOutputDev::updateFillColorSpace(GfxState*)                (Quality:       0       2       2      74      74      76)
0x0017d540 PSOutputDev::setupResources(Dict*)                          (Quality:       0       2       2      74      74      76)
0x000e0fd0 Catalog::indexToLabel(int, GooString*)                      (Quality:       0       2       2      74      74      76)
0x000bb010 GlobalParams::getPSCenter()@plt                             (Quality:       0       2       2      74      74      76)
0x000b95d0 Page::display(OutputDev*, double, double, int, bool, bool, bool, bool (*)(void*), void*, bool (*)(Annot*, void*), void*, bool)@plt (Quality:       0       2       2      74      74      76)
0x000b5de0 Annots::Annots(PDFDoc*, int, Object*)@plt                   (Quality:       0       2       2      74      74      76)
0x000b94b0 Catalog::cachePageTree(int)@plt                             (Quality:       0       2       2      74      74      76)
0x000b4080 Annots::~Annots()@plt                                       (Quality:       0       2       2      74      74      76)
0x00174e40 PSOutputDev::updateTransfer(GfxState*)                      (Quality:       0       2       2      74      74      76)
0x00128550 GfxState::clearPath()                                       (Quality:       0       2       2     178     178     180)
0x001254c0 GfxPath::moveTo(double, double)                             (Quality:       0       2       2     178     178     180)
0x00172170 PSOutputDev::updateStrokeOverprint(GfxState*)               (Quality:       0       2       2      74      74      76)
0x00125090 GfxSubpath::~GfxSubpath()                                   (Quality:       0       2       2     178     178     180)
0x0017ed20 PSOutputDev::setupFonts(Dict*)                              (Quality:       0       2       2      74      74      76)
0x0017fe90 PSOutputDev::startPage(int, GfxState*, XRef*)               (Quality:       0       2       2      74      74      76)
0x000b9030 PSOutputDev::setupFonts(Dict*)@plt                          (Quality:       0       2       2      74      74      76)
0x000e45d0 CharCodeToUnicode::decRefCnt()                              (Quality:       1       3       2    1116    1117    1119)
0x00180de0 PSOutputDev::needClipToCropBox()                            (Quality:       0       2       2      74      74      76)
0x000b8d80 Gfx::doEndPath()@plt                                        (Quality:       0       2       2     178     178     180)
0x00181000 std::_Rb_tree<int, std::pair<int const, int>, std::_Select1st<std::pair<int const, int> >, std::less<int>, std::allocator<std::pair<int const, int> > >::_M_erase(std::_Rb_tree_node<std::pair<int const, int> >*) (Quality:       0       2       2      75      75      77)
0x00156040 PDFDoc::displayPage(OutputDev*, int, double, double, int, bool, bool, bool, bool (*)(void*), void*, bool (*)(Annot*, void*), void*, bool) (Quality:       0       2       2      74      74      76)
0x00181040 std::_Rb_tree<int, std::pair<int const, int>, std::_Select1st<std::pair<int const, int> >, std::less<int>, std::allocator<std::pair<int const, int> > >::_M_get_insert_unique_pos(int const&) (Quality:       0       2       2      74      74      76)
0x000e0e00 Catalog::getPageLabelInfo()                                 (Quality:       0       2       2      74      74      76)
0x000de190 Array::getNF(int, Object*)                                  (Quality:       0       2       2      82      82      84)
0x000b9d70 GlobalParams::getPSLevel()@plt                              (Quality:       0       2       2      75      75      77)
0x001810d0 std::_Rb_tree<int, std::pair<int const, int>, std::_Select1st<std::pair<int const, int> >, std::less<int>, std::allocator<std::pair<int const, int> > >::_M_insert_(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::pair<int const, int> const&) (Quality:       0       2       2      74      74      76)
0x000b5550 PSOutputDev::setupForms(Dict*)@plt                          (Quality:       0       2       2      74      74      76)
0x00191ae0 GooHash::getNext(GooHashIter**, GooString**, void**)        (Quality:       1       3       2    1131    1132    1134)
0x00171e60 PSOutputDev::updateStrokeColor(GfxState*)                   (Quality:       0       2       2      74      74      76)
0x00171b90 PSOutputDev::updateFillColor(GfxState*)                     (Quality:       0       2       2      74      74      76)
0x000b5ef0 GlobalParams::getPSExpandSmaller()@plt                      (Quality:       0       2       2      74      74      76)
0x00156cb0 PreScanOutputDev::startPage(int, GfxState*, XRef*)          (Quality:       0       2       2      74      74      76)
0x000b3f60 Page::getResourceDict()@plt                                 (Quality:       0       2       2      74      74      76)
0x0014f340 Page::display(OutputDev*, double, double, int, bool, bool, bool, bool (*)(void*), void*, bool (*)(Annot*, void*), void*, bool) (Quality:       0       2       2      74      74      76)
0x0014dd80 Page::getResourceDict()                                     (Quality:       0       2       2      74      74      76)
0x000b8680 PSOutputDev::filterPSLabel(GooString*, bool*)@plt           (Quality:       0       2       2      74      74      76)
0x000fade0 Gfx::opMoveTo(Object*, int)                                 (Quality:       0       2       2     170     170     172)
0x0014dcf0 Page::~Page()                                               (Quality:       0       2       2      74      74      76)
0x0014d8c0 Page::Page(PDFDoc*, int, Dict*, Ref, PageAttrs*, Form*)     (Quality:       0       2       2      74      74      76)
0x0014d310 PageAttrs::PageAttrs(PageAttrs*, Dict*)                     (Quality:       0       2       2      83      83      85)
0x000b4e40 PageAttrs::~PageAttrs()@plt                                 (Quality:       0       2       2      83      83      85)
0x00171b50 PSOutputDev::updateMiterLimit(GfxState*)                    (Quality:       0       2       2      74      74      76)
0x0014ce70 PageAttrs::clipBoxes()                                      (Quality:       0       2       2      74      74      76)
0x001576f0 PreScanOutputDev::PreScanOutputDev(PDFDoc*)                 (Quality:       0       2       2      74      74      76)
0x0014ce10 PageAttrs::~PageAttrs()                                     (Quality:       0       2       2      83      83      85)
0x000b8170 GfxSubpath::GfxSubpath(double, double)@plt                  (Quality:       0       2       2     178     178     180)
0x00156cc0 PreScanOutputDev::endPage()                                 (Quality:       0       2       2      74      74      76)
0x00125010 GfxSubpath::GfxSubpath(double, double)                      (Quality:       0       2       2     178     178     180)
0x000ddce0 Annots::~Annots()                                           (Quality:       0       2       2      74      74      76)
0x000ddb20 Annots::Annots(PDFDoc*, int, Object*)                       (Quality:       0       2       2      74      74      76)
0x001571c0 PreScanOutputDev::~PreScanOutputDev()                       (Quality:       0       2       2      74      74      76)
0x000ba2b0 snprintf@plt                                                (Quality:       0       2       2      78      78      80)
0x000b7f40 Catalog::indexToLabel(int, GooString*)@plt                  (Quality:       0       2       2      74      74      76)
0x000bb950 PageAttrs::PageAttrs(PageAttrs*, Dict*)@plt                 (Quality:       0       2       2      83      83      85)
0x000b7e40 CharCodeToUnicode::make8BitToUnicode(unsigned int*)@plt     (Quality:       1       3       2    1116    1117    1119)
0x000b7df0 GlobalParams::getPSShrinkLarger()@plt                       (Quality:       0       2       2      74      74      76)
0x001346e0 GlobalParams::getPSExpandSmaller()                          (Quality:       0       2       2      74      74      76)
0x00171af0 PSOutputDev::updateFlatness(GfxState*)                      (Quality:       0       2       2      74      74      76)
0x0010c160 Gfx::opEOFill(Object*, int)                                 (Quality:       0       2       2     170     170     172)
0x00171a50 PSOutputDev::updateLineDash(GfxState*)                      (Quality:       0       2       2      74      74      76)
0x00170470 PSOutputDev::checkPageSlice(Page*, double, double, int, bool, bool, int, int, int, int, bool, bool (*)(void*), void*, bool (*)(Annot*, void*), void*) (Quality:       0       2       2      74      74      76)
0x000b4240 Catalog::getPageLabelInfo()@plt                             (Quality:       0       2       2      74      74      76)
0x000b79a0 std::_Rb_tree<int, std::pair<int const, int>, std::_Select1st<std::pair<int const, int> >, std::less<int>, std::allocator<std::pair<int const, int> > >::_M_erase(std::_Rb_tree_node<std::pair<int const, int> >*)@plt (Quality:       0       2       2      75      75      77)
0x000b7830 PSOutputDev::setupImages(Dict*)@plt                         (Quality:       0       2       2      74      74      76)
0x001701c0 PSOutputDev::setupForms(Dict*)                              (Quality:       0       2       2      74      74      76)
0x000b7710 PSOutputDev::writePageTrailer()@plt                         (Quality:       0       2       2      74      74      76)
0x000b4670 GfxSubpath::~GfxSubpath()@plt                               (Quality:       0       2       2     178     178     180)
0x000ba640 GfxFont::readToUnicodeCMap(Dict*, int, CharCodeToUnicode*)@plt (Quality:       1       3       2    1116    1117    1119)
0x000b5ac0 PreScanOutputDev::PreScanOutputDev(PDFDoc*)@plt             (Quality:       0       2       2      74      74      76)
0x000b75b0 PreScanOutputDev::clearStats()@plt                          (Quality:       0       2       2      74      74      76)
0x000b74a0 Page::Page(PDFDoc*, int, Dict*, Ref, PageAttrs*, Form*)@plt (Quality:       0       2       2      74      74      76)
0x00134e10 GlobalParams::getUnicodeToUnicode(GooString*)               (Quality:       1       3       2    1116    1117    1119)
0x0016f6e0 PSOutputDev::setupImages(Dict*)                             (Quality:       0       2       2      74      74      76)
0x0016d4b0 PSOutputDev::endPage()                                      (Quality:       0       2       2      74      74      76)
0x001571e0 PreScanOutputDev::~PreScanOutputDev()                       (Quality:       0       2       2      74      74      76)
0x00134710 GlobalParams::getPSShrinkLarger()                           (Quality:       0       2       2      74      74      76)
0x000b6e20 GfxPath::moveTo(double, double)@plt                         (Quality:       0       2       2     178     178     180)
0x001576c0 PreScanOutputDev::clearStats()                              (Quality:       0       2       2      74      74      76)
0x00134740 GlobalParams::getPSCenter()                                 (Quality:       0       2       2      74      74      76)
0x000b5b70 PageAttrs::clipBoxes()@plt                                  (Quality:       0       2       2      74      74      76)
0x000b3e40 std::_Rb_tree<int, std::pair<int const, int>, std::_Select1st<std::pair<int const, int> >, std::less<int>, std::allocator<std::pair<int const, int> > >::_M_insert_(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::pair<int const, int> const&)@plt (Quality:       0       2       2      74      74      76)
0x000b5310 std::_Rb_tree<int, std::pair<int const, int>, std::_Select1st<std::pair<int const, int> >, std::less<int>, std::allocator<std::pair<int const, int> > >::_M_get_insert_unique_pos(int const&)@plt (Quality:       0       2       2      74      74      76)
0x000bb250 PSOutputDev::setupResources(Dict*)@plt                      (Quality:       0       2       2      74      74      76)
0x000baa30 FoFiBase::FoFiBase(char*, int, bool)@plt                    (Quality:       1       3       2    1116    1117    1119)
0x0019b970 FoFiType1::FoFiType1(char*, int, bool)                      (Quality:       1       3       2    1116    1117    1119)
0x000badb0 Page::~Page()@plt                                           (Quality:       0       2       2      74      74      76)
0x00161370 ASCII85Encoder::getChar()                                   (Quality:       2       4       2   68228   68226   68224)
0x000bb1e0 Array::getNF(int, Object*)@plt                              (Quality:       0       2       2      82      82      84)
0x000b66d0 GfxState::clearPath()@plt                                   (Quality:       0       2       2     178     178     180)
0x000b4610 PreScanOutputDev::~PreScanOutputDev()@plt                   (Quality:       0       2       2      74      74      76)
0x00134770 GlobalParams::getPSLevel()                                  (Quality:       0       2       2      75      75      77)
0x00113900 GfxFont::readEmbFontFile(XRef*, int*)                       (Quality:       1       3       2    1116    1117    1119)
0x000b65b0 FoFiType1::undoPFB()@plt                                    (Quality:       1       2       1    1117    1116    1119)
0x000b6a00 PSTokenizer::~PSTokenizer()@plt                             (Quality:       1       2       1    1117    1116    1119)
0x000b6c00 PSOutputDev::setupFont(GfxFont*, Dict*)@plt                 (Quality:       0       1       1     372     372     373)
0x00157360 PreScanOutputDev::eoFill(GfxState*)                         (Quality:       0       1       1      85      85      86)
0x000b4d80 PSOutputDev::doPath(GfxPath*)@plt                           (Quality:       0       1       1      89      89      90)
0x000b8070 FoFiBase::~FoFiBase()@plt                                   (Quality:       1       2       1    1117    1116    1119)
0x000ba0f0 BuiltinFontWidths::hash(char const*)@plt                    (Quality:       0       1       1    4173    4173    4174)
0x00194380 GooString::cmp(GooString*) const                            (Quality:       0       1       1       7       7       8)
0x0017e410 PSOutputDev::setupFont(GfxFont*, Dict*)                     (Quality:       1       2       1     372     373     374)
0x00172da0 PSOutputDev::doPath(GfxPath*)                               (Quality:       0       1       1      89      89      90)
0x001730c0 PSOutputDev::eoFill(GfxState*)                              (Quality:       0       1       1      85      85      86)
0x000b55f0 CharCodeToUnicode::~CharCodeToUnicode()@plt                 (Quality:       1       2       1    1117    1116    1119)
0x000e3c10 CharCodeToUnicode::mergeCMap(GooString*, int)               (Quality:       1       2       1    1117    1116    1119)
0x000b98b0 GooString::cmp(GooString*) const@plt                        (Quality:       0       1       1       7       7       8)
0x00186120 TextPage::endPage()                                         (Quality:       0       0       0       0       0       0)
0x000b5d30 Gfx8BitFont::getCharProcs()@plt                             (Quality:       0       0       0       0       0       0)
0x000b5d40 BuiltinFontWidths::getWidth(char const*, unsigned short*)@plt (Quality:       0       0       0       0       0       0)
0x000b5d50 Annots::appendAnnot(Annot*)@plt                             (Quality:       0       0       0       0       0       0)
0x000b5d60 Splash::restoreState()@plt                                  (Quality:       0       0       0       0       0       0)
0x000b5d70 PopplerCacheItem::~PopplerCacheItem()@plt                   (Quality:       0       0       0       0       0       0)
0x000b5d10 FormWidgetButton::~FormWidgetButton()@plt                   (Quality:       0       0       0       0       0       0)
0x000b5d00 GfxResources::lookupGState(char*, Object*)@plt              (Quality:       0       0       0       0       0       0)
0x000b5da0 abort@plt                                                   (Quality:       0       0       0       0       0       0)
0x000b5db0 PopplerCache::put(PopplerCacheKey*, PopplerCacheItem*)@plt  (Quality:       0       0       0       0       0       0)
0x000b5dc0 StructElement::StructElement(Dict*, StructTreeRoot*, StructElement*, std::set<int, std::less<int>, std::allocator<int> >&)@plt (Quality:       0       0       0       0       0       0)
0x000b5dd0 GfxUnivariateShading::~GfxUnivariateShading()@plt           (Quality:       0       0       0       0       0       0)
0x000b5cf0 CMapCache::getCMap(GooString*, GooString*, Stream*)@plt     (Quality:       0       0       0       0       0       0)
0x000b5df0 RGBGrayEncoder::RGBGrayEncoder(Stream*)@plt                 (Quality:       0       0       0       0       0       0)
0x000b5e00 PageLabelInfo::Interval::Interval(Object*, int)@plt         (Quality:       0       0       0       0       0       0)
0x000b5e10 LinkAction::parseDest(Object*)@plt                          (Quality:       0       0       0       0       0       0)
0x000b5ce0 TiffWriter::setCompressionString(char const*)@plt           (Quality:       0       0       0       0       0       0)
0x000b5e30 XRef::getDocInfoNF(Object*)@plt                             (Quality:       0       0       0       0       0       0)
0x000b5e40 JArithmeticDecoder::decodeInt(int*, JArithmeticDecoderStats*)@plt (Quality:       0       0       0       0       0       0)
0x000b5e50 CharCodeToUnicodeCache::getCharCodeToUnicode(GooString*)@plt (Quality:       0       0       0       0       0       0)
0x000b5e60 FoFiType1C::readFD(int, int, Type1CPrivateDict*)@plt        (Quality:       0       0       0       0       0       0)
0x000b5e70 Decrypt::makeFileKey2(int, int, int, GooString*, GooString*, int, GooString*, GooString*, unsigned char*, bool)@plt (Quality:       0       0       0       0       0       0)
0x000b5e80 OCDisplayNode::takeChildren()@plt                           (Quality:       0       0       0       0       0       0)
0x000b5e90 AnnotStamp::~AnnotStamp()@plt                               (Quality:       0       0       0       0       0       0)
0x000b5ea0 std::vector<PageAttrs*, std::allocator<PageAttrs*> >::_M_insert_aux(__gnu_cxx::__normal_iterator<PageAttrs**, std::vector<PageAttrs*, std::allocator<PageAttrs*> > >, PageAttrs* const&)@plt (Quality:       0       0       0       2       2       2)
0x000b5cd0 fmin@plt                                                    (Quality:       0       0       0       0       0       0)
0x000b5ec0 AnnotWidget::generateFieldAppearance()@plt                  (Quality:       0       0       0       0       0       0)
0x000b5ed0 void std::__introsort_loop<GfxFontCIDWidthExcepV*, long, __gnu_cxx::__ops::_Iter_comp_iter<cmpWidthExcepVFunctor> >(GfxFontCIDWidthExcepV*, GfxFontCIDWidthExcepV*, long, __gnu_cxx::__ops::_Iter_comp_iter<cmpWidthExcepVFunctor>)@plt (Quality:       0       0       0       0       0       0)
0x000b5ee0 cmsSetLogErrorHandler@plt                                   (Quality:       0       0       0       1       1       1)
0x000b5cb0 TextFontInfo::~TextFontInfo()@plt                           (Quality:       0       0       0       0       0       0)
0x000b5f00 Matrix::transform(double, double, double*, double*) const@plt (Quality:       0       0       0       0       0       0)
0x000b5f10 Links::Links(Annots*)@plt                                   (Quality:       0       0       0       0       0       0)
0x000b5f20 Splash::getScreen()@plt                                     (Quality:       0       0       0       0       0       0)
0x000b5f30 TextLine::TextLine(TextBlock*, int, double)@plt             (Quality:       0       0       0       0       0       0)
0x000b5f40 TextPage::updateFont(GfxState*)@plt                         (Quality:       0       0       0       0       0       0)
0x000b5f50 OptionalContentGroup::getName() const@plt                   (Quality:       0       0       0       0       0       0)
0x000b5f60 DeviceNRecoder::fillBuf()@plt                               (Quality:       0       0       0       0       0       0)
0x000b5f70 XRef::writeTableToFile(OutStream*, bool)@plt                (Quality:       0       0       0       0       0       0)
0x000b5f80 OCDisplayNode::~OCDisplayNode()@plt                         (Quality:       0       0       0       0       0       0)
0x000b5f90 AnnotLine::initialize(PDFDoc*, Dict*)@plt                   (Quality:       0       0       0       0       0       0)
0x000b5fa0 void std::__heap_select<SplashScreenPoint*, __gnu_cxx::__ops::_Iter_comp_iter<cmpDistancesFunctor> >(SplashScreenPoint*, SplashScreenPoint*, SplashScreenPoint*, __gnu_cxx::__ops::_Iter_comp_iter<cmpDistancesFunctor>)@plt (Quality:       0       0       0       0       0       0)
0x000b5fb0 FormField::_createWidget(Object*, Ref)@plt                  (Quality:       0       0       0       0       0       0)
0x000b5fc0 GooHash::add(GooString*, int)@plt                           (Quality:       0       0       0      23      23      23)
0x000b5fd0 FoFiType1C::convertToType1(char*, char const**, bool, void (*)(void*, char const*, int), void*)@plt (Quality:       0       0       0       0       0       0)
0x000b5fe0 GlobalParams::parseNameToUnicode(GooString*)@plt            (Quality:       0       0       0       0       0       0)
0x000b5ca0 GooHash::hash(GooString*)@plt                               (Quality:       0       0       0      60      60      60)
0x000b5c90 GlobalParams::getScreenType()@plt                           (Quality:       0       0       0       0       0       0)
0x000b6010 FoFiBase::checkRegion(int, int)@plt                         (Quality:       0       0       0       0       0       0)
0x000b6020 fseeko@plt                                                  (Quality:       0       0       0       0       0       0)
0x000b6030 GlobalParams::getPSResidentFonts()@plt                      (Quality:       0       0       0       1       1       1)
0x000b6040 PDFDoc::checkEncryption(GooString*, GooString*)@plt         (Quality:       0       0       0       1       1       1)
0x000b6050 png_write_info@plt                                          (Quality:       0       0       0       0       0       0)
0x000b6060 Gfx::fillPatch(GfxPatch*, int, int, double, int, GfxPatchMeshShading*)@plt (Quality:       0       0       0       0       0       0)
0x000b6070 BuiltinFontWidths::~BuiltinFontWidths()@plt                 (Quality:       0       0       0      14      14      14)
0x000b6080 PDFDoc::writeStream(Stream*, OutStream*)@plt                (Quality:       0       0       0       0       0       0)
0x000b6090 GfxGouraudTriangleShading::~GfxGouraudTriangleShading()@plt (Quality:       0       0       0       0       0       0)
0x000b60a0 void std::__make_heap<SplashXPathSeg*, __gnu_cxx::__ops::_Iter_comp_iter<cmpXPathSegsFunctor> >(SplashXPathSeg*, SplashXPathSeg*, __gnu_cxx::__ops::_Iter_comp_iter<cmpXPathSegsFunctor>)@plt (Quality:       0       0       0       0       0       0)
0x000b60b0 cmsDoTransform@plt                                          (Quality:       0       0       0       0       0       0)
0x000b60c0 Hints::readBit(Stream*)@plt                                 (Quality:       0       0       0       0       0       0)
0x000b60d0 GfxLabColorSpace::getXYZ(GfxColor*, double*, double*, double*)@plt (Quality:       0       0       0       0       0       0)
0x000b60e0 CMap::useCMap(CMapCache*, Object*)@plt                      (Quality:       0       0       0       0       0       0)
0x000b60f0 ActualText::addChar(GfxState*, double, double, double, double, unsigned int, int, unsigned int*, int)@plt (Quality:       0       0       0       0       0       0)
0x000b6100 AnnotAppearance::AnnotAppearance(PDFDoc*, Object*)@plt      (Quality:       0       0       0       0       0       0)
0x000b6110 CachedFileStream::~CachedFileStream()@plt                   (Quality:       0       0       0       0       0       0)
0x000b6120 SplashFontFile::SplashFontFile(SplashFontFileID*, SplashFontSrc*)@plt (Quality:       0       0       0       0       0       0)
0x000b6130 GfxShading::GfxShading(int)@plt                             (Quality:       0       0       0       0       0       0)
0x000b5c80 LinkGoTo::~LinkGoTo()@plt                                   (Quality:       0       0       0       0       0       0)
0x000b6150 SplashFontFileID::SplashFontFileID()@plt                    (Quality:       0       0       0       0       0       0)
0x000b6160 GooHash::hash(char const*)@plt                              (Quality:       0       0       0       0       0       0)
0x000b6170 PDFDoc::getHints()@plt                                      (Quality:       0       0       0       0       0       0)
0x000b5c70 FormFieldText::FormFieldText(PDFDoc*, Object*, Ref const&, FormField*, std::set<int, std::less<int>, std::allocator<int> >*)@plt (Quality:       0       0       0       0       0       0)
0x000b6190 CachedFile::~CachedFile()@plt                               (Quality:       0       0       0       0       0       0)
0x000b61a0 std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)@plt (Quality:       0       0       0       0       0       0)
0x000b61b0 LinkNamed::LinkNamed(Object*)@plt                           (Quality:       0       0       0       0       0       0)
0x000b61c0 AnnotAppearance::getNumStates()@plt                         (Quality:       0       0       0       0       0       0)
0x000b5c60 Splash::scaleMaskYdXu(bool (*)(void*, unsigned char*), void*, int, int, int, int, SplashBitmap*)@plt (Quality:       0       0       0       0       0       0)
0x000b61e0 JBIG2Bitmap::JBIG2Bitmap(unsigned int, int, int)@plt        (Quality:       0       0       0       0       0       0)
0x000b61f0 FormWidgetChoice::FormWidgetChoice(PDFDoc*, Object*, unsigned int, Ref, FormField*)@plt (Quality:       0       0       0       0       0       0)
0x000b6200 PSOutCustomColor::PSOutCustomColor(double, double, double, double, GooString*)@plt (Quality:       0       0       0       0       0       0)
0x000b6210 sincos@plt                                                  (Quality:       0       0       0       0       0       0)
0x000b6220 PDFDoc::markAnnotations(Object*, XRef*, XRef*, unsigned int, int, int)@plt (Quality:       0       0       0       0       0       0)
0x000b6230 GfxICCBasedColorSpace::GfxICCBasedColorSpace(int, GfxColorSpace*, Ref*)@plt (Quality:       0       0       0       0       0       0)
0x000b6240 SplashPath::close(bool)@plt                                 (Quality:       0       0       0       0       0       0)
0x000b6250 FoFiTrueType::computeTableChecksum(unsigned char*, int)@plt (Quality:       0       0       0       0       0       0)
0x000b6260 FT_Get_Glyph@plt                                            (Quality:       0       0       0       0       0       0)
0x000b6270 AnnotPopup::setParent(Annot*)@plt                           (Quality:       0       0       0       0       0       0)
0x000b6280 NameTree::addEntry(NameTree::Entry*)@plt                    (Quality:       0       0       0       0       0       0)
0x000b5c50 BaseStream::~BaseStream()@plt                               (Quality:       0       0       0       0       0       0)
0x000b62a0 ImageStream::reset()@plt                                    (Quality:       0       0       0       0       0       0)
0x000b62b0 GfxPattern::~GfxPattern()@plt                               (Quality:       0       0       0       0       0       0)
0x000b62c0 GfxShading::~GfxShading()@plt                               (Quality:       0       0       0       0       0       0)
0x000b62d0 MarkedContentOutputDev::getTextSpans() const@plt            (Quality:       0       0       0       0       0       0)
0x000b62e0 SplashScreen::SplashScreen(SplashScreenParams*)@plt         (Quality:       0       0       0       0       0       0)
0x000b62f0 OCGs::findOcgByRef(Ref const&)@plt                          (Quality:       0       0       0       0       0       0)
0x000b6300 OutputDev::getIccColorSpaceCache()@plt                      (Quality:       0       0       0       0       0       0)
0x000b6310 Splash::setMiterLimit(double)@plt                           (Quality:       0       0       0       0       0       0)
0x000b6320 SplashBitmap::writeImgFile(SplashImageFileFormat, _IO_FILE*, int, int, char const*)@plt (Quality:       0       0       0       0       0       0)
0x000b6330 FormWidget::FormWidget(PDFDoc*, Object*, unsigned int, Ref, FormField*)@plt (Quality:       0       0       0       0       0       0)
0x000b6340 SplashPath::SplashPath()@plt                                (Quality:       0       0       0       0       0       0)
0x000b6350 FoFiType1C::getIndex(int, Type1CIndex*, bool*)@plt          (Quality:       0       0       0       0       0       0)
0x000b6360 AnnotWidget::getFormAdditionalAction(Annot::FormAdditionalActionsType)@plt (Quality:       0       0       0       0       0       0)
0x000b6370 SplashPattern::SplashPattern()@plt                          (Quality:       0       0       0       0       0       0)
0x000b6380 CachedFileStream::close()@plt                               (Quality:       0       0       0       0       0       0)
0x000b6390 FormWidget::~FormWidget()@plt                               (Quality:       0       0       0       0       0       0)
0x000b63a0 FcPatternGetString@plt                                      (Quality:       0       0       0       0       0       0)
0x000b63b0 FontInfoScanner::scanFonts(XRef*, Dict*, GooList*)@plt      (Quality:       0       0       0       0       0       0)
0x000b63c0 PSOutputDev::setupEmbeddedOpenTypeCFFFont(GfxFont*, Ref*, GooString*)@plt (Quality:       0       0       0       0       0       0)
0x000b63d0 Sound::parseSound(Object*)@plt                              (Quality:       0       0       0       0       0       0)
0x000b63e0 PopplerObjectCache::put(Ref const&)@plt                     (Quality:       0       0       0       0       0       0)
0x000b63f0 void std::__introsort_loop<SplashXPathSeg*, long, __gnu_cxx::__ops::_Iter_comp_iter<cmpXPathSegsFunctor> >(SplashXPathSeg*, SplashXPathSeg*, long, __gnu_cxx::__ops::_Iter_comp_iter<cmpXPathSegsFunctor>)@plt (Quality:       0       0       0       0       0       0)
0x000b6400 __cxa_guard_release@plt                                     (Quality:       0       0       0       0       0       0)
0x000b6410 JBIG2MMRDecoder::skipTo(unsigned int)@plt                   (Quality:       0       0       0       0       0       0)
0x000b6420 __assert_fail@plt                                           (Quality:       0       0       0       0       0       0)
0x000b6430 AnnotAppearanceCharacs::AnnotAppearanceCharacs(Dict*)@plt   (Quality:       0       0       0       0       0       0)
0x000b6440 JArithmeticDecoderStats::reset()@plt                        (Quality:       0       0       0       0       0       0)
0x000b6450 MarkedContentOutputDev::needFontChange(GfxFont*) const@plt  (Quality:       0       0       0       0       0       0)
0x000b6460 JBIG2MMRDecoder::get24Bits()@plt                            (Quality:       0       0       0       0       0       0)
0x000b6470 unicodeTypeL(unsigned int)@plt                              (Quality:       0       0       0       0       0       0)
0x000b6480 CharCodeToUnicode::CharCodeToUnicode()@plt                  (Quality:       0       0       0       0       0       0)
0x000b6490 Splash::scaleMask(bool (*)(void*, unsigned char*), void*, int, int, int, int)@plt (Quality:       0       0       0       0       0       0)
0x000b64a0 GfxState::setLineDash(double*, int, double)@plt             (Quality:       0       0       0       0       0       0)
0x000b64b0 jpeg_read_scanlines@plt                                     (Quality:       0       0       0       0       0       0)
0x000b64c0 initBuiltinFontTables()@plt                                 (Quality:       0       0       0       1       1       1)
0x000b64d0 GooHash::lookup(GooString*)@plt                             (Quality:       0       0       0       0       0       0)
0x000b64e0 Page::processLinks(OutputDev*)@plt                          (Quality:       0       0       0       0       0       0)
0x000b64f0 GlobalParams::getUnicodeMapFile(GooString*)@plt             (Quality:       0       0       0       0       0       0)
0x000b6500 AnnotGeometry::~AnnotGeometry()@plt                         (Quality:       0       0       0       0       0       0)
0x000b6510 Function::parse(Object*, std::set<int, std::less<int>, std::allocator<int> >*)@plt (Quality:       0       0       0       0       0       0)
0x000b6520 Catalog::getDestNameTree()@plt                              (Quality:       0       0       0       0       0       0)
0x000b5c40 std::__throw_length_error(char const*)@plt                  (Quality:       0       0       0       0       0       0)
0x000b6540 CMap::freeCMapVector(CMapVectorEntry*)@plt                  (Quality:       0       0       0       0       0       0)
0x000b6550 NameTree::~NameTree()@plt                                   (Quality:       0       0       0       0       0       0)
0x000b6560 GfxTilingPattern::parse(Object*)@plt                        (Quality:       0       0       0       0       0       0)
0x000b6570 FormFieldButton::FormFieldButton(PDFDoc*, Object*, Ref const&, FormField*, std::set<int, std::less<int>, std::allocator<int> >*)@plt (Quality:       0       0       0       0       0       0)
0x000b6580 GlobalParams::getScreenGamma()@plt                          (Quality:       0       0       0       0       0       0)
0x000b6590 GfxResources::lookupMarkedContentNF(char*, Object*)@plt     (Quality:       0       0       0       0       0       0)
0x000b65a0 ImageStream::getPixel(unsigned char*)@plt                   (Quality:       0       0       0       0       0       0)
0x000b5c30 LZWStream::LZWStream(Stream*, int, int, int, int, int)@plt  (Quality:       0       0       0       0       0       0)
0x000b65c0 unicodeTypeR(unsigned int)@plt                              (Quality:       0       0       0       0       0       0)
0x000b65d0 opj_cio_open@plt                                            (Quality:       0       0       0       0       0       0)
0x000b65e0 FormWidgetChoice::hasEdit() const@plt                       (Quality:       0       0       0       0       0       0)
0x000b65f0 SplashPath::lineTo(double, double)@plt                      (Quality:       0       0       0       0       0       0)
0x000b6600 PSStack::copy(int)@plt                                      (Quality:       0       0       0       0       0       0)
0x000b6610 CharCodeToUnicode::makeIdentityMapping()@plt                (Quality:       0       0       0       0       0       0)
0x000b5c20 Annot::~Annot()@plt                                         (Quality:       0       0       0       0       0       0)
0x000b6630 SplashSolidColor::~SplashSolidColor()@plt                   (Quality:       0       0       0       0       0       0)
0x000b6640 FcFontSort@plt                                              (Quality:       0       0       0       0       0       0)
0x000b6650 TextSelectionSizer::TextSelectionSizer(TextPage*, double)@plt (Quality:       0       0       0       0       0       0)
0x000b6660 AnnotPopup::AnnotPopup(PDFDoc*, Dict*, Object*)@plt         (Quality:       0       0       0       0       0       0)
0x000b5c10 XRef::removeIndirectObject(Ref)@plt                         (Quality:       0       0       0       0       0       0)
0x000b6680 CCITTFaxStream::CCITTFaxStream(Stream*, int, bool, bool, int, int, bool, bool)@plt (Quality:       0       0       0       3       3       3)
0x000b6690 Gfx::doPatchMeshShFill(GfxPatchMeshShading*)@plt            (Quality:       0       0       0       0       0       0)
0x000b66a0 FT_Init_FreeType@plt                                        (Quality:       0       0       0       0       0       0)
0x000b66b0 AnnotWidget::AnnotWidget(PDFDoc*, Dict*, Object*, FormField*)@plt (Quality:       0       0       0       0       0       0)
0x000b66c0 NameTree::getValue(int)@plt                                 (Quality:       0       0       0       0       0       0)
0x000b5c00 GfxShading::init(GfxResources*, Dict*, OutputDev*, GfxState*)@plt (Quality:       0       0       0       0       0       0)
0x000b66e0 GfxPatchMeshShading::GfxPatchMeshShading(GfxPatchMeshShading*)@plt (Quality:       0       0       0       0       0       0)
0x000b66f0 TextPage::makeWordList(bool)@plt                            (Quality:       0       0       0       0       0       0)
0x000b6700 std::_Rb_tree_increment(std::_Rb_tree_node_base*)@plt       (Quality:       0       0       0       0       0       0)
0x000b6710 PDFDoc::saveWithoutChangesAs(OutStream*)@plt                (Quality:       0       0       0       0       0       0)
0x000b6720 UnicodeMap::mapUnicode(unsigned int, char*, int)@plt        (Quality:       0       0       0       0       0       0)
0x000b5bf0 GlobalParams::findToUnicodeFile(GooString*)@plt             (Quality:       0       0       0       0       0       0)
0x000b6740 SplashXPath::sort()@plt                                     (Quality:       0       0       0       0       0       0)
0x000b6750 StructElement::~StructElement()@plt                         (Quality:       0       0       0       0       0       0)
0x000b6760 SplashXPathScanner::getBBoxAA(int*, int*, int*, int*)@plt   (Quality:       0       0       0       0       0       0)
0x000b6770 StructElement::parseChildren(Dict*, std::set<int, std::less<int>, std::allocator<int> >&)@plt (Quality:       0       0       0       0       0       0)
0x000b6780 SplashFontSrc::setFile(GooString*, bool)@plt                (Quality:       0       0       0       0       0       0)
0x000b6790 Splash::getFillPattern()@plt                                (Quality:       0       0       0       0       0       0)
0x000b67a0 StructElement::parseAttributes(Dict*, bool)@plt             (Quality:       0       0       0       0       0       0)
0x000b67b0 void std::__introsort_loop<DictEntry*, long, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(DictEntry const&, DictEntry const&)> >(DictEntry*, DictEntry*, long, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(DictEntry const&, DictEntry const&)>)@plt (Quality:       0       0       0       0       0       0)
0x000b67c0 JBIG2MMRDecoder::get2DCode()@plt                            (Quality:       0       0       0       0       0       0)
0x000b67d0 RunLengthStream::fillBuf()@plt                              (Quality:       0       0       0       0       0       0)
0x000b67e0 GfxState::ReusablePathIterator::ReusablePathIterator(GfxPath*)@plt (Quality:       0       0       0       0       0       0)
0x000b67f0 TextSelectionPainter::endPage()@plt                         (Quality:       0       0       0       0       0       0)
0x000b6800 sscanf@plt                                                  (Quality:       0       0       0       1       1       1)
0x000b6810 GfxGouraudTriangleShading::getParameterizedColor(double, GfxColor*)@plt (Quality:       0       0       0       0       0       0)
0x000b6820 TextPage::visitSelection(TextSelectionVisitor*, PDFRectangle*, SelectionStyle)@plt (Quality:       0       0       0       0       0       0)
0x000b6830 GfxImageColorMap::getRGBLine(unsigned char*, unsigned char*, int)@plt (Quality:       0       0       0       0       0       0)
0x000b6840 StructElement::StructData::~StructData()@plt                (Quality:       0       0       0       0       0       0)
0x000b6850 EmbFile::EmbFile(Object*)@plt                               (Quality:       0       0       0       0       0       0)
0x000b6860 Gfx::opSetRenderingIntent(Object*, int)@plt                 (Quality:       0       0       0       0       0       0)
0x000b6870 Gfx8BitFont::getCodeToGIDMap(FoFiTrueType*)@plt             (Quality:       0       0       0       0       0       0)
0x000b6880 LinkURI::LinkURI(Object*, GooString*)@plt                   (Quality:       0       0       0       0       0       0)
0x000b6890 Function::Function()@plt                                    (Quality:       0       0       0       0       0       0)
0x000b68a0 PSOutputDev::setupForm(Ref, Object*)@plt                    (Quality:       0       0       0       0       0       0)
0x000b68b0 JBIG2Stream::readPageInfoSeg(unsigned int)@plt              (Quality:       0       0       0       0       0       0)
0x000b68c0 OCDisplayNode::getNumChildren()@plt                         (Quality:       0       0       0       0       0       0)
0x000b68d0 SplashXPathScanner::computeIntersections()@plt              (Quality:       0       0       0       0       0       0)
0x000b68e0 PSOutputDev::makePSFontName(GfxFont*, Ref*)@plt             (Quality:       0       0       0       0       0       0)
0x000b68f0 gstrndup@plt                                                (Quality:       0       0       0       0       0       0)
0x000b6900 XRef::XRefStreamWriter::XRefStreamWriter(Object*, GooString*, int)@plt (Quality:       0       0       0       0       0       0)
0x000b6910 FoFiBase::~FoFiBase()@plt                                   (Quality:       0       0       0       0       0       0)
0x000b6920 SplashXPathScanner::SplashXPathScanner(SplashXPath*, bool, int, int)@plt (Quality:       0       0       0       0       0       0)
0x000b6930 open@plt                                                    (Quality:       0       0       0       1       1       1)
0x000b6940 SysFontList::find(GooString*, bool, bool)@plt               (Quality:       0       0       0       0       0       0)
0x000b6950 Splash::compositeBackground(unsigned char*)@plt             (Quality:       0       0       0       0       0       0)
0x000b6960 PSOutputDev::tilingPatternFillL1(GfxState*, Catalog*, Object*, double*, int, int, Dict*, double*, double*, int, int, int, int, double, double)@plt (Quality:       0       0       0       0       0       0)
0x000b6970 GfxCalRGBColorSpace::parse(Array*, GfxState*)@plt           (Quality:       0       0       0       0       0       0)
0x000b6980 TextSelectionDumper::TextSelectionDumper(TextPage*)@plt     (Quality:       0       0       0       0       0       0)
0x000b6990 GfxPatchMeshShading::GfxPatchMeshShading(int, GfxPatch*, int, Function**, int)@plt (Quality:       0       0       0       0       0       0)
0x000b69a0 Annot::createResourcesDict(char const*, Object*, char const*, double, char const*, Object*)@plt (Quality:       0       0       0       0       0       0)
0x000b69b0 GfxDeviceRGBColorSpace::GfxDeviceRGBColorSpace()@plt        (Quality:       0       0       0       2       2       2)
0x000b69c0 FT_Library_Version@plt                                      (Quality:       0       0       0       0       0       0)
0x000b5be0 Gfx::pushMarkedContent()@plt                                (Quality:       0       0       0       0       0       0)
0x000b69e0 FcLangSetContains@plt                                       (Quality:       0       0       0       0       0       0)
0x000b69f0 JBIG2Stream::readLong(int*)@plt                             (Quality:       0       0       0       0       0       0)
0x000b5bd0 SplashState::SplashState(int, int, bool, SplashScreen*)@plt (Quality:       0       0       0       0       0       0)
0x000b6a10 OutlineItem::~OutlineItem()@plt                             (Quality:       0       0       0       0       0       0)
0x000b6a20 AnnotMovie::~AnnotMovie()@plt                               (Quality:       0       0       0       0       0       0)
0x000b6a30 ASCIIHexEncoder::fillBuf()@plt                              (Quality:       0       0       0       0       0       0)
0x000b6a40 Linearization::getEndFirst()@plt                            (Quality:       0       0       0       0       0       0)
0x000b6a50 GfxFunctionShading::~GfxFunctionShading()@plt               (Quality:       0       0       0       0       0       0)
0x000b6a60 TIFFFdOpen@plt                                              (Quality:       0       0       0       0       0       0)
0x000b6a70 PSOutputDev::doImageL1Sep(Object*, GfxImageColorMap*, bool, bool, Stream*, int, int, int, int*, Stream*, int, int, bool)@plt (Quality:       0       0       0       0       0       0)
0x000b6a80 GooString::formatUInt(unsigned long long, char*, int, bool, int, int, char**, int*, bool)@plt (Quality:       0       0       0       0       0       0)
0x000b6a90 pthread_mutex_unlock@plt                                    (Quality:       0       0       0  100000  100000  100000)
0x000b6aa0 GfxCalGrayColorSpace::~GfxCalGrayColorSpace()@plt           (Quality:       0       0       0       0       0       0)
0x000b6ab0 PSOutputDev::setupEmbeddedTrueTypeFont(GfxFont*, Ref*, GooString*)@plt (Quality:       0       0       0       0       0       0)
0x000b5bb0 TextFontInfo::matches(TextFontInfo*)@plt                    (Quality:       0       0       0       0       0       0)
0x000b6ad0 Annot::decRefCnt()@plt                                      (Quality:       0       0       0       0       0       0)
0x000b6ae0 Catalog::getForm()@plt                                      (Quality:       0       0       0       0       0       0)
0x000b6af0 std::vector<Dict*, std::allocator<Dict*> >::_M_insert_aux(__gnu_cxx::__normal_iterator<Dict**, std::vector<Dict*, std::allocator<Dict*> > >, Dict* const&)@plt (Quality:       0       0       0       2       2       2)
0x000b6b00 jpeg_set_colorspace@plt                                     (Quality:       0       0       0       0       0       0)
0x000b6b10 AnnotInk::~AnnotInk()@plt                                   (Quality:       0       0       0       0       0       0)
0x000b6b20 AnnotAppearance::referencesStream(Ref)@plt                  (Quality:       0       0       0       0       0       0)
0x000b5ba0 AnnotPopup::initialize(PDFDoc*, Dict*)@plt                  (Quality:       0       0       0       0       0       0)
0x000b6b40 Splash::scaleMaskYdXd(bool (*)(void*, unsigned char*), void*, int, int, int, int, SplashBitmap*)@plt (Quality:       0       0       0       0       0       0)
0x000b6b50 GfxCalRGBColorSpace::GfxCalRGBColorSpace()@plt              (Quality:       0       0       0       0       0       0)
0x000b6b60 SplashGouraudPattern::SplashGouraudPattern(bool, GfxState*, GfxGouraudTriangleShading*, SplashColorMode)@plt (Quality:       0       0       0       0       0       0)
0x000b6b70 opj_image_destroy@plt                                       (Quality:       0       0       0       0       0       0)
0x000b6b80 GlobalParams::getTextPageBreaks()@plt                       (Quality:       0       0       0       0       0       0)
0x000b6b90 SplashOutputDev::setOverprintMask(GfxColorSpace*, bool, int, GfxColor*, bool)@plt (Quality:       0       0       0       0       0       0)
0x000b6ba0 png_destroy_write_struct@plt                                (Quality:       0       0       0       0       0       0)
0x000b6bb0 SplashXPathScanner::addIntersection(double, double, unsigned int, int, int, int)@plt (Quality:       0       0       0       0       0       0)
0x000b6bc0 FoFiTrueType::getEmbeddingRights()@plt                      (Quality:       0       0       0       0       0       0)
0x000b6bd0 JPXStream::~JPXStream()@plt                                 (Quality:       0       0       0       0       0       0)
0x000b6be0 SampledFunction::SampledFunction(Object*, Dict*)@plt        (Quality:       0       0       0       0       0       0)
0x000b6bf0 void std::__unguarded_linear_insert<SplashXPathSeg*, __gnu_cxx::__ops::_Val_comp_iter<cmpXPathSegsFunctor> >(SplashXPathSeg*, __gnu_cxx::__ops::_Val_comp_iter<cmpXPathSegsFunctor>)@plt (Quality:       0       0       0       0       0       0)
0x000b5b90 Splash::fillGlyph(double, double, SplashGlyphBitmap*)@plt   (Quality:       0       0       0       0       0       0)
0x000b6c10 GfxLabColorSpace::~GfxLabColorSpace()@plt                   (Quality:       0       0       0       0       0       0)
0x000b6c20 Attribute::checkType(StructElement*)@plt                    (Quality:       0       0       0       0       0       0)
0x000b6c30 png_set_iCCP@plt                                            (Quality:       0       0       0       0       0       0)
0x000b6c40 MediaParameters::~MediaParameters()@plt                     (Quality:       0       0       0       0       0       0)
0x000b6c50 GDir::GDir(char*, bool)@plt                                 (Quality:       0       0       0       4       4       4)
0x000b6c60 Splash::getSoftMask()@plt                                   (Quality:       0       0       0       0       0       0)
0x000b6c70 FoFiTrueType::convertToCIDType0(char*, int*, int, void (*)(void*, char const*, int), void*)@plt (Quality:       0       0       0       0       0       0)
0x000b6c80 CharCodeToUnicode::parseCMapFromFile(GooString*, int)@plt   (Quality:       0       0       0       0       0       0)
0x000b6c90 GlobalParams::addCIDToUnicode(GooString*, GooString*)@plt   (Quality:       0       0       0       0       0       0)
0x000b5b80 SplashFontEngine::getFontFile(SplashFontFileID*)@plt        (Quality:       0       0       0       0       0       0)
0x000b6cb0 PSTokenizer::lookChar()@plt                                 (Quality:       0       0       0  100000  100000  100000)
0x000b6cc0 Hints::readBits(int, Stream*)@plt                           (Quality:       0       0       0       0       0       0)
0x000b5b60 FoFiTrueType::convertToType0(char*, int*, int, bool, void (*)(void*, char const*, int), void*)@plt (Quality:       0       0       0       0       0       0)
0x000b6ce0 TextPage::getSelectionText(PDFRectangle*, SelectionStyle)@plt (Quality:       0       0       0       0       0       0)
0x000b6cf0 JArithmeticDecoderStats::copy()@plt                         (Quality:       0       0       0       0       0       0)
0x000b6d00 SplashOutputDev::SplashOutputDev(SplashColorMode, int, bool, unsigned char*, bool, SplashThinLineMode, bool)@plt (Quality:       0       0       0       0       0       0)
0x000b6d10 GfxColorSpace::~GfxColorSpace()@plt                         (Quality:       0       0       0       0       0       0)
0x000b6d20 hypot@plt                                                   (Quality:       0       0       0       0       0       0)
0x000b6d30 sqrt@plt                                                    (Quality:       0       0       0       0       0       0)
0x000b6d40 JBIG2HuffmanDecoder::~JBIG2HuffmanDecoder()@plt             (Quality:       0       0       0       0       0       0)
0x000b6d50 AnnotTextMarkup::AnnotTextMarkup(PDFDoc*, Dict*, Object*)@plt (Quality:       0       0       0       0       0       0)
0x000b6d60 SplashXPathScanner::testSpan(int, int, int)@plt             (Quality:       0       0       0       0       0       0)
0x000b6d70 Splash::fill(SplashPath*, bool)@plt                         (Quality:       0       0       0       0       0       0)
0x000b6d80 std::vector<Attribute*, std::allocator<Attribute*> >::_M_insert_aux(__gnu_cxx::__normal_iterator<Attribute**, std::vector<Attribute*, std::allocator<Attribute*> > >, Attribute* const&)@plt (Quality:       0       0       0       0       0       0)
0x000b6d90 Splash::makeDashedPath(SplashPath*)@plt                     (Quality:       0       0       0       0       0       0)
0x000b6da0 XRef::markUnencrypted(Object*)@plt                          (Quality:       0       0       0       0       0       0)
0x000b5b50 getcwd@plt                                                  (Quality:       0       0       0       0       0       0)
0x000b6dc0 PSOutputDev::addProcessColor(double, double, double, double)@plt (Quality:       0       0       0       0       0       0)
0x000b6dd0 GooString::Set(char const*, int, char const*, int)@plt      (Quality:       0       0       0  100000  100000  100000)
0x000b6de0 ExponentialFunction::ExponentialFunction(Object*, Dict*)@plt (Quality:       0       0       0       0       0       0)
0x000b6df0 Gfx::buildImageStream()@plt                                 (Quality:       0       0       0       0       0       0)
0x000b6e00 PSOutputDev::setupEmbeddedType1Font(Ref*, GooString*)@plt   (Quality:       0       0       0       9       9       9)
0x000b6e10 PDFDoc::PDFDoc(GooString*, GooString*, GooString*, void*)@plt (Quality:       0       0       0       1       1       1)
0x000b5b40 NameTree::Entry::Entry(Array*, int)@plt                     (Quality:       0       0       0       0       0       0)
0x000b6e30 SplashScreen::createMatrix()@plt                            (Quality:       0       0       0       0       0       0)
0x000b6e40 Splash::vertFlipImage(SplashBitmap*, int, int, int)@plt     (Quality:       0       0       0       0       0       0)
0x000b6e50 GfxColorTransform::ref()@plt                                (Quality:       0       0       0       0       0       0)
0x000b6e60 ASCIIHexStream::~ASCIIHexStream()@plt                       (Quality:       0       0       0       0       0       0)
0x000b6e70 Gfx::restoreStateStack(GfxState*)@plt                       (Quality:       0       0       0       0       0       0)
0x000b6e80 PopplerCacheKey::~PopplerCacheKey()@plt                     (Quality:       0       0       0       0       0       0)
0x000b6e90 Annot::setPage(int, bool)@plt                               (Quality:       0       0       0       0       0       0)
0x000b6ea0 AnnotColor::AnnotColor()@plt                                (Quality:       0       0       0       0       0       0)
0x000b6eb0 GfxCIDFont::GfxCIDFont(XRef*, char const*, Ref, GooString*, GfxFontType, Ref, Dict*)@plt (Quality:       0       0       0       0       0       0)
0x000b5b30 void std::__heap_select<TrueTypeLoca*, __gnu_cxx::__ops::_Iter_comp_iter<cmpTrueTypeLocaOffsetFunctor> >(TrueTypeLoca*, TrueTypeLoca*, TrueTypeLoca*, __gnu_cxx::__ops::_Iter_comp_iter<cmpTrueTypeLocaOffsetFunctor>)@plt (Quality:       0       0       0       0       0       0)
0x000b6ed0 AnnotMarkup::~AnnotMarkup()@plt                             (Quality:       0       0       0       0       0       0)
0x000b6ee0 TIFFWriteScanline@plt                                       (Quality:       0       0       0       0       0       0)
0x000b6ef0 SplashBitmap::SplashBitmap(int, int, int, SplashColorMode, bool, bool, GooList*)@plt (Quality:       0       0       0       0       0       0)
0x000b6f00 Gfx::checkTransparencyGroup(Dict*)@plt                      (Quality:       0       0       0       0       0       0)
0x000b6f10 AnnotBorder::~AnnotBorder()@plt                             (Quality:       0       0       0       0       0       0)
0x000b6f20 Annots::removeAnnot(Annot*)@plt                             (Quality:       0       0       0       0       0       0)
0x000b6f30 timeToDateString(long*)@plt                                 (Quality:       0       0       0       0       0       0)
0x000b6f40 AnnotCalloutLine::AnnotCalloutLine(double, double, double, double)@plt (Quality:       0       0       0       0       0       0)
0x000b6f50 AnnotFileAttachment::AnnotFileAttachment(PDFDoc*, Dict*, Object*)@plt (Quality:       0       0       0       0       0       0)
0x000b6f60 OptionalContentGroup::setRef(Ref)@plt                       (Quality:       0       0       0       0       0       0)
0x000b6f70 Catalog::Catalog(PDFDoc*)@plt                               (Quality:       0       0       0       1       1       1)
0x000b6f80 GfxColorTransform::GfxColorTransform(void*, int, unsigned int, unsigned int)@plt (Quality:       0       0       0       0       0       0)
0x000b6f90 RunLengthStream::RunLengthStream(Stream*)@plt               (Quality:       0       0       0       0       0       0)
0x000b6fa0 strftime@plt                                                (Quality:       0       0       0       0       0       0)
0x000b6fb0 GfxSubpath::GfxSubpath(GfxSubpath*)@plt                     (Quality:       0       0       0       0       0       0)
0x000b6fc0 Form::Form(PDFDoc*, Object*)@plt                            (Quality:       0       0       0       0       0       0)
0x000b6fd0 Form::fieldLookup(Dict*, char const*, Object*)@plt          (Quality:       0       0       0       0       0       0)
0x000b6fe0 GfxState::ReusablePathIterator::setCoord(double, double)@plt (Quality:       0       0       0       0       0       0)
0x000b5b20 Splash::makeStrokePath(SplashPath*, double, bool)@plt       (Quality:       0       0       0       0       0       0)
0x000b7000 md5(unsigned char*, int, unsigned char*)@plt                (Quality:       0       0       0       0       0       0)
0x000b7010 Outline::Outline(Object*, XRef*)@plt                        (Quality:       0       0       0       0       0       0)
0x000b7020 PSOutputDev::setupType3Font(GfxFont*, GooString*, Dict*)@plt (Quality:       0       0       0       0       0       0)
0x000b7030 Gfx::pushResources(Dict*)@plt                               (Quality:       0       0       0       0       0       0)
0x000b7040 memcpy@plt                                                  (Quality:       0       0       0  100000  100000  100000)
0x000b7050 GlobalParams::findCCFontFile(GooString*)@plt                (Quality:       0       0       0       0       0       0)
0x000b7060 XRef::addIndirectObject(Object*)@plt                        (Quality:       0       0       0       0       0       0)
0x000b7070 cmsGetColorSpace@plt                                        (Quality:       0       0       0       0       0       0)
0x000b7080 TextOutputDev::~TextOutputDev()@plt                         (Quality:       0       0       0       0       0       0)
0x000b7090 GooString::insert(int, char const*, int)@plt                (Quality:       0       0       0       0       0       0)
0x000b70a0 void std::__adjust_heap<GfxFontCIDWidthExcep*, long, GfxFontCIDWidthExcep, __gnu_cxx::__ops::_Iter_comp_iter<cmpWidthExcepFunctor> >(GfxFontCIDWidthExcep*, long, long, GfxFontCIDWidthExcep, __gnu_cxx::__ops::_Iter_comp_iter<cmpWidthExcepFunctor>)@plt (Quality:       0       0       0       0       0       0)
0x000b70b0 StructTreeRoot::parse(Dict*)@plt                            (Quality:       0       0       0       0       0       0)
0x000b70c0 GfxFunctionShading::GfxFunctionShading(double, double, double, double, double*, Function**, int)@plt (Quality:       0       0       0       0       0       0)
0x000b70d0 PSOutputDev::addCustomColor(GfxSeparationColorSpace*)@plt   (Quality:       0       0       0       0       0       0)
0x000b70e0 TextSelectionDumper::~TextSelectionDumper()@plt             (Quality:       0       0       0       0       0       0)
0x000b70f0 Splash::getStrokePattern()@plt                              (Quality:       0       0       0       0       0       0)
0x000b7100 GfxAxialShading::GfxAxialShading(double, double, double, double, double, double, Function**, int, bool, bool)@plt (Quality:       0       0       0       0       0       0)
0x000b7110 TextPage::dump(void*, void (*)(void*, char const*, int), bool)@plt (Quality:       0       0       0       0       0       0)
0x000b7120 FoFiType1C::getDeltaIntArray(int*, int)@plt                 (Quality:       0       0       0       0       0       0)
0x000b7130 CharCodeToUnicode::mapToCharCode(unsigned int*, unsigned int*, int)@plt (Quality:       0       0       0       0       0       0)
0x000b7140 TextPage::beginWord(GfxState*)@plt                          (Quality:       0       0       0       0       0       0)
0x000b7150 OCDisplayNode::addChildren(GooList*)@plt                    (Quality:       0       0       0       0       0       0)
0x000b7160 GfxPattern::GfxPattern(int)@plt                             (Quality:       0       0       0       0       0       0)
0x000b7170 Parser::shift(int)@plt                                      (Quality:       0       0       0  100000  100000  100000)
0x000b7180 AnnotQuadrilaterals::AnnotQuadrilaterals(Array*, PDFRectangle*)@plt (Quality:       0       0       0       0       0       0)
0x000b7190 FoFiType1C::cvtGlyphWidth(bool, GooString*, Type1CPrivateDict*)@plt (Quality:       0       0       0       0       0       0)
0x000b71a0 SplashFontEngine::loadOpenTypeT1CFont(SplashFontFileID*, SplashFontSrc*, char const**)@plt (Quality:       0       0       0       0       0       0)
0x000b71b0 PDFDoc::getMainXRefEntriesOffset(bool)@plt                  (Quality:       0       0       0       1       1       1)
0x000b71c0 AnnotColor::adjustColor(int)@plt                            (Quality:       0       0       0       0       0       0)
0x000b71d0 GfxDeviceCMYKColorSpace::~GfxDeviceCMYKColorSpace()@plt     (Quality:       0       0       0       0       0       0)
0x000b71e0 GooString::cmpN(GooString*, int) const@plt                  (Quality:       0       0       0       0       0       0)
0x000b5b10 Linearization::getHintsLength2()@plt                        (Quality:       0       0       0       0       0       0)
0x000b7200 std::_Rb_tree<unsigned int, std::pair<unsigned int const, unsigned int>, std::_Select1st<std::pair<unsigned int const, unsigned int> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned int const, unsigned int> >*)@plt (Quality:       0       0       0       0       0       0)
0x000b5b00 FileOutStream::~FileOutStream()@plt                         (Quality:       0       0       0       0       0       0)
0x000b7220 AnnotBorderBS::AnnotBorderBS(Dict*)@plt                     (Quality:       0       0       0       0       0       0)
0x000b7230 XRef::getDocInfo(Object*)@plt                               (Quality:       0       0       0       1       1       1)
0x000b7240 JArithmeticDecoder::~JArithmeticDecoder()@plt               (Quality:       0       0       0       0       0       0)
0x000b7250 PDFDoc::getStartXRef(bool)@plt                              (Quality:       0       0       0       1       1       1)
0x000b7260 Lexer::getObj(Object*, int)@plt                             (Quality:       0       0       0  100000  100000  100000)
0x000b7270 GfxImageColorMap::getCMYK(unsigned char*, GfxCMYK*)@plt     (Quality:       0       0       0       0       0       0)
0x000b7280 GfxState::shift(double, double)@plt                         (Quality:       0       0       0  100000  100000  100000)
0x000b7290 GfxCIDFont::~GfxCIDFont()@plt                               (Quality:       0       0       0       0       0       0)
0x000b72a0 FoFiType1C::cvtGlyph(int, int, GooString*, Type1CIndex*, Type1CPrivateDict*, bool)@plt (Quality:       0       0       0       0       0       0)
0x000b72b0 PDFDoc::displayPage(OutputDev*, int, double, double, int, bool, bool, bool, bool (*)(void*), void*, bool (*)(Annot*, void*), void*, bool)@plt (Quality:       0       0       0       0       0       0)
0x000b72c0 Splash::clipToPath(SplashPath*, bool)@plt                   (Quality:       0       0       0       0       0       0)
0x000b72d0 MediaRendition::~MediaRendition()@plt                       (Quality:       0       0       0       0       0       0)
0x000b72e0 lseek64@plt                                                 (Quality:       0       0       0       3       3       3)
0x000b72f0 Splash::strokeWide(SplashPath*, double)@plt                 (Quality:       0       0       0       0       0       0)
0x000b7300 GooFile::open(GooString const*)@plt                         (Quality:       0       0       0       1       1       1)
0x000b7310 PDFDoc::writeObjectFooter(OutStream*)@plt                   (Quality:       0       0       0       0       0       0)
0x000b7320 StreamPredictor::getChars(int, unsigned char*)@plt          (Quality:       0       0       0       0       0       0)
0x000b7330 FoFiType1C::writePSString(char*, void (*)(void*, char const*, int), void*)@plt (Quality:       0       0       0       0       0       0)
0x000b7340 OutlineItem::OutlineItem(Dict*, XRef*)@plt                  (Quality:       0       0       0       0       0       0)
0x000b7350 AnnotTextMarkup::initialize(PDFDoc*, Dict*)@plt             (Quality:       0       0       0       0       0       0)
0x000b5af0 rewinddir@plt                                               (Quality:       0       0       0       0       0       0)
0x000b7370 LinkOCGState::~LinkOCGState()@plt                           (Quality:       0       0       0       0       0       0)
0x000b7380 TextBlock::isBeforeByRule1(TextBlock*)@plt                  (Quality:       0       0       0       0       0       0)
0x000b7390 AnnotAppearance::removeAllStreams()@plt                     (Quality:       0       0       0       0       0       0)
0x000b73a0 Linearization::getHintsOffset()@plt                         (Quality:       0       0       0       0       0       0)
0x000b73b0 GfxICCBasedColorSpace::~GfxICCBasedColorSpace()@plt         (Quality:       0       0       0       0       0       0)
0x000b73c0 GfxFontLoc::~GfxFontLoc()@plt                               (Quality:       0       0       0       9       9       9)
0x000b73d0 JBIG2Stream::readULong(unsigned int*)@plt                   (Quality:       0       0       0       0       0       0)
0x000b73e0 AnnotAppearanceBBox::getPageYMin() const@plt                (Quality:       0       0       0       0       0       0)
0x000b73f0 GlobalParams::getResidentUnicodeMap(GooString*)@plt         (Quality:       0       0       0       0       0       0)
0x000b7400 JBIG2Stream::readGenericRefinementRegion(int, int, int, bool, JBIG2Bitmap*, int, int, int*, int*)@plt (Quality:       0       0       0       0       0       0)
0x000b7410 GooString::~GooString()@plt                                 (Quality:       0       0       0  100000  100000  100000)
0x000b7420 ObjectStream::getObject(int, int, Object*)@plt              (Quality:       0       0       0       0       0       0)
0x000b7430 GfxState::parseBlendMode(Object*, GfxBlendMode*)@plt        (Quality:       0       0       0       0       0       0)
0x000b7440 Splash::scaleMaskYuXu(bool (*)(void*, unsigned char*), void*, int, int, int, int, SplashBitmap*)@plt (Quality:       0       0       0       0       0       0)
0x000b7450 SplashFont::getGlyph(int, int, int, SplashGlyphBitmap*, int, int, SplashClip*, SplashClipResult*)@plt (Quality:       0       0       0       0       0       0)
0x000b7460 FileOutStream::close()@plt                                  (Quality:       0       0       0       0       0       0)
0x000b7470 PSOutputDev::setupExternalCIDTrueTypeFont(GfxFont*, GooString*, GooString*, bool)@plt (Quality:       0       0       0       0       0       0)
0x000b7480 Splash::getStrokeAdjust()@plt                               (Quality:       0       0       0       0       0       0)
0x000b7490 LinkGoToR::~LinkGoToR()@plt                                 (Quality:       0       0       0       0       0       0)
0x000b5ae0 GfxLabColorSpace::GfxLabColorSpace()@plt                    (Quality:       0       0       0       0       0       0)
0x000b74b0 StructElement::StructElement(Ref const&, StructTreeRoot*, StructElement*)@plt (Quality:       0       0       0       0       0       0)
0x000b74c0 OCGs::evalOCVisibilityExpr(Object*, int)@plt                (Quality:       0       0       0       0       0       0)
0x000b74d0 XRef::constructXRef(bool*, bool)@plt                        (Quality:       0       0       0       0       0       0)
0x000b74e0 AnnotQuadrilaterals::getY1(int)@plt                         (Quality:       0       0       0       0       0       0)
0x000b74f0 AnnotCaret::AnnotCaret(PDFDoc*, Dict*, Object*)@plt         (Quality:       0       0       0       0       0       0)
0x000b7500 SplashState::setStrokePattern(SplashPattern*)@plt           (Quality:       0       0       0       0       0       0)
0x000b7510 Form::createFieldFromDict(Object*, PDFDoc*, Ref const&, FormField*, std::set<int, std::less<int>, std::allocator<int> >*)@plt (Quality:       0       0       0       0       0       0)
0x000b7520 ASCII85Encoder::ASCII85Encoder(Stream*)@plt                 (Quality:       0       0       0       2       2       2)
0x000b7530 Gfx::doImage(Object*, Stream*, bool)@plt                    (Quality:       0       0       0       4       4       4)
0x000b7540 SampledFunction::~SampledFunction()@plt                     (Quality:       0       0       0       0       0       0)
0x000b7550 OutStream::~OutStream()@plt                                 (Quality:       0       0       0       0       0       0)
0x000b7560 void std::__move_median_to_first<DictEntry*, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(DictEntry const&, DictEntry const&)> >(DictEntry*, DictEntry*, DictEntry*, DictEntry*, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(DictEntry const&, DictEntry const&)>)@plt (Quality:       0       0       0       0       0       0)
0x000b7570 UTF16toUCS4(unsigned int const*, int, unsigned int**)@plt   (Quality:       0       0       0       0       0       0)
0x000b7580 TextWord::TextWord(GfxState*, int, double)@plt              (Quality:       0       0       0       0       0       0)
0x000b7590 GfxSeparationColorSpace::parse(GfxResources*, Array*, OutputDev*, GfxState*, int)@plt (Quality:       0       0       0       0       0       0)
0x000b75a0 unicodeTypeNum(unsigned int)@plt                            (Quality:       0       0       0       0       0       0)
0x000b5ad0 AnnotBorderBS::getStyleName() const@plt                     (Quality:       0       0       0       0       0       0)
0x000b75c0 Annot::setLineStyleForBorder(AnnotBorder*)@plt              (Quality:       0       0       0       0       0       0)
0x000b75d0 pow@plt                                                     (Quality:       0       0       0  100000  100000  100000)
0x000b75e0 CMap::CMap(GooString*, GooString*)@plt                      (Quality:       0       0       0       0       0       0)
0x000b75f0 SplashScreen::buildClusteredMatrix()@plt                    (Quality:       0       0       0       0       0       0)
0x000b7600 MediaWindowParameters::parseFWParams(Object*)@plt           (Quality:       0       0       0       0       0       0)
0x000b5ab0 Linearization::getHintsLength()@plt                         (Quality:       0       0       0       0       0       0)
0x000b7620 SplashFTFontEngine::loadOpenTypeCFFFont(SplashFontFileID*, SplashFontSrc*, int*, int)@plt (Quality:       0       0       0       0       0       0)
0x000b7630 TiffWriter::TiffWriter(TiffWriter::Format)@plt              (Quality:       0       0       0       0       0       0)
0x000b7640 CMap::~CMap()@plt                                           (Quality:       0       0       0       0       0       0)
0x000b7650 OCDisplayNode::OCDisplayNode(OptionalContentGroup*)@plt     (Quality:       0       0       0       0       0       0)
0x000b7660 Splash::flattenPath(SplashPath*, double*, double)@plt       (Quality:       0       0       0       0       0       0)
0x000b7670 LinkDest::LinkDest(Array*)@plt                              (Quality:       0       0       0       0       0       0)
0x000b7680 PDFDoc::writeString(GooString*, OutStream*, unsigned char*, CryptAlgorithm, int, int, int)@plt (Quality:       0       0       0       0       0       0)
0x000b7690 GfxState::ReusablePathIterator::next()@plt                  (Quality:       0       0       0       0       0       0)
0x000b76a0 JArithmeticDecoder::start()@plt                             (Quality:       0       0       0       0       0       0)
0x000b76b0 GfxShadingBitBuf::GfxShadingBitBuf(Stream*)@plt             (Quality:       0       0       0       0       0       0)
0x000b76c0 JArithmeticDecoderStats::~JArithmeticDecoderStats()@plt     (Quality:       0       0       0       0       0       0)
0x000b76d0 BaseCryptStream::~BaseCryptStream()@plt                     (Quality:       0       0       0       0       0       0)
0x000b76e0 FoFiTrueType::getCIDToGIDMap(int*)@plt                      (Quality:       0       0       0       0       0       0)
0x000b76f0 GlobalParams::getTextKeepTinyChars()@plt                    (Quality:       0       0       0       0       0       0)
0x000b7700 GfxIndexedColorSpace::parse(GfxResources*, Array*, OutputDev*, GfxState*, int)@plt (Quality:       0       0       0       0       0       0)
0x000b5a90 std::vector<StructTreeRoot::Parent, std::allocator<StructTreeRoot::Parent> >::operator=(std::vector<StructTreeRoot::Parent, std::allocator<StructTreeRoot::Parent> > const&)@plt (Quality:       0       0       0       0       0       0)
0x000b7720 SplashClip::clipToPath(SplashPath*, double*, double, bool)@plt (Quality:       0       0       0       0       0       0)
0x000b7730 time@plt                                                    (Quality:       0       0       0       0       0       0)
0x000b7740 parseAnnotLineEndingStyle(GooString*)@plt                   (Quality:       0       0       0       0       0       0)
0x000b7750 CCITTFaxStream::getWhiteCode()@plt                          (Quality:       0       0       0       0       0       0)
0x000b7760 GfxImageColorMap::GfxImageColorMap(int, Object*, GfxColorSpace*)@plt (Quality:       0       0       0       2       2       2)
0x000b7770 AnnotWidget::drawListBox(FormFieldChoice*, GooString*, GfxResources*, int)@plt (Quality:       0       0       0       0       0       0)
0x000b7780 strcpy@plt                                                  (Quality:       0       0       0  100000  100000  100000)
0x000b7790 GfxUnivariateShading::~GfxUnivariateShading()@plt           (Quality:       0       0       0       0       0       0)
0x000b77a0 PDFDoc::markDictionnary(Dict*, XRef*, XRef*, unsigned int, int, int)@plt (Quality:       0       0       0       0       0       0)
0x000b77b0 Splash::setFillOverprint(bool)@plt                          (Quality:       0       0       0       0       0       0)
0x000b5a80 TiffWriter::~TiffWriter()@plt                               (Quality:       0       0       0       0       0       0)
0x000b77d0 StitchingFunction::StitchingFunction(StitchingFunction const*)@plt (Quality:       0       0       0       0       0       0)
0x000b77e0 GfxResources::lookupPattern(char*, OutputDev*, GfxState*)@plt (Quality:       0       0       0       0       0       0)
0x000b77f0 GooHash::add(GooString*, void*)@plt                         (Quality:       0       0       0       6       6       6)
0x000b7800 OutlineItem::close()@plt                                    (Quality:       0       0       0       0       0       0)
0x000b7810 AnnotPopup::~AnnotPopup()@plt                               (Quality:       0       0       0       0       0       0)
0x000b7820 FoFiType1C::getDeltaFPArray(double*, int)@plt               (Quality:       0       0       0       0       0       0)
0x000b5a70 Annot::inRect(double, double) const@plt                     (Quality:       0       0       0       0       0       0)
0x000b7840 ImageStream::getLine()@plt                                  (Quality:       0       0       0       0       0       0)
0x000b7850 StreamPredictor::lookChar()@plt                             (Quality:       0       0       0       0       0       0)
0x000b7860 FoFiTrueType::convertToCIDType2(char*, int*, int, bool, void (*)(void*, char const*, int), void*)@plt (Quality:       0       0       0       0       0       0)
0x000b7870 operator delete(void*)@plt                                  (Quality:       0       0       0  100000  100000  100000)
0x000b7880 Splash::setLineDash(double*, int, double)@plt               (Quality:       0       0       0       0       0       0)
0x000b7890 PSOutputDev::setupExternalType1Font(GooString*, GooString*)@plt (Quality:       0       0       0       0       0       0)
0x000b78a0 Annot::incRefCnt()@plt                                      (Quality:       0       0       0       0       0       0)
0x000b78b0 XRef::readXRefStreamSection(Stream*, int*, int, int)@plt    (Quality:       0       0       0       0       0       0)
0x000b78c0 TextLine::addWord(TextWord*)@plt                            (Quality:       0       0       0       0       0       0)
0x000b78d0 void std::__adjust_heap<TrueTypeLoca*, long, TrueTypeLoca, __gnu_cxx::__ops::_Iter_comp_iter<cmpTrueTypeLocaIdxFunctor> >(TrueTypeLoca*, long, long, TrueTypeLoca, __gnu_cxx::__ops::_Iter_comp_iter<cmpTrueTypeLocaIdxFunctor>)@plt (Quality:       0       0       0       0       0       0)
0x000b78e0 cmsCreateXYZProfile@plt                                     (Quality:       0       0       0       0       0       0)
0x000b78f0 acos@plt                                                    (Quality:       0       0       0       0       0       0)
0x000b7900 CachedFile::decRefCnt()@plt                                 (Quality:       0       0       0       0       0       0)
0x000b7910 RunLengthEncoder::~RunLengthEncoder()@plt                   (Quality:       0       0       0       0       0       0)
0x000b7920 JBIG2Bitmap::~JBIG2Bitmap()@plt                             (Quality:       0       0       0       0       0       0)
0x000b7930 SplashFontSrc::SplashFontSrc()@plt                          (Quality:       0       0       0       0       0       0)
0x000b7940 AnnotAppearance::getAppearanceStream(AnnotAppearance::AnnotAppearanceType, char const*, Object*)@plt (Quality:       0       0       0       0       0       0)
0x000b7950 StandardSecurityHandler::~StandardSecurityHandler()@plt     (Quality:       0       0       0       0       0       0)
0x000b7960 Hints::readSharedObjectsTable(Stream*)@plt                  (Quality:       0       0       0       0       0       0)
0x000b7970 FoFiTrueType::getCmapPlatform(int)@plt                      (Quality:       0       0       0       0       0       0)
0x000b7980 PSTokenizer::consumeChar()@plt                              (Quality:       0       0       0  100000  100000  100000)
0x000b7990 SplashFTFont::SplashFTFont(SplashFTFontFile*, double*, double*)@plt (Quality:       0       0       0       0       0       0)
0x000b5a60 XRef::writeXRef(XRef::XRefWriter*, bool)@plt                (Quality:       0       0       0       0       0       0)
0x000b79b0 Array::get(int, Object*, int)@plt                           (Quality:       0       0       0  100000  100000  100000)
0x000b79c0 SplashFTFont::~SplashFTFont()@plt                           (Quality:       0       0       0       0       0       0)
0x000b79d0 LinkAction::parseAction(Object*, GooString*)@plt            (Quality:       0       0       0       0       0       0)
0x000b79e0 PSOutputDev::setupExternalTrueTypeFont(GfxFont*, GooString*, GooString*)@plt (Quality:       0       0       0       0       0       0)
0x000b79f0 Gfx::doFunctionShFill1(GfxFunctionShading*, double, double, double, double, GfxColor*, int)@plt (Quality:       0       0       0       0       0       0)
0x000b7a00 OutlineItem::readItemList(Object*, Object*, XRef*)@plt      (Quality:       0       0       0       0       0       0)
0x000b5a50 SplashPath::grow(int)@plt                                   (Quality:       0       0       0       0       0       0)
0x000b7a20 FormWidgetButton::getOnStr()@plt                            (Quality:       0       0       0       0       0       0)
0x000b7a30 PDFDoc::ErrorPDFDoc(int, GooString*)@plt                    (Quality:       0       0       0       0       0       0)
0x000b7a40 UnicodeMap::~UnicodeMap()@plt                               (Quality:       0       0       0       6       6       6)
0x000b5a40 SplashXPath::SplashXPath(SplashPath*, double*, double, bool, bool, int)@plt (Quality:       0       0       0       0       0       0)
0x000b7a60 TextPage::TextPage(bool)@plt                                (Quality:       0       0       0       0       0       0)
0x000b7a70 XRef::writeStreamToBuffer(GooString*, Dict*, XRef*)@plt     (Quality:       0       0       0       0       0       0)
0x000b7a80 PostScriptFunction::resizeCode(int)@plt                     (Quality:       0       0       0       0       0       0)
0x000b7a90 GlobalParams::setupBaseFonts(char*)@plt                     (Quality:       0       0       0       0       0       0)
0x000b5a30 TextPool::~TextPool()@plt                                   (Quality:       0       0       0       0       0       0)
0x000b7ab0 FoFiType1C::FoFiType1C(char*, int, bool)@plt                (Quality:       0       0       0       0       0       0)
0x000b7ac0 FormWidget::~FormWidget()@plt                               (Quality:       0       0       0       0       0       0)
0x000b7ad0 Gfx::doGouraudTriangleShFill(GfxGouraudTriangleShading*)@plt (Quality:       0       0       0       0       0       0)
0x000b7ae0 GlobalParams::findFontFile(GooString*)@plt                  (Quality:       0       0       0       0       0       0)
0x000b5a20 GlobalParams::addCMapDir(GooString*, GooString*)@plt        (Quality:       0       0       0       0       0       0)
0x000b7b00 Splash::drawImage(bool (*)(void*, unsigned char*, unsigned char*), void*, SplashColorMode, bool, int, int, double*, bool, bool)@plt (Quality:       0       0       0       0       0       0)
0x000b7b10 PopplerObjectCache::lookup(Ref const&, Object*)@plt         (Quality:       0       0       0       0       0       0)
0x000b7b20 Page::replaceXRef(XRef*)@plt                                (Quality:       0       0       0       0       0       0)
0x000b7b30 Splash::pipeInit(SplashPipe*, int, int, SplashPattern*, unsigned char*, unsigned char, bool, bool, bool, unsigned char)@plt (Quality:       0       0       0       0       0       0)
0x000b7b40 GfxRadialShading::GfxRadialShading(double, double, double, double, double, double, double, double, Function**, int, bool, bool)@plt (Quality:       0       0       0       0       0       0)
0x000b7b50 Function::Function(Function const*)@plt                     (Quality:       0       0       0       0       0       0)
0x000b7b60 AnnotCalloutMultiLine::AnnotCalloutMultiLine(double, double, double, double, double, double)@plt (Quality:       0       0       0       0       0       0)
0x000b7b70 SplashPath::addStrokeAdjustHint(int, int, int, int)@plt     (Quality:       0       0       0       0       0       0)
0x000b7b80 SplashXPathScanner::test(int, int)@plt                      (Quality:       0       0       0       0       0       0)
0x000b7b90 TextPage::dumpFragment(unsigned int*, int, UnicodeMap*, GooString*)@plt (Quality:       0       0       0       0       0       0)
0x000b7ba0 LinkRendition::LinkRendition(Object*)@plt                   (Quality:       0       0       0       0       0       0)
0x000b7bb0 fclose@plt                                                  (Quality:       0       0       0       1       1       1)
0x000b7bc0 operator new(unsigned long)@plt                             (Quality:       0       0       0  100000  100000  100000)
0x000b7bd0 SplashBitmap::getPixel(int, int, unsigned char*)@plt        (Quality:       0       0       0       0       0       0)
0x000b7be0 Movie::copy()@plt                                           (Quality:       0       0       0       0       0       0)
0x000b7bf0 rand_r@plt                                                  (Quality:       0       0       0       0       0       0)
0x000b7c00 cmsCreateTransform@plt                                      (Quality:       0       0       0       0       0       0)
0x000b7c10 GfxShadingPattern::~GfxShadingPattern()@plt                 (Quality:       0       0       0       0       0       0)
0x000b7c20 GfxShading::parse(GfxResources*, Object*, OutputDev*, GfxState*)@plt (Quality:       0       0       0       0       0       0)
0x000b7c30 __xstat@plt                                                 (Quality:       0       0       0       0       0       0)
0x000b7c40 GfxPatchMeshShading::~GfxPatchMeshShading()@plt             (Quality:       0       0       0       0       0       0)
0x000b7c50 grandom_double@plt                                          (Quality:       0       0       0       0       0       0)
0x000b7c60 SplashPath::~SplashPath()@plt                               (Quality:       0       0       0       0       0       0)
0x000b7c70 Attribute::Attribute(char const*, int, Object*)@plt         (Quality:       0       0       0       0       0       0)
0x000b7c80 FoFiTrueType::checkGIDInCoverage(unsigned int, unsigned int)@plt (Quality:       0       0       0       0       0       0)
0x000b7c90 TextPool::TextPool()@plt                                    (Quality:       0       0       0       0       0       0)
0x000b7ca0 JBIG2HuffmanDecoder::buildTable(JBIG2HuffmanTable*, unsigned int)@plt (Quality:       0       0       0       0       0       0)
0x000b7cb0 Splash::saveState()@plt                                     (Quality:       0       0       0       0       0       0)
0x000b7cc0 FT_Get_Name_Index@plt                                       (Quality:       0       0       0       0       0       0)
0x000b7cd0 AnnotMovie::AnnotMovie(PDFDoc*, Dict*, Object*)@plt         (Quality:       0       0       0       0       0       0)
0x000b7ce0 JBIG2Bitmap::combine(JBIG2Bitmap*, int, int, unsigned int)@plt (Quality:       0       0       0       0       0       0)
0x000b7cf0 Stream::~Stream()@plt                                       (Quality:       0       0       0       0       0       0)
0x000b7d00 PSOutputDev::setupEmbeddedCIDTrueTypeFont(GfxFont*, Ref*, GooString*, bool)@plt (Quality:       0       0       0       0       0       0)
0x000b7d10 Stream::toUnsignedChars(int*, int, int)@plt                 (Quality:       0       0       0       0       0       0)
0x000b7d20 std::vector<TextSpan, std::allocator<TextSpan> >::_M_insert_aux(__gnu_cxx::__normal_iterator<TextSpan*, std::vector<TextSpan, std::allocator<TextSpan> > >, TextSpan const&)@plt (Quality:       0       0       0       0       0       0)
0x000b7d30 EmbFile::~EmbFile()@plt                                     (Quality:       0       0       0       0       0       0)
0x000b7d40 opj_cio_close@plt                                           (Quality:       0       0       0       0       0       0)
0x000b5a10 NameTree::Entry::~Entry()@plt                               (Quality:       0       0       0       0       0       0)
0x000b7d60 Splash::stroke(SplashPath*)@plt                             (Quality:       0       0       0       0       0       0)
0x000b7d70 GDir::getNextEntry()@plt                                    (Quality:       0       0       0       4       4       4)
0x000b7d80 Hints::readTables(BaseStream*, Linearization*, XRef*, SecurityHandler*)@plt (Quality:       0       0       0       0       0       0)
0x000b7d90 png_write_end@plt                                           (Quality:       0       0       0       0       0       0)
0x000b7da0 TextLine::primaryDelta(TextLine*)@plt                       (Quality:       0       0       0       0       0       0)
0x000b5a00 FormFieldButton::getState(char*)@plt                        (Quality:       0       0       0       0       0       0)
0x000b7dc0 GfxResources::lookupXObjectNF(char*, Object*)@plt           (Quality:       0       0       0       4       4       4)
0x000b7dd0 EmbedStream::~EmbedStream()@plt                             (Quality:       0       0       0       0       0       0)
0x000b7de0 Splash::arbitraryTransformMask(bool (*)(void*, unsigned char*), void*, int, int, double*, bool)@plt (Quality:       0       0       0       0       0       0)
0x000b59f0 Splash::~Splash()@plt                                       (Quality:       0       0       0       0       0       0)
0x000b7e00 JBIG2MMRDecoder::reset()@plt                                (Quality:       0       0       0       0       0       0)
0x000b7e10 GooList::GooList()@plt                                      (Quality:       0       0       0       8       8       8)
0x000b7e20 GfxAxialShading::~GfxAxialShading()@plt                     (Quality:       0       0       0       0       0       0)
0x000b7e30 GlobalParams::parseYesNo2(char const*, bool*)@plt           (Quality:       0       0       0       0       0       0)
0x000b59e0 ImageStream::~ImageStream()@plt                             (Quality:       0       0       0       0       0       0)
0x000b7e50 GooString::GooString(GooString const*)@plt                  (Quality:       0       0       0  100000  100000  100000)
0x000b7e60 XRef::XRef()@plt                                            (Quality:       0       0       0       0       0       0)
0x000b7e70 AnnotBorder::parseDashArray(Object*)@plt                    (Quality:       0       0       0       0       0       0)
0x000b7e80 GlobalParams::getScreenBlackThreshold()@plt                 (Quality:       0       0       0       0       0       0)
0x000b7e90 Page::getResourceDictCopy(XRef*)@plt                        (Quality:       0       0       0       0       0       0)
0x000b7ea0 FoFiTrueType::getCmapEncoding(int)@plt                      (Quality:       0       0       0       0       0       0)
0x000b7eb0 CMap::setReverseMapVector(unsigned int, CMapVectorEntry*, unsigned int*, unsigned int, unsigned int)@plt (Quality:       0       0       0       0       0       0)
0x000b7ec0 Matrix::invertTo(Matrix*) const@plt                         (Quality:       0       0       0       0       0       0)
0x000b7ed0 LZWStream::getCode()@plt                                    (Quality:       0       0       0       0       0       0)
0x000b7ee0 FormPageWidgets::FormPageWidgets(Annots*, unsigned int, Form*)@plt (Quality:       0       0       0       0       0       0)
0x000b7ef0 PSOutputDev::writePSTextLine(GooString*)@plt                (Quality:       0       0       0       1       1       1)
0x000b7f00 std::_Rb_tree_decrement(std::_Rb_tree_node_base*)@plt       (Quality:       0       0       0       0       0       0)
0x001c4770 void std::__heap_select<SplashIntersect*, __gnu_cxx::__ops::_Iter_comp_iter<cmpIntersectFunctor> >(SplashIntersect*, SplashIntersect*, SplashIntersect*, __gnu_cxx::__ops::_Iter_comp_iter<cmpIntersectFunctor>) (Quality:       0       0       0       0       0       0)
0x000b7f20 DecryptStream::DecryptStream(Stream*, unsigned char*, CryptAlgorithm, int, int, int)@plt (Quality:       0       0       0       0       0       0)
0x000b59d0 FT_Outline_Check@plt                                        (Quality:       0       0       0       0       0       0)
0x000b59c0 PopplerCacheKey::~PopplerCacheKey()@plt                     (Quality:       0       0       0       0       0       0)
0x000b7f50 error(ErrorCategory, long long, char const*, ...)@plt       (Quality:       0       0       0       0       0       0)
0x000b7f60 XRef::XRef(BaseStream*, long long, long long, bool*, bool)@plt (Quality:       0       0       0       1       1       1)
0x000b7f70 Annot::drawCircle(double, double, double, bool)@plt         (Quality:       0       0       0       0       0       0)
0x000b7f80 std::vector<long long, std::allocator<long long> >::_M_insert_aux(__gnu_cxx::__normal_iterator<long long*, std::vector<long long, std::allocator<long long> > >, long long const&)@plt (Quality:       0       0       0       0       0       0)
0x000b7f90 fileno@plt                                                  (Quality:       0       0       0       0       0       0)
0x000b59b0 ASCII85Encoder::~ASCII85Encoder()@plt                       (Quality:       0       0       0       2       2       2)
0x000b59a0 GlobalParams::addUnicodeMap(GooString*, GooString*)@plt     (Quality:       0       0       0       0       0       0)
0x000b7fc0 AnnotBorderArray::AnnotBorderArray(Array*)@plt              (Quality:       0       0       0       0       0       0)
0x000b7fd0 Function::~Function()@plt                                   (Quality:       0       0       0       0       0       0)
0x000b7fe0 fdopen@plt                                                  (Quality:       0       0       0       0       0       0)
0x000b5990 CachedFileStream::CachedFileStream(CachedFile*, long long, bool, long long, Object*)@plt (Quality:       0       0       0       0       0       0)
0x000b8000 FcConfigSubstitute@plt                                      (Quality:       0       0       0       0       0       0)
0x000b8010 AnnotBorderEffect::AnnotBorderEffect(Dict*)@plt             (Quality:       0       0       0       0       0       0)
0x000b8020 jpeg_finish_compress@plt                                    (Quality:       0       0       0       0       0       0)
0x000b5980 log10@plt                                                   (Quality:       0       0       0       0       0       0)
0x000b8040 TextBlock::visitDepthFirst(TextBlock*, int, TextBlock**, int, bool*)@plt (Quality:       0       0       0       0       0       0)
0x000b8050 EOFStream::~EOFStream()@plt                                 (Quality:       0       0       0       0       0       0)
0x000b8060 SplashXPathScanner::getNextSpan(int, int*, int*)@plt        (Quality:       0       0       0       0       0       0)
0x000b5970 FoFiBase::getU32LE(int, bool*)@plt                          (Quality:       0       0       0       0       0       0)
0x000b8080 StreamPredictor::getChar()@plt                              (Quality:       0       0       0       0       0       0)
0x000b8090 JBIG2Stream::readByte(int*)@plt                             (Quality:       0       0       0       0       0       0)
0x000b80a0 StructElement::StructData::StructData()@plt                 (Quality:       0       0       0       0       0       0)
0x000b80b0 DeviceNRecoder::~DeviceNRecoder()@plt                       (Quality:       0       0       0       0       0       0)
0x000b80c0 SplashOutputDev::~SplashOutputDev()@plt                     (Quality:       0       0       0       0       0       0)
0x000b80d0 AnnotAppearance::removeStream(Ref)@plt                      (Quality:       0       0       0       0       0       0)
0x000b80e0 Catalog::getPageRef(int)@plt                                (Quality:       0       0       0       0       0       0)
0x000b80f0 std::vector<Ref, std::allocator<Ref> >::_M_insert_aux(__gnu_cxx::__normal_iterator<Ref*, std::vector<Ref, std::allocator<Ref> > >, Ref const&)@plt (Quality:       0       0       0       2       2       2)
0x000b8100 IdentityFunction::~IdentityFunction()@plt                   (Quality:       0       0       0       0       0       0)
0x000b8110 T3FontCache::~T3FontCache()@plt                             (Quality:       0       0       0       0       0       0)
0x000b8120 PSOutputDev::opiBegin20(GfxState*, Dict*)@plt               (Quality:       0       0       0       0       0       0)
0x000b5960 GfxState::textShift(double, double)@plt                     (Quality:       0       0       0  100000  100000  100000)
0x000b8140 SplashScreen::SplashScreen(SplashScreen*)@plt               (Quality:       0       0       0       0       0       0)
0x000b8150 SplashFontEngine::getAA()@plt                               (Quality:       0       0       0       0       0       0)
0x000b8160 PSOutputDev::doImageL2(Object*, GfxImageColorMap*, bool, bool, Stream*, int, int, int, int*, Stream*, int, int, bool)@plt (Quality:       0       0       0       2       2       2)
0x000b5950 PDFDoc::writePageObjects(OutStream*, XRef*, unsigned int, bool)@plt (Quality:       0       0       0       0       0       0)
0x000b8180 FcPatternBuild@plt                                          (Quality:       0       0       0       0       0       0)
0x000b8190 Function::init(Dict*)@plt                                   (Quality:       0       0       0       0       0       0)
0x000b81a0 AnnotFreeText::AnnotFreeText(PDFDoc*, Dict*, Object*)@plt   (Quality:       0       0       0       0       0       0)
0x000b81b0 SplashFTFontEngine::loadCIDFont(SplashFontFileID*, SplashFontSrc*)@plt (Quality:       0       0       0       0       0       0)
0x000b81c0 png_set_longjmp_fn@plt                                      (Quality:       0       0       0       0       0       0)
0x000b81d0 FT_Outline_Decompose@plt                                    (Quality:       0       0       0       0       0       0)
0x000b81e0 opj_set_default_decoder_parameters@plt                      (Quality:       0       0       0       0       0       0)
0x000b81f0 __ctype_b_loc@plt                                           (Quality:       0       0       0       1       1       1)
0x000b8200 XRef::readXRefUntil(int, std::vector<int, std::allocator<int> >*)@plt (Quality:       0       0       0       0       0       0)
0x000b8210 strcasecmp@plt                                              (Quality:       0       0       0       0       0       0)
0x000b8220 AnnotBorder::AnnotBorder()@plt                              (Quality:       0       0       0       0       0       0)
0x000b8230 unicodeIsAlphabeticPresentationForm(unsigned int)@plt       (Quality:       0       0       0  100000  100000  100000)
0x000b5940 Movie::Movie(Object*, Object*)@plt                          (Quality:       0       0       0       0       0       0)
0x000b5930 SplashState::setSoftMask(SplashBitmap*)@plt                 (Quality:       0       0       0       0       0       0)
0x000b8260 Hints::Hints(BaseStream*, Linearization*, XRef*, SecurityHandler*)@plt (Quality:       0       0       0       0       0       0)
0x000b8270 Dict::set(char const*, Object*)@plt                         (Quality:       0       0       0       0       0       0)
0x000b8280 TextSelectionDumper::startLine()@plt                        (Quality:       0       0       0       0       0       0)
0x000b8290 SplashFontEngine::loadType1Font(SplashFontFileID*, SplashFontSrc*, char const**)@plt (Quality:       0       0       0       0       0       0)
0x000b82a0 Splash::setStrokeAdjust(bool)@plt                           (Quality:       0       0       0       0       0       0)
0x000b82b0 jpeg_write_scanlines@plt                                    (Quality:       0       0       0       0       0       0)
0x000b82c0 EmbedStream::EmbedStream(Stream*, Object*, bool, long long)@plt (Quality:       0       0       0       0       0       0)
0x000b82d0 XRef::parseEntry(long long, XRefEntry*)@plt                 (Quality:       0       0       0       0       0       0)
0x000b82e0 Annot::Annot(PDFDoc*, PDFRectangle*)@plt                    (Quality:       0       0       0       0       0       0)
0x000b82f0 UnicodeMapCache::getUnicodeMap(GooString*)@plt              (Quality:       0       0       0       0       0       0)
0x000b8300 GfxState::setFillPattern(GfxPattern*)@plt                   (Quality:       0       0       0       0       0       0)
0x000b5920 FormFieldChoice::select(int)@plt                            (Quality:       0       0       0       0       0       0)
0x000b8320 UnicodeMapCache::UnicodeMapCache()@plt                      (Quality:       0       0       0       1       1       1)
0x000b5910 OCGs::allOn(Array*)@plt                                     (Quality:       0       0       0       0       0       0)
0x000b8340 GfxPattern::parse(GfxResources*, Object*, OutputDev*, GfxState*)@plt (Quality:       0       0       0       0       0       0)
0x000b8350 strrchr@plt                                                 (Quality:       0       0       0       0       0       0)
0x000b8360 fseek@plt                                                   (Quality:       0       0       0       0       0       0)
0x000b8370 SampledFunction::transform(double*, double*)@plt            (Quality:       0       0       0       0       0       0)
0x000b8380 Splash::fillGlyph2(int, int, SplashGlyphBitmap*, bool)@plt  (Quality:       0       0       0       0       0       0)
0x000b8390 Annot::layoutText(GooString*, GooString*, int*, GfxFont*, double*, double, int*, bool)@plt (Quality:       0       0       0       0       0       0)
0x000b83a0 Annot::createForm(double*, bool, Object*, Object*)@plt      (Quality:       0       0       0       0       0       0)
0x000b83b0 SplashBitmap::copy(SplashBitmap*)@plt                       (Quality:       0       0       0       0       0       0)
0x000b83c0 GooString::formatDouble(double, char*, int, int, bool, char**, int*)@plt (Quality:       0       0       0  100000  100000  100000)
0x000b83d0 FoFiBase::getU16BE(int, bool*)@plt                          (Quality:       0       0       0       0       0       0)
0x000b83e0 Form::~Form()@plt                                           (Quality:       0       0       0       0       0       0)
0x000b83f0 Splash::setLineCap(int)@plt                                 (Quality:       0       0       0       0       0       0)
0x000b8400 Splash::strokeNarrow(SplashPath*)@plt                       (Quality:       0       0       0       0       0       0)
0x000b8410 LinkNamed::~LinkNamed()@plt                                 (Quality:       0       0       0       0       0       0)
0x000b8420 TextSelectionDumper::finishLine()@plt                       (Quality:       0       0       0       0       0       0)
0x000b58f0 GooHash::GooHash(bool)@plt                                  (Quality:       0       0       0       9       9       9)
0x000b8440 JBIG2SymbolDict::~JBIG2SymbolDict()@plt                     (Quality:       0       0       0       0       0       0)
0x000b8450 Gfx::doShadingPatternFill(GfxShadingPattern*, bool, bool, bool)@plt (Quality:       0       0       0       0       0       0)
0x000b58e0 SysFontInfo::match(GooString*, bool, bool)@plt              (Quality:       0       0       0       0       0       0)
0x000b8470 PSOutputDev::writePSName(char const*)@plt                   (Quality:       0       0       0    2305    2305    2305)
0x000b8480 AnnotBorderBS::AnnotBorderBS()@plt                          (Quality:       0       0       0       0       0       0)
0x000b8490 Form::postWidgetsLoad()@plt                                 (Quality:       0       0       0       0       0       0)
0x000b84a0 fputs@plt                                                   (Quality:       0       0       0       0       0       0)
0x000b84b0 JBIG2Stream::resetRefinementStats(unsigned int, JArithmeticDecoderStats*)@plt (Quality:       0       0       0       0       0       0)
0x000b84c0 GfxFunctionShading::parse(GfxResources*, Dict*, OutputDev*, GfxState*)@plt (Quality:       0       0       0       0       0       0)
0x000b84d0 GooString::appendf(char const*, ...)@plt                    (Quality:       0       0       0       0       0       0)
0x000b84e0 FormField::FormField(PDFDoc*, Object*, Ref const&, FormField*, std::set<int, std::less<int>, std::allocator<int> >*, FormFieldType)@plt (Quality:       0       0       0       0       0       0)
0x000b84f0 __dynamic_cast@plt                                          (Quality:       0       0       0       0       0       0)
0x000b8500 JArithmeticDecoder::byteIn()@plt                            (Quality:       0       0       0       0       0       0)
0x000b8510 FoFiTrueType::dumpString(unsigned char*, int, void (*)(void*, char const*, int), void*)@plt (Quality:       0       0       0       0       0       0)
0x000b8520 TextPage::endPage()@plt                                     (Quality:       0       0       0       0       0       0)
0x000b8530 Splash::scaleImageYdXd(bool (*)(void*, unsigned char*, unsigned char*), void*, SplashColorMode, int, bool, int, int, int, int, SplashBitmap*)@plt (Quality:       0       0       0       0       0       0)
0x000b58d0 GlobalParams::getUnicodeMap2(GooString*)@plt                (Quality:       0       0       0       0       0       0)
0x000b8550 PSFontParam16::~PSFontParam16()@plt                         (Quality:       0       0       0       0       0       0)
0x000b8560 FormFieldSignature::~FormFieldSignature()@plt               (Quality:       0       0       0       0       0       0)
0x000b8570 PostScriptFunction::transform(double*, double*)@plt         (Quality:       0       0       0       0       0       0)
0x000b8580 AnnotQuadrilaterals::getX2(int)@plt                         (Quality:       0       0       0       0       0       0)
0x000b8590 OCDisplayNode::parse(Object*, OCGs*, XRef*, int)@plt        (Quality:       0       0       0       0       0       0)
0x000b85a0 JBIG2Stream::readExtensionSeg(unsigned int)@plt             (Quality:       0       0       0       0       0       0)
0x000b85b0 Gfx::gouraudFillTriangle(double, double, GfxColor*, double, double, GfxColor*, double, double, GfxColor*, int, int, GfxState::ReusablePathIterator*)@plt (Quality:       0       0       0       0       0       0)
0x000b85c0 Splash::flattenCurve(double, double, double, double, double, double, double, double, double*, double, SplashPath*)@plt (Quality:       0       0       0       0       0       0)
0x000b85d0 XRef::readXRefTable(Parser*, long long*, std::vector<long long, std::allocator<long long> >*, std::vector<int, std::allocator<int> >*)@plt (Quality:       0       0       0       1       1       1)
0x000b58c0 StructTreeRoot::StructTreeRoot(PDFDoc*, Dict*)@plt          (Quality:       0       0       0       0       0       0)
0x000b85f0 ProfileData::ProfileData()@plt                              (Quality:       0       0       0       0       0       0)
0x000b8600 Linearization::getNumPages()@plt                            (Quality:       0       0       0       0       0       0)
0x000b8610 GfxFont::getAlternateName(char const*)@plt                  (Quality:       0       0       0       0       0       0)
0x000b8620 sha256HashBlock(unsigned char*, unsigned int*)@plt          (Quality:       0       0       0       0       0       0)
0x000b8630 JBIG2Stream::readGenericRefinementRegionSeg(unsigned int, bool, bool, unsigned int, unsigned int*, unsigned int)@plt (Quality:       0       0       0       0       0       0)
0x000b8640 SplashClip::SplashClip(SplashClip*)@plt                     (Quality:       0       0       0       0       0       0)
0x000b8650 Catalog::getOutline()@plt                                   (Quality:       0       0       0       0       0       0)
0x000b8660 CharCodeToUnicode::match(GooString*)@plt                    (Quality:       0       0       0       0       0       0)
0x000b8670 Splash::scaleImageYuXuBilinear(bool (*)(void*, unsigned char*, unsigned char*), void*, SplashColorMode, int, bool, int, int, int, int, SplashBitmap*)@plt (Quality:       0       0       0       0       0       0)
0x000b58b0 TextSelectionDumper::takeWordList(int*)@plt                 (Quality:       0       0       0       0       0       0)
0x000b8690 FoFiTrueType::getCFFBlock(char**, int*)@plt                 (Quality:       0       0       0       0       0       0)
0x000b86a0 SplashFontEngine::setAA(bool)@plt                           (Quality:       0       0       0       0       0       0)
0x000b86b0 Gftell(_IO_FILE*)@plt                                       (Quality:       0       0       0       0       0       0)
0x000b86c0 GfxIndexedColorSpace::~GfxIndexedColorSpace()@plt           (Quality:       0       0       0       0       0       0)
0x000b86d0 Movie::~Movie()@plt                                         (Quality:       0       0       0       0       0       0)
0x000b86e0 Splash::arbitraryTransformImage(bool (*)(void*, unsigned char*, unsigned char*), void*, SplashColorMode, int, bool, int, int, double*, bool, bool)@plt (Quality:       0       0       0       0       0       0)
0x000b86f0 XRef::~XRef()@plt                                           (Quality:       0       0       0       1       1       1)
0x000b58a0 ViewerPreferences::init()@plt                               (Quality:       0       0       0       0       0       0)
0x000b8710 PageLabelInfo::labelToIndex(GooString*, int*)@plt           (Quality:       0       0       0       0       0       0)
0x000b8720 AnnotQuadrilaterals::getY3(int)@plt                         (Quality:       0       0       0       0       0       0)
0x000b8730 TextPage::drawSelection(OutputDev*, double, int, PDFRectangle*, SelectionStyle, GfxColor*, GfxColor*)@plt (Quality:       0       0       0       0       0       0)
0x000b5890 AnnotPath::parsePathArray(Array*)@plt                       (Quality:       0       0       0       0       0       0)
0x000b8750 SplashFontFileID::~SplashFontFileID()@plt                   (Quality:       0       0       0       0       0       0)
0x000b8760 JBIG2HuffmanDecoder::reset()@plt                            (Quality:       0       0       0       0       0       0)
0x000b8770 TextPool::getBaseIdx(double)@plt                            (Quality:       0       0       0       0       0       0)
0x000b8780 SecurityHandler::SecurityHandler(PDFDoc*)@plt               (Quality:       0       0       0       0       0       0)
0x000b8790 FoFiTrueType::convertToType0(char*, int*, int, void (*)(void*, char const*, int), void*)@plt (Quality:       0       0       0       0       0       0)
0x000b87a0 PDFDoc::writeXRefTableTrailer(Dict*, XRef*, bool, long long, OutStream*, XRef*)@plt (Quality:       0       0       0       0       0       0)
0x000b87b0 GfxResources::lookupGStateNF(char*, Object*)@plt            (Quality:       0       0       0       0       0       0)
0x000b87c0 JBIG2Bitmap::JBIG2Bitmap(unsigned int, JBIG2Bitmap*)@plt    (Quality:       0       0       0       0       0       0)
0x000b87d0 PageLabelInfo::PageLabelInfo(Object*, int)@plt              (Quality:       0       0       0       0       0       0)
0x000b87e0 CMap::incRefCnt()@plt                                       (Quality:       0       0       0       0       0       0)
0x000b87f0 Gfx::doIncCharCount(GooString*)@plt                         (Quality:       0       0       0       0       0       0)
0x000b8800 FoFiBase::getUVarBE(int, int, bool*)@plt                    (Quality:       0       0       0       0       0       0)
0x000b5880 StructElement::parse(Dict*)@plt                             (Quality:       0       0       0       0       0       0)
0x000b8820 PostScriptFunction::~PostScriptFunction()@plt               (Quality:       0       0       0       0       0       0)
0x000b8830 GfxSubpath::curveTo(double, double, double, double, double, double)@plt (Quality:       0       0       0       0       0       0)
0x000b8840 AnnotLine::~AnnotLine()@plt                                 (Quality:       0       0       0       0       0       0)
0x000b8850 void std::__adjust_heap<DictEntry*, long, DictEntry, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(DictEntry const&, DictEntry const&)> >(DictEntry*, long, long, DictEntry, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(DictEntry const&, DictEntry const&)>)@plt (Quality:       0       0       0       0       0       0)
0x000b8860 fflush@plt                                                  (Quality:       0       0       0       0       0       0)
0x000b8870 TextWord::primaryDelta(TextWord*)@plt                       (Quality:       0       0       0       0       0       0)
0x000b8880 Array::copy(XRef*, Object*)@plt                             (Quality:       0       0       0       0       0       0)
0x000b8890 SplashXPath::strokeAdjust(SplashXPathAdjust*, double*, double*)@plt (Quality:       0       0       0       0       0       0)
0x000b5870 FormWidget::createWidgetAnnotation()@plt                    (Quality:       0       0       0       0       0       0)
0x000b88b0 fopen@plt                                                   (Quality:       0       0       0       3       3       3)
0x000b5860 grandom_fill@plt                                            (Quality:       0       0       0       0       0       0)
0x000b5850 SplashXPath::grow(int)@plt                                  (Quality:       0       0       0       0       0       0)
0x000b88e0 Gfx::drawForm(Object*, Dict*, double*, double*, bool, bool, GfxColorSpace*, bool, bool, bool, Function*, GfxColor*)@plt (Quality:       0       0       0       0       0       0)
0x000b88f0 PSOutputDev::cvtFunction(Function*, bool)@plt               (Quality:       0       0       0       0       0       0)
0x000b5840 SplashFontSrc::ref()@plt                                    (Quality:       0       0       0       0       0       0)
0x000b8910 SysFontList::~SysFontList()@plt                             (Quality:       0       0       0       1       1       1)
0x000b8920 FormFieldChoice::setEditChoice(GooString*)@plt              (Quality:       0       0       0       0       0       0)
0x000b8930 GlobalParams::getUnicodeMap(GooString*)@plt                 (Quality:       0       0       0       0       0       0)
0x000b8940 PNGWriter::PNGWriter(PNGWriter::Format)@plt                 (Quality:       0       0       0       0       0       0)
0x000b8950 CachedFileWriter::~CachedFileWriter()@plt                   (Quality:       0       0       0       0       0       0)
0x000b8960 cmsDeleteTransform@plt                                      (Quality:       0       0       0       0       0       0)
0x000b8970 signal@plt                                                  (Quality:       0       0       0       0       0       0)
0x000b8980 GooList::insert(int, void*)@plt                             (Quality:       0       0       0       2       2       2)
0x000b8990 free@plt                                                    (Quality:       0       0       0  100000  100000  100000)
0x000b89a0 StructElement::findAttribute(Attribute::Type, bool, Attribute::Owner) const@plt (Quality:       0       0       0       0       0       0)
0x000b89b0 Attribute::setFormattedValue(char const*)@plt               (Quality:       0       0       0       0       0       0)
0x000b89c0 Gfx::doPatternText()@plt                                    (Quality:       0       0       0       0       0       0)
0x000b89d0 JBIG2Stream::readTextRegionSeg(unsigned int, bool, bool, unsigned int, unsigned int*, unsigned int)@plt (Quality:       0       0       0       0       0       0)
0x000b89e0 AnnotFreeText::parseAppearanceString(GooString*, double&, AnnotColor*&)@plt (Quality:       0       0       0       0       0       0)
0x000b89f0 MovieActivationParameters::MovieActivationParameters()@plt  (Quality:       0       0       0       0       0       0)
0x000b8a00 GlobalParams::getTextEOL()@plt                              (Quality:       0       0       0       0       0       0)
0x000b8a10 TextFlow::addBlock(TextBlock*)@plt                          (Quality:       0       0       0       0       0       0)
0x000b8a20 AnnotAppearance::getStateKey(int)@plt                       (Quality:       0       0       0       0       0       0)
0x000b8a30 AnnotCaret::initialize(PDFDoc*, Dict*)@plt                  (Quality:       0       0       0       0       0       0)
0x000b5830 ASCIIHexStream::ASCIIHexStream(Stream*)@plt                 (Quality:       0       0       0       0       0       0)
0x000b8a50 GDirEntry::~GDirEntry()@plt                                 (Quality:       0       0       0       0       0       0)
0x000b5820 FormWidgetButton::FormWidgetButton(PDFDoc*, Object*, unsigned int, Ref, FormField*)@plt (Quality:       0       0       0       0       0       0)
0x000b8a70 CMap::setReverseMap(unsigned int*, unsigned int, unsigned int)@plt (Quality:       0       0       0       0       0       0)
0x000b8a80 AnnotColor::writeToObject(XRef*, Object*) const@plt         (Quality:       0       0       0       0       0       0)
0x000b8a90 LinkMovie::LinkMovie(Object*)@plt                           (Quality:       0       0       0       0       0       0)
0x000b8aa0 SplashClip::testSpan(int, int, int)@plt                     (Quality:       0       0       0       0       0       0)
0x000b8ab0 GlobalParams::getEnableFreeType()@plt                       (Quality:       0       0       0       0       0       0)
0x000b8ac0 PSOutputDev::writeHeader(std::vector<int, std::allocator<int> > const&, PDFRectangle*, PDFRectangle*, int, char*)@plt (Quality:       0       0       0       1       1       1)
0x000b8ad0 std::vector<_ByteRange, std::allocator<_ByteRange> >::_M_insert_aux(__gnu_cxx::__normal_iterator<_ByteRange*, std::vector<_ByteRange, std::allocator<_ByteRange> > >, _ByteRange const&)@plt (Quality:       0       0       0       0       0       0)
0x000b8ae0 GooString::formatv(char const*, __va_list_tag*)@plt         (Quality:       0       0       0  100000  100000  100000)
0x000b8af0 BufStream::~BufStream()@plt                                 (Quality:       0       0       0       0       0       0)
0x000b8b00 exit@plt                                                    (Quality:       0       0       0       0       0       0)
0x000b5810 TextPage::addWord(TextWord*)@plt                            (Quality:       0       0       0       0       0       0)
0x000b8b20 getenv@plt                                                  (Quality:       0       0       0       0       0       0)
0x000b8b30 Function::~Function()@plt                                   (Quality:       0       0       0       0       0       0)
0x000b8b40 GooHash::expand()@plt                                       (Quality:       0       0       0       2       2       2)
0x000b8b50 GfxPath::GfxPath(bool, double, double, GfxSubpath**, int, int)@plt (Quality:       0       0       0       0       0       0)
0x000b8b60 StructElement::getPageRef(Ref&) const@plt                   (Quality:       0       0       0       0       0       0)
0x000b5800 PSOutputDev::setupEmbeddedType1CFont(GfxFont*, Ref*, GooString*)@plt (Quality:       0       0       0       0       0       0)
0x000b8b80 SplashFTFontEngine::init(bool, bool, bool)@plt              (Quality:       0       0       0       0       0       0)
0x000b8b90 FoFiTrueType::scanLookupList(unsigned int, unsigned int)@plt (Quality:       0       0       0       0       0       0)
0x000b8ba0 SplashFont::~SplashFont()@plt                               (Quality:       0       0       0       0       0       0)
0x000b8bb0 std::vector<int, std::allocator<int> >::operator=(std::vector<int, std::allocator<int> > const&)@plt (Quality:       0       0       0       1       1       1)
0x000b8bc0 RunLengthStream::~RunLengthStream()@plt                     (Quality:       0       0       0       0       0       0)
0x000b8bd0 GfxColorTransform::~GfxColorTransform()@plt                 (Quality:       0       0       0       0       0       0)
0x000b8be0 FT_Outline_Get_CBox@plt                                     (Quality:       0       0       0       0       0       0)
0x000b8bf0 unicodeNormalizeNFKC(unsigned int*, int, int*, int**)@plt   (Quality:       0       0       0       0       0       0)
0x000b8c00 ftello@plt                                                  (Quality:       0       0       0       0       0       0)
0x000b57f0 FormFieldChoice::getSelectedChoice()@plt                    (Quality:       0       0       0       0       0       0)
0x000b8c20 GooString::GooString()@plt                                  (Quality:       0       0       0  100000  100000  100000)
0x000b8c30 void std::__introsort_loop<TrueTypeLoca*, long, __gnu_cxx::__ops::_Iter_comp_iter<cmpTrueTypeLocaIdxFunctor> >(TrueTypeLoca*, TrueTypeLoca*, long, __gnu_cxx::__ops::_Iter_comp_iter<cmpTrueTypeLocaIdxFunctor>)@plt (Quality:       0       0       0       0       0       0)
0x000b8c40 CharCodeToUnicode::parseCMap(GooString*, int)@plt           (Quality:       0       0       0       0       0       0)
0x000b57e0 Hints::~Hints()@plt                                         (Quality:       0       0       0       0       0       0)
0x000b8c60 CCITTFaxStream::~CCITTFaxStream()@plt                       (Quality:       0       0       0       3       3       3)
0x000b8c70 fmax@plt                                                    (Quality:       0       0       0       0       0       0)
0x000b8c80 Splash::setLineWidth(double)@plt                            (Quality:       0       0       0       0       0       0)
0x000b8c90 FcPatternAddInteger@plt                                     (Quality:       0       0       0       0       0       0)
0x000b8ca0 GfxState::setStrokeColorSpace(GfxColorSpace*)@plt           (Quality:       0       0       0       0       0       0)
0x000b57d0 AnnotStamp::AnnotStamp(PDFDoc*, Dict*, Object*)@plt         (Quality:       0       0       0       0       0       0)
0x000b8cc0 GfxState::setDisplayProfile(void*)@plt                      (Quality:       0       0       0       0       0       0)
0x000b8cd0 AnnotQuadrilaterals::getX3(int)@plt                         (Quality:       0       0       0       0       0       0)
0x000b8ce0 PDFDoc::setup(GooString*, GooString*)@plt                   (Quality:       0       0       0       1       1       1)
0x000b8cf0 GlobalParams::scanEncodingDirs()@plt                        (Quality:       0       0       0       1       1       1)
0x000b8d00 GlobalParams::findBase14FontFile(GooString*, GfxFont*)@plt  (Quality:       0       0       0       0       0       0)
0x000b8d10 Gfx8BitFont::getCharProc(int, Object*)@plt                  (Quality:       0       0       0       0       0       0)
0x000b8d20 fputc@plt                                                   (Quality:       0       0       0       0       0       0)
0x000b8d30 Object::free()@plt                                          (Quality:       0       0       0  100000  100000  100000)
0x000b8d40 PDFDoc::markPageObjects(Dict*, XRef*, XRef*, unsigned int, int, int)@plt (Quality:       0       0       0       0       0       0)
0x000b57c0 strncmp@plt                                                 (Quality:       0       0       0  100000  100000  100000)
0x000b57b0 CMap::parse(CMapCache*, GooString*, GooString*, Stream*)@plt (Quality:       0       0       0       0       0       0)
0x000b8d70 GfxState::getUserClipBBox(double*, double*, double*, double*)@plt (Quality:       0       0       0       0       0       0)
0x000b57a0 TextFontInfo::TextFontInfo(GfxState*)@plt                   (Quality:       0       0       0       0       0       0)
0x000b8d90 Object::print(_IO_FILE*)@plt                                (Quality:       0       0       0       0       0       0)
0x000b8da0 SplashOutputDev::convertPath(GfxState*, GfxPath*, bool)@plt (Quality:       0       0       0       0       0       0)
0x000b8db0 SplashFTFontEngine::SplashFTFontEngine(bool, bool, bool, FT_LibraryRec_*)@plt (Quality:       0       0       0       0       0       0)
0x000b8dc0 PSOutputDev::tilingPatternFillL2(GfxState*, Catalog*, Object*, double*, int, int, Dict*, double*, double*, int, int, int, int, double, double)@plt (Quality:       0       0       0       0       0       0)
0x000b8dd0 strncasecmp@plt                                             (Quality:       0       0       0       0       0       0)
0x000b8de0 GfxFunctionShading::getColor(double, double, GfxColor*)@plt (Quality:       0       0       0       0       0       0)
0x000b5790 CachedFile::cache(unsigned long, unsigned long)@plt         (Quality:       0       0       0       0       0       0)
0x000b8e00 SplashXPathScanner::~SplashXPathScanner()@plt               (Quality:       0       0       0       0       0       0)
0x000b8e10 GooList::GooList(int)@plt                                   (Quality:       0       0       0       0       0       0)
0x000b8e20 LZWStream::processNextCode()@plt                            (Quality:       0       0       0       0       0       0)
0x000b8e30 SplashFTFontEngine::loadTrueTypeFont(SplashFontFileID*, SplashFontSrc*, int*, int, int)@plt (Quality:       0       0       0       0       0       0)
0x000b8e40 AnnotQuadrilaterals::getY4(int)@plt                         (Quality:       0       0       0       0       0       0)
0x000b8e50 opj_destroy_decompress@plt                                  (Quality:       0       0       0       0       0       0)
0x000b8e60 GooHash::find(GooString*, int*)@plt                         (Quality:       0       0       0       9       9       9)
0x000b8e70 JBIG2Stream::discardSegment(unsigned int)@plt               (Quality:       0       0       0       0       0       0)
0x000b8e80 GlobalParams::getErrQuiet()@plt                             (Quality:       0       0       0       0       0       0)
0x000b5780 unlink@plt                                                  (Quality:       0       0       0       0       0       0)
0x000b8ea0 SplashFontEngine::loadOpenTypeCFFFont(SplashFontFileID*, SplashFontSrc*, int*, int)@plt (Quality:       0       0       0       0       0       0)
0x000b8eb0 JBIG2HuffmanDecoder::readBit()@plt                          (Quality:       0       0       0       0       0       0)
0x000b8ec0 FlateStream::getHuffmanCodeWord(FlateHuffmanTab*)@plt       (Quality:       0       0       0  100000  100000  100000)
0x000b8ed0 Lexer::lookChar()@plt                                       (Quality:       0       0       0  100000  100000  100000)
0x000b8ee0 JpegWriter::~JpegWriter()@plt                               (Quality:       0       0       0       0       0       0)
0x000b8ef0 Splash::Splash(SplashBitmap*, bool, SplashScreen*)@plt      (Quality:       0       0       0       0       0       0)
0x000b8f00 TextPage::addChar(GfxState*, double, double, double, double, unsigned int, int, unsigned int*, int)@plt (Quality:       0       0       0       0       0       0)
0x000b8f10 XRef::XRefTableWriter::XRefTableWriter(OutStream*)@plt      (Quality:       0       0       0       0       0       0)
0x000b8f20 JpegWriter::JpegWriter(JpegWriter::Format)@plt              (Quality:       0       0       0       0       0       0)
0x000b8f30 FoFiType1C::parse()@plt                                     (Quality:       0       0       0       0       0       0)
0x000b8f40 GfxPattern::~GfxPattern()@plt                               (Quality:       0       0       0       0       0       0)
0x000b8f50 FoFiType1C::getName()@plt                                   (Quality:       0       0       0       0       0       0)
0x000b8f60 GDirEntry::GDirEntry(char*, char*, bool)@plt                (Quality:       0       0       0       0       0       0)
0x000b8f70 GfxTilingPattern::~GfxTilingPattern()@plt                   (Quality:       0       0       0       0       0       0)
0x000b8f80 GfxDeviceNColorSpace::parse(GfxResources*, Array*, OutputDev*, GfxState*, int)@plt (Quality:       0       0       0       0       0       0)
0x000b8f90 GfxSeparationColorSpace::GfxSeparationColorSpace(GooString*, GfxColorSpace*, Function*, bool, unsigned int, int*)@plt (Quality:       0       0       0       0       0       0)
0x000b8fa0 AnnotPath::getY(int) const@plt                              (Quality:       0       0       0       0       0       0)
0x000b8fb0 LinkLaunch::LinkLaunch(Object*)@plt                         (Quality:       0       0       0       0       0       0)
0x000b8fc0 FormFieldChoice::unselectAll()@plt                          (Quality:       0       0       0       0       0       0)
0x000b8fd0 Annot3D::Annot3D(PDFDoc*, Dict*, Object*)@plt               (Quality:       0       0       0       0       0       0)
0x000b8fe0 GfxShading::GfxShading(GfxShading*)@plt                     (Quality:       0       0       0       0       0       0)
0x000b8ff0 GfxState::shiftCTMAndClip(double, double)@plt               (Quality:       0       0       0       0       0       0)
0x000b9000 AnnotWidget::drawText(GooString*, GooString*, GfxResources*, bool, int, int, bool, bool, bool)@plt (Quality:       0       0       0       0       0       0)
0x000b9010 SysFontInfo::match(GooString*, bool, bool, bool, bool)@plt  (Quality:       0       0       0       0       0       0)
0x000b9020 GfxFont::~GfxFont()@plt                                     (Quality:       0       0       0       0       0       0)
0x000b5770 png_set_sRGB@plt                                            (Quality:       0       0       0       0       0       0)
0x000b9040 LZWStream::~LZWStream()@plt                                 (Quality:       0       0       0       0       0       0)
0x000b9050 FoFiType1C::getString(int, char*, bool*)@plt                (Quality:       0       0       0       0       0       0)
0x000b9060 JBIG2Stream::readGenericBitmap(bool, int, int, int, bool, bool, JBIG2Bitmap*, int*, int*, int)@plt (Quality:       0       0       0       0       0       0)
0x000b9070 FoFiTrueType::make(char*, int, int)@plt                     (Quality:       0       0       0       0       0       0)
0x000b9080 std::vector<CachedFile::Chunk, std::allocator<CachedFile::Chunk> >::_M_fill_insert(__gnu_cxx::__normal_iterator<CachedFile::Chunk*, std::vector<CachedFile::Chunk, std::allocator<CachedFile::Chunk> > >, unsigned long, CachedFile::Chunk const&)@plt (Quality:       0       0       0       0       0       0)
0x000b9090 std::vector<StructElement*, std::allocator<StructElement*> >::_M_insert_aux(__gnu_cxx::__normal_iterator<StructElement**, std::vector<StructElement*, std::allocator<StructElement*> > >, StructElement* const&)@plt (Quality:       0       0       0       0       0       0)
0x000b90a0 PDFDoc::createTrailerDict(int, bool, long long, Ref*, XRef*, char const*, long long)@plt (Quality:       0       0       0       0       0       0)
0x000b90b0 AnnotStamp::initialize(PDFDoc*, Dict*)@plt                  (Quality:       0       0       0       0       0       0)
0x000b90c0 PDFDoc::displayPages(OutputDev*, int, int, double, double, int, bool, bool, bool, bool (*)(void*), void*, bool (*)(Annot*, void*), void*)@plt (Quality:       0       0       0       0       0       0)
0x000b90d0 FoFiType1C::getIndexVal(Type1CIndex*, int, Type1CIndexVal*, bool*)@plt (Quality:       0       0       0       0       0       0)
0x000b90e0 malloc@plt                                                  (Quality:       0       0       0  100000  100000  100000)
0x000b90f0 AnnotGeometry::AnnotGeometry(PDFDoc*, Dict*, Object*)@plt   (Quality:       0       0       0       0       0       0)
0x000b9100 vfprintf@plt                                                (Quality:       0       0       0       0       0       0)
0x000b9110 AnnotScreen::AnnotScreen(PDFDoc*, Dict*, Object*)@plt       (Quality:       0       0       0       0       0       0)
0x000b9120 AnnotQuadrilaterals::~AnnotQuadrilaterals()@plt             (Quality:       0       0       0       0       0       0)
0x000b9130 AnnotColor::AnnotColor(Array*, int)@plt                     (Quality:       0       0       0       0       0       0)
0x000b9140 SplashBitmap::writePNMFile(_IO_FILE*)@plt                   (Quality:       0       0       0       0       0       0)
0x000b5760 gfree@plt                                                   (Quality:       0       0       0  100000  100000  100000)
0x000b9160 SysFontInfo::~SysFontInfo()@plt                             (Quality:       0       0       0       0       0       0)
0x000b5750 GfxColorTransform::unref()@plt                              (Quality:       0       0       0       0       0       0)
0x000b9180 TextPage::assignColumns(TextLineFrag*, int, bool)@plt       (Quality:       0       0       0       0       0       0)
0x000b9190 JBIG2Stream::readHalftoneRegionSeg(unsigned int, bool, bool, unsigned int, unsigned int*, unsigned int)@plt (Quality:       0       0       0       0       0       0)
0x000b91a0 Splash::dumpPath(SplashPath*)@plt                           (Quality:       0       0       0       0       0       0)
0x000b91b0 AnnotWidget::updateAppearanceStream()@plt                   (Quality:       0       0       0       0       0       0)
0x000b91c0 Annot::getAppearanceResDict(Object*)@plt                    (Quality:       0       0       0       0       0       0)
0x000b91d0 GfxPatternColorSpace::parse(GfxResources*, Array*, OutputDev*, GfxState*, int)@plt (Quality:       0       0       0       0       0       0)
0x000b91e0 jpeg_destroy_compress@plt                                   (Quality:       0       0       0       0       0       0)
0x000b91f0 FoFiTrueType::convertToType42(char*, char**, int*, void (*)(void*, char const*, int), void*)@plt (Quality:       0       0       0       0       0       0)
0x000b9200 FcPatternDestroy@plt                                        (Quality:       0       0       0       0       0       0)
0x000b5740 ImageStream::close()@plt                                    (Quality:       0       0       0       0       0       0)
0x000b9220 Splash::scaleImageYuXu(bool (*)(void*, unsigned char*, unsigned char*), void*, SplashColorMode, int, bool, int, int, int, int, SplashBitmap*)@plt (Quality:       0       0       0       0       0       0)
0x000b9230 Annot::writeString(GooString*, GooString*)@plt              (Quality:       0       0       0       0       0       0)
0x000b9240 GfxGouraudTriangleShading::parse(GfxResources*, int, Dict*, Stream*, OutputDev*, GfxState*)@plt (Quality:       0       0       0       0       0       0)
0x000b9250 Splash::setFlatness(double)@plt                             (Quality:       0       0       0       0       0       0)
0x000b9260 TextFontInfo::matches(GfxState*)@plt                        (Quality:       0       0       0       0       0       0)
0x000b5730 Annot::update(char const*, Object*)@plt                     (Quality:       0       0       0       0       0       0)
0x000b9280 FoFiTrueType::seekTable(char const*)@plt                    (Quality:       0       0       0       0       0       0)
0x000b9290 JBIG2PatternDict::JBIG2PatternDict(unsigned int, unsigned int)@plt (Quality:       0       0       0       0       0       0)
0x000b92a0 GfxState::setCTM(double, double, double, double, double, double)@plt (Quality:       0       0       0       0       0       0)
0x000b92b0 GfxTilingPattern::GfxTilingPattern(int, int, double*, double, double, Object*, double*, Object*)@plt (Quality:       0       0       0       0       0       0)
0x000b92c0 CCITTFaxStream::getTwoDimCode()@plt                         (Quality:       0       0       0       0       0       0)
0x000b92d0 Splash::setOverprintMask(unsigned int, bool)@plt            (Quality:       0       0       0       0       0       0)
0x000b92e0 CachedFile::read(void*, unsigned long, unsigned long)@plt   (Quality:       0       0       0       0       0       0)
0x000b92f0 Attribute::getTypeName() const@plt                          (Quality:       0       0       0       0       0       0)
0x000b9300 SplashOutputDev::startDoc(PDFDoc*)@plt                      (Quality:       0       0       0       0       0       0)
0x000b9310 void std::__heap_select<GfxFontCIDWidthExcepV*, __gnu_cxx::__ops::_Iter_comp_iter<cmpWidthExcepVFunctor> >(GfxFontCIDWidthExcepV*, GfxFontCIDWidthExcepV*, GfxFontCIDWidthExcepV*, __gnu_cxx::__ops::_Iter_comp_iter<cmpWidthExcepVFunctor>)@plt (Quality:       0       0       0       0       0       0)
0x000b9320 FormWidgetText::FormWidgetText(PDFDoc*, Object*, unsigned int, Ref, FormField*)@plt (Quality:       0       0       0       0       0       0)
0x000b9330 GfxIndexedColorSpace::mapColorToBase(GfxColor*, GfxColor*)@plt (Quality:       0       0       0       0       0       0)
0x000b9340 FormField::getFullyQualifiedName()@plt                      (Quality:       0       0       0       0       0       0)
0x000b9350 PostScriptFunction::parseCode(Stream*, int*)@plt            (Quality:       0       0       0       0       0       0)
0x000b9360 AnnotMarkup::initialize(PDFDoc*, Dict*, Object*)@plt        (Quality:       0       0       0       0       0       0)
0x000b9370 SplashXPath::aaScale()@plt                                  (Quality:       0       0       0       0       0       0)
0x000b9380 SecurityHandler::~SecurityHandler()@plt                     (Quality:       0       0       0       0       0       0)
0x000b9390 FormFieldChoice::FormFieldChoice(PDFDoc*, Object*, Ref const&, FormField*, std::set<int, std::less<int>, std::allocator<int> >*)@plt (Quality:       0       0       0       0       0       0)
0x000b93a0 GooList::~GooList()@plt                                     (Quality:       0       0       0       8       8       8)
0x000b5720 void std::__insertion_sort<SplashXPathSeg*, __gnu_cxx::__ops::_Iter_comp_iter<cmpXPathSegsFunctor> >(SplashXPathSeg*, SplashXPathSeg*, __gnu_cxx::__ops::_Iter_comp_iter<cmpXPathSegsFunctor>)@plt (Quality:       0       0       0       0       0       0)
0x000b93c0 TextPage::addLink(int, int, int, int, AnnotLink*)@plt       (Quality:       0       0       0       0       0       0)
0x000b93d0 TextPage::endWord()@plt                                     (Quality:       0       0       0       0       0       0)
0x000b5710 SysFontInfo::SysFontInfo(GooString*, bool, bool, bool, bool, GooString*, SysFontType, int, GooString*)@plt (Quality:       0       0       0       0       0       0)
0x000b93f0 CachedFileStream::fillBuf()@plt                             (Quality:       0       0       0       0       0       0)
0x000b9400 NameTree::Entry::cmp(void const*, void const*)@plt          (Quality:       0       0       0       0       0       0)
0x000b9410 JBIG2Stream::readUByte(unsigned int*)@plt                   (Quality:       0       0       0       0       0       0)
0x000b9420 OCGs::anyOff(Array*)@plt                                    (Quality:       0       0       0       0       0       0)
0x000b9430 SplashFontEngine::loadType1CFont(SplashFontFileID*, SplashFontSrc*, char const**)@plt (Quality:       0       0       0       0       0       0)
0x000b9440 SplashBitmap::writeImgFile(ImgWriter*, _IO_FILE*, int, int)@plt (Quality:       0       0       0       0       0       0)
0x000b9450 AnnotColor::AnnotColor(double)@plt                          (Quality:       0       0       0       0       0       0)
0x000b9460 SplashFontEngine::loadCIDFont(SplashFontFileID*, SplashFontSrc*)@plt (Quality:       0       0       0       0       0       0)
0x000b5700 TIFFDefaultStripSize@plt                                    (Quality:       0       0       0       0       0       0)
0x000b56f0 Gfx::doPatternFill(bool)@plt                                (Quality:       0       0       0       0       0       0)
0x000b9490 GfxCIDFont::mapCodeToGID(FoFiTrueType*, int, unsigned int, bool)@plt (Quality:       0       0       0       0       0       0)
0x000b94a0 BaseCryptStream::reset()@plt                                (Quality:       0       0       0       0       0       0)
0x000b56e0 FormFieldChoice::getNumSelected()@plt                       (Quality:       0       0       0       0       0       0)
0x000b94c0 DCTStream::~DCTStream()@plt                                 (Quality:       0       0       0       3       3       3)
0x000b94d0 SplashFontFileID::~SplashFontFileID()@plt                   (Quality:       0       0       0       0       0       0)
0x000b94e0 ExponentialFunction::~ExponentialFunction()@plt             (Quality:       0       0       0       0       0       0)
0x000b94f0 JBIG2MMRDecoder::getBlackCode()@plt                         (Quality:       0       0       0       0       0       0)
0x000b9500 png_set_compression_level@plt                               (Quality:       0       0       0       0       0       0)
0x000b9510 PageLabelInfo::Interval::~Interval()@plt                    (Quality:       0       0       0       0       0       0)
0x000b9520 AnnotFreeText::generateFreeTextAppearance()@plt             (Quality:       0       0       0       0       0       0)
0x000b9530 Gfx::gouraudFillTriangle(double, double, double, double, double, double, double, double, double, double, int, GfxGouraudTriangleShading*, GfxState::ReusablePathIterator*)@plt (Quality:       0       0       0       0       0       0)
0x000b9540 Splash::pathAllOutside(SplashPath*)@plt                     (Quality:       0       0       0       0       0       0)
0x000b9550 Catalog::getMarkInfo()@plt                                  (Quality:       0       0       0       0       0       0)
0x000b9560 Splash::scaleImage(bool (*)(void*, unsigned char*, unsigned char*), void*, SplashColorMode, int, bool, int, int, int, int, bool, bool)@plt (Quality:       0       0       0       0       0       0)
0x000b9570 CMap::CMap(GooString*, GooString*, int)@plt                 (Quality:       0       0       0       0       0       0)
0x000b9580 PSOutCustomColor::~PSOutCustomColor()@plt                   (Quality:       0       0       0       0       0       0)
0x000b9590 TextLineFrag::init(TextLine*, int, int)@plt                 (Quality:       0       0       0       0       0       0)
0x000b95a0 AnnotIconFit::AnnotIconFit(Dict*)@plt                       (Quality:       0       0       0       0       0       0)
0x000b95b0 TextPage::incCharCount(int)@plt                             (Quality:       0       0       0       0       0       0)
0x000b95c0 GfxImageColorMap::getRGB(unsigned char*, GfxRGB*)@plt       (Quality:       0       0       0       0       0       0)
0x000b56c0 DCTStream::init()@plt                                       (Quality:       0       0       0       3       3       3)
0x000b95e0 TextSelectionDumper::getText()@plt                          (Quality:       0       0       0       0       0       0)
0x000b56b0 GfxImageColorMap::~GfxImageColorMap()@plt                   (Quality:       0       0       0       2       2       2)
0x000b9600 FoFiTrueType::load(char*, int)@plt                          (Quality:       0       0       0       0       0       0)
0x000b9610 Splash::getClip()@plt                                       (Quality:       0       0       0       0       0       0)
0x000b9620 putchar@plt                                                 (Quality:       0       0       0       0       0       0)
0x000b9630 SplashUnivariatePattern::~SplashUnivariatePattern()@plt     (Quality:       0       0       0       0       0       0)
0x000b9640 strcmp@plt                                                  (Quality:       0       0       0  100000  100000  100000)
0x000b9650 JBIG2Stream::JBIG2Stream(Stream*, Object*, Object*)@plt     (Quality:       0       0       0       0       0       0)
0x000b9660 CharCodeToUnicodeCache::~CharCodeToUnicodeCache()@plt       (Quality:       0       0       0       2       2       2)
0x000b9670 GlobalParams::getMapNumericCharNames()@plt                  (Quality:       0       0       0       0       0       0)
0x000b9680 SplashFontSrc::setBuf(char*, int, bool)@plt                 (Quality:       0       0       0       0       0       0)
0x000b9690 strtol@plt                                                  (Quality:       0       0       0       0       0       0)
0x000b96a0 Splash::setInNonIsolatedGroup(SplashBitmap*, int, int)@plt  (Quality:       0       0       0       0       0       0)
0x000b96b0 FormWidgetButton::setAppearanceState(char const*)@plt       (Quality:       0       0       0       0       0       0)
0x000b96c0 Annot::getRect(double*, double*, double*, double*) const@plt (Quality:       0       0       0       0       0       0)
0x000b96d0 GfxCalRGBColorSpace::~GfxCalRGBColorSpace()@plt             (Quality:       0       0       0       0       0       0)
0x000b96e0 FoFiType1C::cvtNum(double, bool, GooString*)@plt            (Quality:       0       0       0       0       0       0)
0x000b96f0 Form::findWidgetByRef(Ref)@plt                              (Quality:       0       0       0       0       0       0)
0x000b9700 LinkJavaScript::~LinkJavaScript()@plt                       (Quality:       0       0       0       0       0       0)
0x000b9710 FoFiType1C::readFDSelect()@plt                              (Quality:       0       0       0       0       0       0)
0x000b9720 Splash::clear(unsigned char*, unsigned char)@plt            (Quality:       0       0       0       0       0       0)
0x000b56a0 Annot::setColor(AnnotColor*, bool)@plt                      (Quality:       0       0       0       0       0       0)
0x000b9740 AnnotMarkup::AnnotMarkup(PDFDoc*, Dict*, Object*)@plt       (Quality:       0       0       0       0       0       0)
0x000b5690 GfxCalGrayColorSpace::parse(Array*, GfxState*)@plt          (Quality:       0       0       0       0       0       0)
0x000b5680 Gfx::drawAnnot(Object*, AnnotBorder*, AnnotColor*, double, double, double, double, int)@plt (Quality:       0       0       0       0       0       0)
0x000b9770 pclose@plt                                                  (Quality:       0       0       0       0       0       0)
0x000b9780 AnnotInk::initialize(PDFDoc*, Dict*)@plt                    (Quality:       0       0       0       0       0       0)
0x000b9790 GfxResources::lookupColorSpace(char const*, Object*)@plt    (Quality:       0       0       0       2       2       2)
0x000b97a0 FoFiBase::readFile(char*, int*)@plt                         (Quality:       0       0       0       0       0       0)
0x000b97b0 GooHash::removeInt(char const*)@plt                         (Quality:       0       0       0       0       0       0)
0x000b97c0 AnnotFreeText::initialize(PDFDoc*, Dict*)@plt               (Quality:       0       0       0       0       0       0)
0x000b5660 FT_Set_Transform@plt                                        (Quality:       0       0       0       0       0       0)
0x000b97e0 Splash::getMatrix()@plt                                     (Quality:       0       0       0       0       0       0)
0x000b97f0 PNGWriter::~PNGWriter()@plt                                 (Quality:       0       0       0       0       0       0)
0x000b9800 Annot::initialize(PDFDoc*, Dict*)@plt                       (Quality:       0       0       0       0       0       0)
0x000b5650 strlen@plt                                                  (Quality:       0       0       0  100000  100000  100000)
0x000b5640 __cxa_finalize@plt                                          (Quality:       0       0       0       1       1       1)
0x000b9830 CharCodeToUnicode::addMapping(unsigned int, char*, int, int)@plt (Quality:       0       0       0  100000  100000  100000)
0x000b9840 LinkGoTo::LinkGoTo(Object*)@plt                             (Quality:       0       0       0       0       0       0)
0x000b9850 Decrypt::makeFileKey(int, int, int, GooString*, GooString*, GooString*, GooString*, int, GooString*, GooString*, GooString*, unsigned char*, bool, bool*)@plt (Quality:       0       0       0       0       0       0)
0x000b9860 MarkedContentOutputDev::endSpan()@plt                       (Quality:       0       0       0       0       0       0)
0x000b9870 XRef::setModifiedObject(Object*, Ref)@plt                   (Quality:       0       0       0       0       0       0)
0x000b9880 AnnotText::initialize(PDFDoc*, Dict*)@plt                   (Quality:       0       0       0       0       0       0)
0x000b9890 fprintf@plt                                                 (Quality:       0       0       0       0       0       0)
0x000b5630 GfxState::clip()@plt                                        (Quality:       0       0       0       8       8       8)
0x000b5620 LinkSound::~LinkSound()@plt                                 (Quality:       0       0       0       0       0       0)
0x000b98c0 SplashScreen::buildDispersedMatrix(int, int, int, int, int)@plt (Quality:       0       0       0       0       0       0)
0x000b98d0 _setjmp@plt                                                 (Quality:       0       0       0       3       3       3)
0x000b98e0 GooList::shrink()@plt                                       (Quality:       0       0       0       0       0       0)
0x000b5610 JBIG2MMRDecoder::getWhiteCode()@plt                         (Quality:       0       0       0       0       0       0)
0x000b9900 CachedFile::cache(std::vector<_ByteRange, std::allocator<_ByteRange> > const&)@plt (Quality:       0       0       0       0       0       0)
0x000b9910 PDFDoc::writeHeader(OutStream*, int, int)@plt               (Quality:       0       0       0       0       0       0)
0x000b9920 TextPage::incRefCnt()@plt                                   (Quality:       0       0       0       0       0       0)
0x000b9930 PDFDoc::strToLongLong(char*)@plt                            (Quality:       0       0       0       1       1       1)
0x000b9940 GooString::cmpN(char const*, int) const@plt                 (Quality:       0       0       0       3       3       3)
0x000b9950 TextFlow::blockFits(TextBlock*, TextBlock*)@plt             (Quality:       0       0       0       0       0       0)
0x000b5600 PSStack::popNum()@plt                                       (Quality:       0       0       0       0       0       0)
0x000b9970 ImgWriter::~ImgWriter()@plt                                 (Quality:       0       0       0       0       0       0)
0x000b9980 TextSelectionPainter::~TextSelectionPainter()@plt           (Quality:       0       0       0       0       0       0)
0x000b9990 MediaWindowParameters::MediaWindowParameters()@plt          (Quality:       0       0       0       0       0       0)
0x000b99a0 PDFDoc::PDFDoc(BaseStream*, GooString*, GooString*, void*)@plt (Quality:       0       0       0       0       0       0)
0x000b99b0 FoFiIdentifier::identifyFile(char*)@plt                     (Quality:       0       0       0       0       0       0)
0x000b99c0 GooList::del(int)@plt                                       (Quality:       0       0       0       0       0       0)
0x000b99d0 pthread_mutex_lock@plt                                      (Quality:       0       0       0  100000  100000  100000)
0x000b99e0 JBIG2HuffmanDecoder::JBIG2HuffmanDecoder()@plt              (Quality:       0       0       0       0       0       0)
0x000b99f0 SplashState::SplashState(int, int, bool, SplashScreenParams*)@plt (Quality:       0       0       0       0       0       0)
0x000b55e0 Annot3D::Activation::Activation(Dict*)@plt                  (Quality:       0       0       0       0       0       0)
0x000b9a10 PDFDoc::writeRawStream(Stream*, OutStream*)@plt             (Quality:       0       0       0       0       0       0)
0x000b9a20 GooHash::removeInt(GooString*)@plt                          (Quality:       0       0       0       0       0       0)
0x000b9a30 CMYKGrayEncoder::~CMYKGrayEncoder()@plt                     (Quality:       0       0       0       0       0       0)
0x000b9a40 Outline::~Outline()@plt                                     (Quality:       0       0       0       0       0       0)
0x000b9a50 FoFiTrueType::scanLookupSubTable(unsigned int, unsigned int)@plt (Quality:       0       0       0       0       0       0)
0x000b9a60 TextBlock::updatePriMinMax(TextBlock*)@plt                  (Quality:       0       0       0       0       0       0)
0x000b9a70 TextLine::visitSelection(TextSelectionVisitor*, PDFRectangle*, SelectionStyle)@plt (Quality:       0       0       0       0       0       0)
0x000b55d0 SplashFTFontFile::SplashFTFontFile(SplashFTFontEngine*, SplashFontFileID*, SplashFontSrc*, FT_FaceRec_*, int*, int, bool, bool)@plt (Quality:       0       0       0       0       0       0)
0x000b9a90 JArithmeticDecoder::JArithmeticDecoder()@plt                (Quality:       0       0       0       0       0       0)
0x000b9aa0 FoFiTrueType::mapCodeToGID(int, unsigned int)@plt           (Quality:       0       0       0       0       0       0)
0x000b9ab0 GlobalParams::getCIDToUnicode(GooString*)@plt               (Quality:       0       0       0       0       0       0)
0x000b9ac0 Splash::setStrokeOverprint(bool)@plt                        (Quality:       0       0       0       0       0       0)
0x000b9ad0 FoFiType1C::eexecCvtGlyph(Type1CEexecBuf*, char const*, int, int, Type1CIndex*, Type1CPrivateDict*)@plt (Quality:       0       0       0       0       0       0)
0x000b9ae0 TextSelectionPainter::TextSelectionPainter(TextPage*, double, int, OutputDev*, GfxColor*, GfxColor*)@plt (Quality:       0       0       0       0       0       0)
0x000b55b0 SplashFontSrc::~SplashFontSrc()@plt                         (Quality:       0       0       0       0       0       0)
0x000b9b00 fread@plt                                                   (Quality:       0       0       0       0       0       0)
0x000b9b10 JPXStream::close()@plt                                      (Quality:       0       0       0       0       0       0)
0x000b9b20 CCITTFaxStream::ccittReset(bool)@plt                        (Quality:       0       0       0       0       0       0)
0x000b9b30 MarkedContentOutputDev::~MarkedContentOutputDev()@plt       (Quality:       0       0       0       0       0       0)
0x000b9b40 SplashState::setTransfer(unsigned char*, unsigned char*, unsigned char*, unsigned char*)@plt (Quality:       0       0       0       0       0       0)
0x000b9b50 TextLine::~TextLine()@plt                                   (Quality:       0       0       0       0       0       0)
0x000b9b60 SplashState::setFillPattern(SplashPattern*)@plt             (Quality:       0       0       0       0       0       0)
0x000b9b70 GlobalParams::getStrokeAdjust()@plt                         (Quality:       0       0       0       0       0       0)
0x000b9b80 std::_Rb_tree<unsigned int, std::pair<unsigned int const, unsigned int>, std::_Select1st<std::pair<unsigned int const, unsigned int> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >::_M_insert_unique(std::pair<unsigned int const, unsigned int> const&)@plt (Quality:       0       0       0       0       0       0)
0x000b55a0 FcPatternGetInteger@plt                                     (Quality:       0       0       0       0       0       0)
0x000b9ba0 Splash::drawSpan(SplashPipe*, int, int, int, bool)@plt      (Quality:       0       0       0       0       0       0)
0x000b9bb0 FoFiType1C::getEncoding()@plt                               (Quality:       0       0       0       0       0       0)
0x000b9bc0 CMap::parse2(CMapCache*, int (*)(void*), void*)@plt         (Quality:       0       0       0       0       0       0)
0x000b9bd0 opendir@plt                                                 (Quality:       0       0       0       4       4       4)
0x000b9be0 AnnotAppearanceBBox::getPageXMin() const@plt                (Quality:       0       0       0       0       0       0)
0x000b9bf0 GfxCalGrayColorSpace::GfxCalGrayColorSpace()@plt            (Quality:       0       0       0       0       0       0)
0x000b9c00 AnnotWidget::drawBorder()@plt                               (Quality:       0       0       0       0       0       0)
0x000b9c10 PSOutputDev::doImageL1(Object*, GfxImageColorMap*, bool, bool, Stream*, int, int, int, int*, Stream*, int, int, bool)@plt (Quality:       0       0       0       0       0       0)
0x000b9c20 Splash::blitImage(SplashBitmap*, bool, int, int)@plt        (Quality:       0       0       0       0       0       0)
0x000b9c30 AnnotSound::~AnnotSound()@plt                               (Quality:       0       0       0       0       0       0)
0x000b9c40 JBIG2CodeTable::JBIG2CodeTable(unsigned int, JBIG2HuffmanTable*)@plt (Quality:       0       0       0       0       0       0)
0x000b9c50 PSOutputDev::writePSBuf(char const*, int)@plt               (Quality:       0       0       0      18      18      18)
0x000b5590 Movie::Movie(Object*)@plt                                   (Quality:       0       0       0       0       0       0)
0x000b9c70 OCGs::allOff(Array*)@plt                                    (Quality:       0       0       0       0       0       0)
0x000b9c80 CharCodeToUnicode::incRefCnt()@plt                          (Quality:       0       0       0       0       0       0)
0x000b9c90 XRef::okToPrint(bool)@plt                                   (Quality:       0       0       0       0       0       0)
0x000b9ca0 OCGs::anyOn(Array*)@plt                                     (Quality:       0       0       0       0       0       0)
0x000b9cb0 GfxDeviceNColorSpace::GfxDeviceNColorSpace(int, GooString**, GfxColorSpace*, Function*, GooList*, int*, bool, unsigned int)@plt (Quality:       0       0       0       0       0       0)
0x000b9cc0 ActualText::ActualText(TextPage*)@plt                       (Quality:       0       0       0       0       0       0)
0x000b9cd0 GooString::GooString(GooString*, int, int)@plt              (Quality:       0       0       0       0       0       0)
0x000b9ce0 OutStream::~OutStream()@plt                                 (Quality:       0       0       0       0       0       0)
0x000b9cf0 JArithmeticDecoder::decodeIAID(unsigned int, JArithmeticDecoderStats*)@plt (Quality:       0       0       0       0       0       0)
0x000b9d00 JBIG2Stream::resetGenericStats(unsigned int, JArithmeticDecoderStats*)@plt (Quality:       0       0       0       0       0       0)
0x000b9d10 FormWidget::isReadOnly() const@plt                          (Quality:       0       0       0       0       0       0)
0x000b9d20 std::__throw_out_of_range_fmt(char const*, ...)@plt         (Quality:       0       0       0       0       0       0)
0x000b5580 FlateStream::getCodeWord(int)@plt                           (Quality:       0       0       0  100000  100000  100000)
0x000b9d40 jpeg_set_defaults@plt                                       (Quality:       0       0       0       0       0       0)
0x000b9d50 jpeg_start_compress@plt                                     (Quality:       0       0       0       0       0       0)
0x000b9d60 LinkOCGState::LinkOCGState(Object*)@plt                     (Quality:       0       0       0       0       0       0)
0x000b5570 GfxState::clipToRect(double, double, double, double)@plt    (Quality:       0       0       0       0       0       0)
0x000b9d80 SplashFontSrc::unref()@plt                                  (Quality:       0       0       0       0       0       0)
0x000b9d90 ViewerPreferences::ViewerPreferences(Dict*)@plt             (Quality:       0       0       0       0       0       0)
0x000b9da0 AnnotQuadrilaterals::getX4(int)@plt                         (Quality:       0       0       0       0       0       0)
0x000b9db0 SplashFontFile::~SplashFontFile()@plt                       (Quality:       0       0       0       0       0       0)
0x000b9dc0 getFileSpecName(Object*, Object*)@plt                       (Quality:       0       0       0       0       0       0)
0x000b9dd0 SplashXPathScanner::clipAALine(SplashBitmap*, int*, int*, int)@plt (Quality:       0       0       0       0       0       0)
0x000b5560 GfxAxialShading::GfxAxialShading(GfxAxialShading*)@plt      (Quality:       0       0       0       0       0       0)
0x000b9df0 readdir@plt                                                 (Quality:       0       0       0       0       0       0)
0x000b9e00 Dict::hasKey(char const*)@plt                               (Quality:       0       0       0       8       8       8)
0x000b9e10 CMap::addCIDs(unsigned int, unsigned int, unsigned int, unsigned int)@plt (Quality:       0       0       0       0       0       0)
0x000b9e20 SysFontList::SysFontList()@plt                              (Quality:       0       0       0       1       1       1)
0x000b9e30 parseDiffRectangle(Array*, PDFRectangle*)@plt               (Quality:       0       0       0       0       0       0)
0x000b9e40 JBIG2Stream::~JBIG2Stream()@plt                             (Quality:       0       0       0       0       0       0)
0x000b9e50 SplashState::setLineDash(double*, int, double)@plt          (Quality:       0       0       0       0       0       0)
0x000b9e60 puts@plt                                                    (Quality:       0       0       0       0       0       0)
0x000b9e70 GlobalParams::findSystemFontFile(GfxFont*, SysFontType*, int*, GooString*, GooString*)@plt (Quality:       0       0       0       0       0       0)
0x000b9e80 OCDisplayNode::addChild(OCDisplayNode*)@plt                 (Quality:       0       0       0       0       0       0)
0x000b9e90 feof@plt                                                    (Quality:       0       0       0       0       0       0)
0x000b9ea0 Annot::invalidateAppearance()@plt                           (Quality:       0       0       0       0       0       0)
0x000b9eb0 TextBlock::addWord(TextWord*)@plt                           (Quality:       0       0       0       0       0       0)
0x000b9ec0 __finite@plt                                                (Quality:       0       0       0       0       0       0)
0x000b9ed0 FormFieldText::~FormFieldText()@plt                         (Quality:       0       0       0       0       0       0)
0x000b9ee0 GlobalParams::getPSResidentFont(GooString*)@plt             (Quality:       0       0       0       0       0       0)
0x000b9ef0 GfxPatchMeshShading::getParameterizedColor(double, GfxColor*)@plt (Quality:       0       0       0       0       0       0)
0x000b9f00 AnnotAppearanceBBox::getBBoxRect(double*) const@plt         (Quality:       0       0       0       0       0       0)
0x000b9f10 PSStack::popInt()@plt                                       (Quality:       0       0       0       0       0       0)
0x000b9f20 Array::getString(int, GooString*)@plt                       (Quality:       0       0       0       0       0       0)
0x000b9f30 SplashFTFontFile::loadType1Font(SplashFTFontEngine*, SplashFontFileID*, SplashFontSrc*, char const**)@plt (Quality:       0       0       0       0       0       0)
0x000b9f40 StreamPredictor::StreamPredictor(Stream*, int, int, int, int)@plt (Quality:       0       0       0       0       0       0)
0x000b5540 FontInfo::FontInfo(GfxFont*, XRef*)@plt                     (Quality:       0       0       0       0       0       0)
0x000b9f60 PSOutputDev::writeDocSetup(PDFDoc*, Catalog*, std::vector<int, std::allocator<int> > const&, bool)@plt (Quality:       0       0       0       1       1       1)
0x000b5530 Splash::pipeSetXY(SplashPipe*, int, int)@plt                (Quality:       0       0       0       0       0       0)
0x000b9f80 Splash::blitMask(SplashBitmap*, int, int, SplashClipResult)@plt (Quality:       0       0       0       0       0       0)
0x000b5520 Lexer::getChar(bool)@plt                                    (Quality:       0       0       0  100000  100000  100000)
0x000b9fa0 Splash::setBlendFunc(void (*)(unsigned char*, unsigned char*, unsigned char*, SplashColorMode))@plt (Quality:       0       0       0       0       0       0)
0x000b9fb0 RGBGrayEncoder::fillBuf()@plt                               (Quality:       0       0       0       0       0       0)
0x000b9fc0 FormFieldChoice::updateSelection()@plt                      (Quality:       0       0       0       0       0       0)
0x000b9fd0 fgetc@plt                                                   (Quality:       0       0       0       0       0       0)
0x000b9fe0 SplashFontFile::incRefCnt()@plt                             (Quality:       0       0       0       0       0       0)
0x000b9ff0 jpeg_read_header@plt                                        (Quality:       0       0       0       0       0       0)
0x000ba000 JArithmeticDecoder::decodeIntBit(JArithmeticDecoderStats*)@plt (Quality:       0       0       0       0       0       0)
0x000ba010 PDFDoc::parsePage(int)@plt                                  (Quality:       0       0       0       0       0       0)
0x000ba020 GoffsetMax()@plt                                            (Quality:       0       0       0       0       0       0)
0x000ba030 LinkUnknown::~LinkUnknown()@plt                             (Quality:       0       0       0       0       0       0)
0x000ba040 SplashState::~SplashState()@plt                             (Quality:       0       0       0       0       0       0)
0x000ba050 TextPage::clear()@plt                                       (Quality:       0       0       0       0       0       0)
0x000ba060 GlobalParams::findCMapFile(GooString*, GooString*)@plt      (Quality:       0       0       0       0       0       0)
0x000ba070 GfxAxialShading::parse(GfxResources*, Dict*, OutputDev*, GfxState*)@plt (Quality:       0       0       0       0       0       0)
0x000ba080 PDFDoc::PDFDoc()@plt                                        (Quality:       0       0       0       0       0       0)
0x000ba090 GfxDeviceRGBColorSpace::~GfxDeviceRGBColorSpace()@plt       (Quality:       0       0       0       2       2       2)
0x000ba0a0 openFile(char const*, char const*)@plt                      (Quality:       0       0       0       0       0       0)
0x000ba0b0 NameTree::init(XRef*, Object*)@plt                          (Quality:       0       0       0       0       0       0)
0x000ba0c0 ActualText::~ActualText()@plt                               (Quality:       0       0       0       0       0       0)
0x000ba0d0 cmsOpenProfileFromFile@plt                                  (Quality:       0       0       0       0       0       0)
0x000b5510 TextWordList::TextWordList(TextPage*, bool)@plt             (Quality:       0       0       0       0       0       0)
0x000b5500 SplashXPathSeg* std::__unguarded_partition<SplashXPathSeg*, __gnu_cxx::__ops::_Iter_comp_iter<cmpXPathSegsFunctor> >(SplashXPathSeg*, SplashXPathSeg*, SplashXPathSeg*, __gnu_cxx::__ops::_Iter_comp_iter<cmpXPathSegsFunctor>)@plt (Quality:       0       0       0       0       0       0)
0x000ba100 PSOutputDev::init(void (*)(void*, char const*, int), void*, PSFileType, char*, PDFDoc*, std::vector<int, std::allocator<int> > const&, PSOutMode, int, int, int, int, bool, int, int, bool, bool)@plt (Quality:       0       0       0       1       1       1)
0x000ba110 SplashOutputDev::doUpdateFont(GfxState*)@plt                (Quality:       0       0       0       0       0       0)
0x000ba120 TextWord::addChar(GfxState*, TextFontInfo*, double, double, double, double, int, int, unsigned int, unsigned int, Matrix)@plt (Quality:       0       0       0       0       0       0)
0x000ba130 Catalog::getDests()@plt                                     (Quality:       0       0       0       0       0       0)
0x000b54e0 JBIG2Stream::readSegments()@plt                             (Quality:       0       0       0       0       0       0)
0x000ba150 SplashXPathScanner::renderAALine(SplashBitmap*, int*, int*, int, bool)@plt (Quality:       0       0       0       0       0       0)
0x000ba160 cmsCloseProfile@plt                                         (Quality:       0       0       0       0       0       0)
0x000ba170 AnnotAppearanceBBox::extendTo(double, double)@plt           (Quality:       0       0       0       0       0       0)
0x000ba180 JBIG2Bitmap::clearToZero()@plt                              (Quality:       0       0       0       0       0       0)
0x000ba190 Splash::setStrokeAlpha(double)@plt                          (Quality:       0       0       0       0       0       0)
0x000ba1a0 GlobalParams::getTextEncoding()@plt                         (Quality:       0       0       0       0       0       0)
0x000ba1b0 TextPage::decRefCnt()@plt                                   (Quality:       0       0       0       0       0       0)
0x000ba1c0 Object::getTypeName()@plt                                   (Quality:       0       0       0       0       0       0)
0x000ba1d0 JBIG2Stream::resetIntStats(int)@plt                         (Quality:       0       0       0       0       0       0)
0x000ba1e0 AnnotTextMarkup::~AnnotTextMarkup()@plt                     (Quality:       0       0       0       0       0       0)
0x000ba1f0 FT_Done_FreeType@plt                                        (Quality:       0       0       0       0       0       0)
0x000ba200 LinkSound::LinkSound(Object*)@plt                           (Quality:       0       0       0       0       0       0)
0x000ba210 TextWord::visitSelection(TextSelectionVisitor*, PDFRectangle*, SelectionStyle)@plt (Quality:       0       0       0       0       0       0)
0x000ba220 GlobalParams::getMacRomanCharCode(char*)@plt                (Quality:       0       0       0       0       0       0)
0x000ba230 Attribute::getTypeForName(char const*, StructElement*)@plt  (Quality:       0       0       0       0       0       0)
0x000b54d0 XRef::getEncryptionParameters(unsigned char**, CryptAlgorithm*, int*)@plt (Quality:       0       0       0       0       0       0)
0x000b54c0 GooHash::~GooHash()@plt                                     (Quality:       0       0       0       9       9       9)
0x000ba260 PageLabelInfo::~PageLabelInfo()@plt                         (Quality:       0       0       0       0       0       0)
0x000ba270 OCDisplayNode::getChild(int)@plt                            (Quality:       0       0       0       0       0       0)
0x000ba280 FT_Done_Glyph@plt                                           (Quality:       0       0       0       0       0       0)
0x000ba290 SplashPattern::~SplashPattern()@plt                         (Quality:       0       0       0       0       0       0)
0x000ba2a0 cmsCreate_sRGBProfile@plt                                   (Quality:       0       0       0       1       1       1)
0x000b54b0 JBIG2Stream::readUWord(unsigned int*)@plt                   (Quality:       0       0       0       0       0       0)
0x000ba2c0 SplashXPath::addCurve(double, double, double, double, double, double, double, double, double, bool, bool, bool, bool)@plt (Quality:       0       0       0       0       0       0)
0x000ba2d0 opj_create_decompress@plt                                   (Quality:       0       0       0       0       0       0)
0x000ba2e0 SplashFTFontEngine::loadType1Font(SplashFontFileID*, SplashFontSrc*, char const**)@plt (Quality:       0       0       0       0       0       0)
0x000ba2f0 TextLine::primaryCmp(TextLine*)@plt                         (Quality:       0       0       0       0       0       0)
0x000ba300 unicodeToUpper(unsigned int)@plt                            (Quality:       0       0       0       0       0       0)
0x000ba310 GfxPatchMeshShading::parse(GfxResources*, int, Dict*, Stream*, OutputDev*, GfxState*)@plt (Quality:       0       0       0       0       0       0)
0x000b54a0 ActualText::end(GfxState*)@plt                              (Quality:       0       0       0       0       0       0)
0x000ba330 FoFiType1C::~FoFiType1C()@plt                               (Quality:       0       0       0       0       0       0)
0x000ba340 SplashOutputDev::getColor(GfxRGB*)@plt                      (Quality:       0       0       0       0       0       0)
0x000b5490 PSOutputDev::maskToClippingPath(Stream*, int, int, bool)@plt (Quality:       0       0       0       0       0       0)
0x000ba360 LinkLaunch::~LinkLaunch()@plt                               (Quality:       0       0       0       0       0       0)
0x000ba370 AnnotInk::freeInkList()@plt                                 (Quality:       0       0       0       0       0       0)
0x000ba380 GlobalParams::getPSResidentFont16(GooString*, int)@plt      (Quality:       0       0       0       0       0       0)
0x000ba390 GfxImageColorMap::getGray(unsigned char*, int*)@plt         (Quality:       0       0       0       0       0       0)
0x000ba3a0 closedir@plt                                                (Quality:       0       0       0       0       0       0)
0x000ba3b0 convertAnnotLineEndingStyle(AnnotLineEndingStyle)@plt       (Quality:       0       0       0       0       0       0)
0x000ba3c0 GfxUnivariateShading::setupCache(Matrix const*, double, double, double, double)@plt (Quality:       0       0       0       0       0       0)
0x000ba3d0 gmalloc@plt                                                 (Quality:       0       0       0  100000  100000  100000)
0x000b5480 Sound::~Sound()@plt                                         (Quality:       0       0       0       0       0       0)
0x000b5470 ProfileData::addElement(double)@plt                         (Quality:       0       0       0       0       0       0)
0x000b5460 Gfx::doShowText(GooString*)@plt                             (Quality:       0       0       0  100000  100000  100000)
0x000ba410 AnnotAppearanceBBox::getPageYMax() const@plt                (Quality:       0       0       0       0       0       0)
0x000ba420 SplashBitmap::getAlpha(int, int)@plt                        (Quality:       0       0       0       0       0       0)
0x000ba430 CMapCache::CMapCache()@plt                                  (Quality:       0       0       0       1       1       1)
0x000ba440 Function::parse(Object*)@plt                                (Quality:       0       0       0       0       0       0)
0x000ba450 Catalog::getJSNameTree()@plt                                (Quality:       0       0       0       0       0       0)
0x000ba460 XRef::lock()@plt                                            (Quality:       0       0       0       0       0       0)
0x000ba470 GfxState::clipToStrokePath()@plt                            (Quality:       0       0       0       0       0       0)
0x000ba480 JBIG2Stream::close()@plt                                    (Quality:       0       0       0       0       0       0)
0x000ba490 SplashFontEngine::loadTrueTypeFont(SplashFontFileID*, SplashFontSrc*, int*, int, int)@plt (Quality:       0       0       0       0       0       0)
0x000ba4a0 CMapCache::~CMapCache()@plt                                 (Quality:       0       0       0       1       1       1)
0x000ba4b0 TextFlow::TextFlow(TextPage*, TextBlock*)@plt               (Quality:       0       0       0       0       0       0)
0x000ba4c0 FoFiTrueType::~FoFiTrueType()@plt                           (Quality:       0       0       0       0       0       0)
0x000ba4d0 memmove@plt                                                 (Quality:       0       0       0       5       5       5)
0x000ba4e0 std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::find(int const&)@plt (Quality:       0       0       0       2       2       2)
0x000ba4f0 GfxSeparationColorSpace::GfxSeparationColorSpace(GooString*, GfxColorSpace*, Function*)@plt (Quality:       0       0       0       0       0       0)
0x000b5440 GooList::append(void*)@plt                                  (Quality:       0       0       0       1       1       1)
0x000b5430 JBIG2Bitmap::clearToOne()@plt                               (Quality:       0       0       0       0       0       0)
0x000ba520 XRef::readXRefStream(Stream*, long long*)@plt               (Quality:       0       0       0       0       0       0)
0x000ba530 png_set_IHDR@plt                                            (Quality:       0       0       0       0       0       0)
0x000ba540 Dict::getVal(int, Object*)@plt                              (Quality:       0       0       0       2       2       2)
0x000ba550 AnnotPath::AnnotPath(Array*)@plt                            (Quality:       0       0       0       0       0       0)
0x000ba560 GfxState::setFillColorSpace(GfxColorSpace*)@plt             (Quality:       0       0       0       0       0       0)
0x000ba570 AnnotWidget::drawFormFieldText(GfxResources*, GooString*)@plt (Quality:       0       0       0       0       0       0)
0x000ba580 void std::__introsort_loop<TrueTypeLoca*, long, __gnu_cxx::__ops::_Iter_comp_iter<cmpTrueTypeLocaOffsetFunctor> >(TrueTypeLoca*, TrueTypeLoca*, long, __gnu_cxx::__ops::_Iter_comp_iter<cmpTrueTypeLocaOffsetFunctor>)@plt (Quality:       0       0       0       0       0       0)
0x000ba590 FormFieldText::getContentCopy()@plt                         (Quality:       0       0       0       0       0       0)
0x000ba5a0 SplashScreen::~SplashScreen()@plt                           (Quality:       0       0       0       0       0       0)
0x000ba5b0 void std::__insertion_sort<DictEntry*, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(DictEntry const&, DictEntry const&)> >(DictEntry*, DictEntry*, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(DictEntry const&, DictEntry const&)>)@plt (Quality:       0       0       0       0       0       0)
0x000ba5c0 Splash::scaleImageYuXd(bool (*)(void*, unsigned char*, unsigned char*), void*, SplashColorMode, int, bool, int, int, int, int, SplashBitmap*)@plt (Quality:       0       0       0       0       0       0)
0x000b5420 JBIG2MMRDecoder::~JBIG2MMRDecoder()@plt                     (Quality:       0       0       0       0       0       0)
0x000ba5e0 FormWidget::encodeID(unsigned int, unsigned int)@plt        (Quality:       0       0       0       0       0       0)
0x000ba5f0 TextPage::findCharRange(int, int, double*, double*, double*, double*)@plt (Quality:       0       0       0       0       0       0)
0x000ba600 GfxShadingBitBuf::getBits(int, unsigned int*)@plt           (Quality:       0       0       0       0       0       0)
0x000ba610 GfxCIDFont::getCodeToGIDMap(FoFiTrueType*, int*)@plt        (Quality:       0       0       0       0       0       0)
0x000ba620 MovieActivationParameters::parseMovieActivation(Object*)@plt (Quality:       0       0       0       0       0       0)
0x000ba630 AnnotAppearanceBBox::getPageXMax() const@plt                (Quality:       0       0       0       0       0       0)
0x000b5410 SplashFont::initCache()@plt                                 (Quality:       0       0       0       0       0       0)
0x000ba650 GfxUnivariateShading::getColor(double, GfxColor*)@plt       (Quality:       0       0       0       0       0       0)
0x000ba660 ActualText::begin(GfxState*, GooString*)@plt                (Quality:       0       0       0       0       0       0)
0x000ba670 GfxDeviceNColorSpace::GfxDeviceNColorSpace(int, GooString**, GfxColorSpace*, Function*, GooList*)@plt (Quality:       0       0       0       0       0       0)
0x000ba680 EmbFile::save2(_IO_FILE*)@plt                               (Quality:       0       0       0       0       0       0)
0x000ba690 Splash::gouraudTriangleShadedFill(SplashGouraudColor*)@plt  (Quality:       0       0       0       0       0       0)
0x000ba6a0 FormWidgetChoice::_checkRange(int)@plt                      (Quality:       0       0       0       0       0       0)
0x000ba6b0 CachedFile::seek(long, int)@plt                             (Quality:       0       0       0       0       0       0)
0x000ba6c0 Gfx::getPos()@plt                                           (Quality:       0       0       0       0       0       0)
0x000ba6d0 BuiltinFontWidths::BuiltinFontWidths(BuiltinFontWidth*, int)@plt (Quality:       0       0       0      14      14      14)
0x000ba6e0 Object::getNum()@plt                                        (Quality:       0       0       0       0       0       0)
0x000ba6f0 CachedFileWriter::CachedFileWriter(CachedFile*, std::vector<int, std::allocator<int> >*)@plt (Quality:       0       0       0       0       0       0)
0x000ba700 GooList::append(GooList*)@plt                               (Quality:       0       0       0       0       0       0)
0x000ba710 FoFiTrueType::getNumCmaps()@plt                             (Quality:       0       0       0       0       0       0)
0x000ba720 LZWStream::clearTable()@plt                                 (Quality:       0       0       0       0       0       0)
0x000ba730 asin@plt                                                    (Quality:       0       0       0       0       0       0)
0x000ba740 std::vector<std::vector<StructTreeRoot::Parent, std::allocator<StructTreeRoot::Parent> >, std::allocator<std::vector<StructTreeRoot::Parent, std::allocator<StructTreeRoot::Parent> > > >::_M_fill_insert(__gnu_cxx::__normal_iterator<std::vector<StructTreeRoot::Parent, std::allocator<StructTreeRoot::Parent> >*, std::vector<std::vector<StructTreeRoot::Parent, std::allocator<StructTreeRoot::Parent> >, std::allocator<std::vector<StructTreeRoot::Parent, std::allocator<StructTreeRoot::Parent> > > > >, unsigned long, std::vector<StructTreeRoot::Parent, std::allocator<StructTreeRoot::Parent> > const&)@plt (Quality:       0       0       0       0       0       0)
0x000b53f0 TIFFClose@plt                                               (Quality:       0       0       0       0       0       0)
0x000ba760 Annot3D::~Annot3D()@plt                                     (Quality:       0       0       0       0       0       0)
0x000ba770 JBIG2Stream::readEndOfStripeSeg(unsigned int)@plt           (Quality:       0       0       0       0       0       0)
0x000ba780 FlateStream::readSome()@plt                                 (Quality:       0       0       0  100000  100000  100000)
0x000ba790 FormFieldChoice::~FormFieldChoice()@plt                     (Quality:       0       0       0       0       0       0)
0x000ba7a0 Annot::Annot(PDFDoc*, Dict*, Object*)@plt                   (Quality:       0       0       0       0       0       0)
0x000ba7b0 Gfx::doSoftMask(Object*, bool, GfxColorSpace*, bool, bool, Function*, GfxColor*)@plt (Quality:       0       0       0       0       0       0)
0x000b53e0 TextBlock::~TextBlock()@plt                                 (Quality:       0       0       0       0       0       0)
0x000ba7d0 GfxIndexedColorSpace::GfxIndexedColorSpace(GfxColorSpace*, int)@plt (Quality:       0       0       0       0       0       0)
0x000ba7e0 getLine(char*, int, _IO_FILE*)@plt                          (Quality:       0       0       0       0       0       0)
0x000ba7f0 AnnotAppearance::removeStateStreams(Object*)@plt            (Quality:       0       0       0       0       0       0)
0x000ba800 ObjectStream::~ObjectStream()@plt                           (Quality:       0       0       0       0       0       0)
0x000ba810 AnnotWidget::initialize(PDFDoc*, Dict*)@plt                 (Quality:       0       0       0       0       0       0)
0x000ba820 FileSpec::FileSpec(Object*)@plt                             (Quality:       0       0       0       0       0       0)
0x000ba830 CMap::decRefCnt()@plt                                       (Quality:       0       0       0       0       0       0)
0x000ba840 ObjectStream::ObjectStream(XRef*, int, int)@plt             (Quality:       0       0       0       0       0       0)
0x000ba850 CachedFile::CachedFile(CachedFileLoader*, GooString*)@plt   (Quality:       0       0       0       0       0       0)
0x000b53d0 std::_Rb_tree<unsigned int, std::pair<unsigned int const, unsigned int>, std::_Select1st<std::pair<unsigned int const, unsigned int> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >::find(unsigned int const&)@plt (Quality:       0       0       0       0       0       0)
0x000ba870 NameToCharCode::NameToCharCode()@plt                        (Quality:       0       0       0       3       3       3)
0x000ba880 XRef::scanSpecialFlags()@plt                                (Quality:       0       0       0       0       0       0)
0x000ba890 SplashClip::testRect(int, int, int, int)@plt                (Quality:       0       0       0       0       0       0)
0x000ba8a0 MediaParameters::MediaParameters()@plt                      (Quality:       0       0       0       0       0       0)
0x000ba8b0 AnnotPath::~AnnotPath()@plt                                 (Quality:       0       0       0       0       0       0)
0x000ba8c0 SplashFTFontFile::loadCIDFont(SplashFTFontEngine*, SplashFontFileID*, SplashFontSrc*, int*, int)@plt (Quality:       0       0       0       0       0       0)
0x000ba8d0 SplashBitmap::~SplashBitmap()@plt                           (Quality:       0       0       0       0       0       0)
0x000ba8e0 Linearization::~Linearization()@plt                         (Quality:       0       0       0       1       1       1)
0x000ba8f0 GfxShadingPattern::GfxShadingPattern(GfxShading*, double*)@plt (Quality:       0       0       0       0       0       0)
0x000ba900 PSStack::roll(int, int)@plt                                 (Quality:       0       0       0       0       0       0)
0x000b53c0 OptionalContentGroup::getRef() const@plt                    (Quality:       0       0       0       0       0       0)
0x000ba920 std::vector<StructTreeRoot::Parent, std::allocator<StructTreeRoot::Parent> >::_M_fill_insert(__gnu_cxx::__normal_iterator<StructTreeRoot::Parent*, std::vector<StructTreeRoot::Parent, std::allocator<StructTreeRoot::Parent> > >, unsigned long, StructTreeRoot::Parent const&)@plt (Quality:       0       0       0       0       0       0)
0x000ba930 AnnotColor::AnnotColor(double, double, double, double)@plt  (Quality:       0       0       0       0       0       0)
0x000ba940 floor@plt                                                   (Quality:       0       0       0  100000  100000  100000)
0x000b53b0 AnnotAppearance::referencesStream(Object*, Ref)@plt         (Quality:       0       0       0       0       0       0)
0x000ba960 Splash::setFillAlpha(double)@plt                            (Quality:       0       0       0       0       0       0)
0x000ba970 ImageStream::ImageStream(Stream*, int, int, int)@plt        (Quality:       0       0       0       0       0       0)
0x000ba980 SplashState::SplashState(SplashState*)@plt                  (Quality:       0       0       0       0       0       0)
0x000ba990 XRef::resize(int)@plt                                       (Quality:       0       0       0       1       1       1)
0x000ba9a0 Movie::parseMovie(Object*)@plt                              (Quality:       0       0       0       0       0       0)
0x000ba9b0 XRef::getNumEntry(long long)@plt                            (Quality:       0       0       0       0       0       0)
0x000b53a0 gmalloc_checkoverflow@plt                                   (Quality:       0       0       0       0       0       0)
0x000ba9d0 GfxShadingBitBuf::~GfxShadingBitBuf()@plt                   (Quality:       0       0       0       0       0       0)
0x000ba9e0 SampledFunction::SampledFunction(SampledFunction const*)@plt (Quality:       0       0       0       0       0       0)
0x000b5390 SplashXPath::addSegment(double, double, double, double)@plt (Quality:       0       0       0       0       0       0)
0x000baa00 Splash::Splash(SplashBitmap*, bool, SplashScreenParams*)@plt (Quality:       0       0       0       0       0       0)
0x000baa10 Splash::fillChar(double, double, int, SplashFont*)@plt      (Quality:       0       0       0       0       0       0)
0x000baa20 FormField::FormField(PDFDoc*, Object*, Ref const&, FormField*, std::set<int, std::less<int>, std::allocator<int> >*, FormFieldType)@plt (Quality:       0       0       0       0       0       0)
0x000b5380 Linearization::getPageFirst()@plt                           (Quality:       0       0       0       0       0       0)
0x000baa40 Annot::setContents(GooString*)@plt                          (Quality:       0       0       0       0       0       0)
0x000baa50 SplashAxialPattern::~SplashAxialPattern()@plt               (Quality:       0       0       0       0       0       0)
0x000baa60 jpeg_stdio_dest@plt                                         (Quality:       0       0       0       0       0       0)
0x000baa70 opj_decode@plt                                              (Quality:       0       0       0       0       0       0)
0x000baa80 Matrix::norm() const@plt                                    (Quality:       0       0       0       0       0       0)
0x000baa90 FoFiType1C::readCharset()@plt                               (Quality:       0       0       0       0       0       0)
0x000baaa0 FcLangSetDestroy@plt                                        (Quality:       0       0       0       0       0       0)
0x000baab0 jpeg_CreateDecompress@plt                                   (Quality:       0       0       0       3       3       3)
0x000baac0 PSOutputDev::writePSChar(char)@plt                          (Quality:       0       0       0  100000  100000  100000)
0x000baad0 GooHash::lookupInt(char const*)@plt                         (Quality:       0       0       0       0       0       0)
0x000baae0 GooString::del(int, int)@plt                                (Quality:       0       0       0       0       0       0)
0x000b5370 Gfx::saveStateStack()@plt                                   (Quality:       0       0       0       0       0       0)
0x000bab00 ASCII85Stream::ASCII85Stream(Stream*)@plt                   (Quality:       0       0       0       0       0       0)
0x000bab10 GfxImageColorMap::getRGBXLine(unsigned char*, unsigned char*, int)@plt (Quality:       0       0       0       0       0       0)
0x000b5360 Splash::setStrokePattern(SplashPattern*)@plt                (Quality:       0       0       0       0       0       0)
0x000bab30 TextPage::getSelectionRegion(PDFRectangle*, SelectionStyle, double)@plt (Quality:       0       0       0       0       0       0)
0x000bab40 PSOutputDev::opiTransform(GfxState*, double, double, double*, double*)@plt (Quality:       0       0       0       0       0       0)
0x000b5350 Gfx::opSetLineJoin(Object*, int)@plt                        (Quality:       0       0       0       0       0       0)
0x000bab60 void std::__adjust_heap<TrueTypeLoca*, long, TrueTypeLoca, __gnu_cxx::__ops::_Iter_comp_iter<cmpTrueTypeLocaOffsetFunctor> >(TrueTypeLoca*, long, long, TrueTypeLoca, __gnu_cxx::__ops::_Iter_comp_iter<cmpTrueTypeLocaOffsetFunctor>)@plt (Quality:       0       0       0       0       0       0)
0x000bab70 GlobalParams::getPSResidentFontCC(GooString*, int)@plt      (Quality:       0       0       0       0       0       0)
0x000bab80 Catalog::findPage(int, int)@plt                             (Quality:       0       0       0       0       0       0)
0x000b5340 NameToCharCode::~NameToCharCode()@plt                       (Quality:       0       0       0       3       3       3)
0x000baba0 UnicodeMap::UnicodeMap(GooString*)@plt                      (Quality:       0       0       0       0       0       0)
0x000babb0 SplashUnivariatePattern::~SplashUnivariatePattern()@plt     (Quality:       0       0       0       0       0       0)
0x000babc0 TextBlock::secondaryDelta(TextBlock*)@plt                   (Quality:       0       0       0       0       0       0)
0x000b5330 GlobalParams::mapNameToUnicodeAll(char const*)@plt          (Quality:       0       0       0       0       0       0)
0x000babe0 GfxLabColorSpace::parse(Array*, GfxState*)@plt              (Quality:       0       0       0       0       0       0)
0x000babf0 StreamPredictor::~StreamPredictor()@plt                     (Quality:       0       0       0       0       0       0)
0x000bac00 FoFiType1C::load(char*)@plt                                 (Quality:       0       0       0       0       0       0)
0x000bac10 AnnotText::~AnnotText()@plt                                 (Quality:       0       0       0       0       0       0)
0x000bac20 Splash::clearModRegion()@plt                                (Quality:       0       0       0       0       0       0)
0x000bac30 Splash::blitTransparent(SplashBitmap*, int, int, int, int, int, int)@plt (Quality:       0       0       0       0       0       0)
0x000bac40 Gfx::doForm(Object*)@plt                                    (Quality:       0       0       0       0       0       0)
0x000bac50 png_create_info_struct@plt                                  (Quality:       0       0       0       0       0       0)
0x000bac60 Linearization::getMainXRefEntriesOffset()@plt               (Quality:       0       0       0       0       0       0)
0x000bac70 FormFieldText::setContentCopy(GooString*)@plt               (Quality:       0       0       0       0       0       0)
0x000bac80 copyString@plt                                              (Quality:       0       0       0  100000  100000  100000)
0x000bac90 GfxColorSpace::parse(GfxResources*, Object*, OutputDev*, GfxState*, int)@plt (Quality:       0       0       0       2       2       2)
0x000baca0 Gfx::opSetDash(Object*, int)@plt                            (Quality:       0       0       0       0       0       0)
0x000bacb0 Gfx::opSetLineWidth(Object*, int)@plt                       (Quality:       0       0       0       0       0       0)
0x000bacc0 LinkJavaScript::LinkJavaScript(Object*)@plt                 (Quality:       0       0       0       0       0       0)
0x000bacd0 TextStringToUCS4(GooString*, unsigned int**)@plt            (Quality:       0       0       0       0       0       0)
0x000bace0 Splash::fillWithPattern(SplashPath*, bool, SplashPattern*, double)@plt (Quality:       0       0       0       0       0       0)
0x000bacf0 gatof@plt                                                   (Quality:       0       0       0       0       0       0)
0x000bad00 GooString::sanitizedName(bool)@plt                          (Quality:       0       0       0       0       0       0)
0x000bad10 PSOutputDev::~PSOutputDev()@plt                             (Quality:       0       0       0       1       1       1)
0x000bad20 AnnotMovie::initialize(PDFDoc*, Dict*)@plt                  (Quality:       0       0       0       0       0       0)
0x000bad30 FoFiTrueType::convertToType1(char*, char const**, bool, void (*)(void*, char const*, int), void*)@plt (Quality:       0       0       0       0       0       0)
0x000bad40 GfxGouraudTriangleShading::GfxGouraudTriangleShading(int, GfxGouraudVertex*, int, int (*) [3], int, Function**, int)@plt (Quality:       0       0       0       0       0       0)
0x000bad50 gmallocn_checkoverflow@plt                                  (Quality:       0       0       0       6       6       6)
0x000bad60 EncryptStream::~EncryptStream()@plt                         (Quality:       0       0       0       0       0       0)
0x000bad70 FT_New_Face@plt                                             (Quality:       0       0       0       0       0       0)
0x000bad80 CharCodeToUnicodeCache::CharCodeToUnicodeCache(int)@plt     (Quality:       0       0       0       2       2       2)
0x000bad90 std::_Rb_tree<int, std::pair<int const, int>, std::_Select1st<std::pair<int const, int> >, std::less<int>, std::allocator<std::pair<int const, int> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<int const, int> >, int const&)@plt (Quality:       0       0       0       0       0       0)
0x000bada0 AnnotScreen::initialize(PDFDoc*, Dict*)@plt                 (Quality:       0       0       0       0       0       0)
0x000b5320 FoFiTrueType::setupGSUB(char const*, char const*)@plt       (Quality:       0       0       0       0       0       0)
0x000badc0 GfxState::setStrokePattern(GfxPattern*)@plt                 (Quality:       0       0       0       0       0       0)
0x000badd0 std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_copy(std::_Rb_tree_node<int> const*, std::_Rb_tree_node<int>*)@plt (Quality:       0       0       0       0       0       0)
0x000bade0 JBIG2Stream::readSymbolDictSeg(unsigned int, unsigned int, unsigned int*, unsigned int)@plt (Quality:       0       0       0       0       0       0)
0x000badf0 XRef::add(int, int, long long, bool)@plt                    (Quality:       0       0       0       0       0       0)
0x000bae00 GfxState::getTransformedFontSize()@plt                      (Quality:       0       0       0       0       0       0)
0x000bae10 Sound::Sound(Object*, bool)@plt                             (Quality:       0       0       0       0       0       0)
0x000bae20 Splash::setSoftMask(SplashBitmap*)@plt                      (Quality:       0       0       0       0       0       0)
0x000bae30 CharCodeToUnicodeCache::add(CharCodeToUnicode*)@plt         (Quality:       0       0       0       0       0       0)
0x000bae40 modf@plt                                                    (Quality:       0       0       0       0       0       0)
0x000bae50 JBIG2Bitmap::expand(int, unsigned int)@plt                  (Quality:       0       0       0       0       0       0)
0x000bae60 FT_Render_Glyph@plt                                         (Quality:       0       0       0       0       0       0)
0x000bae70 SplashClip::~SplashClip()@plt                               (Quality:       0       0       0       0       0       0)
0x000bae80 GooString::insert(int, char)@plt                            (Quality:       0       0       0       0       0       0)
0x000bae90 TextWord::merge(TextWord*)@plt                              (Quality:       0       0       0       0       0       0)
0x000baea0 Annot3D::initialize(PDFDoc*, Dict*)@plt                     (Quality:       0       0       0       0       0       0)
0x000baeb0 FormField::updateChildrenAppearance()@plt                   (Quality:       0       0       0       0       0       0)
0x000b5300 SplashFTFontFile::~SplashFTFontFile()@plt                   (Quality:       0       0       0       0       0       0)
0x000baed0 FoFiType1C::make(char*, int)@plt                            (Quality:       0       0       0       0       0       0)
0x000b52f0 TextBlock::isBelow(TextBlock*)@plt                          (Quality:       0       0       0       0       0       0)
0x000baef0 GfxSeparationColorSpace::~GfxSeparationColorSpace()@plt     (Quality:       0       0       0       0       0       0)
0x000b52e0 FoFiBase::getS16BE(int, bool*)@plt                          (Quality:       0       0       0       0       0       0)
0x000baf10 GfxPatternColorSpace::~GfxPatternColorSpace()@plt           (Quality:       0       0       0       0       0       0)
0x000baf20 pdfDocEncodingToUTF16(GooString*, int*)@plt                 (Quality:       0       0       0       0       0       0)
0x000b52d0 EOFStream::EOFStream(Stream*)@plt                           (Quality:       0       0       0       0       0       0)
0x000baf40 CharCodeToUnicode::setMapping(unsigned int, unsigned int*, int)@plt (Quality:       0       0       0       0       0       0)
0x000baf50 JBIG2Stream::readGenericRegionSeg(unsigned int, bool, bool, unsigned int)@plt (Quality:       0       0       0       0       0       0)
0x000b52c0 CharCodeToUnicode::mapToUnicode(unsigned int, unsigned int**)@plt (Quality:       0       0       0  100000  100000  100000)
0x000baf70 FormField::~FormField()@plt                                 (Quality:       0       0       0       0       0       0)
0x000b52b0 DCTStream::DCTStream(Stream*, int, Object*, int)@plt        (Quality:       0       0       0       3       3       3)
0x000baf90 PopplerCache::lookup(PopplerCacheKey const&)@plt            (Quality:       0       0       0       0       0       0)
0x000bafa0 SplashGouraudPattern::~SplashGouraudPattern()@plt           (Quality:       0       0       0       0       0       0)
0x000bafb0 Links::~Links()@plt                                         (Quality:       0       0       0       0       0       0)
0x000bafc0 FoFiType1C::eexecWriteCharstring(Type1CEexecBuf*, unsigned char*, int)@plt (Quality:       0       0       0       0       0       0)
0x000b52a0 GfxICCBasedColorSpace::parse(Array*, OutputDev*, GfxState*, int)@plt (Quality:       0       0       0       0       0       0)
0x000bafe0 greallocn_checkoverflow@plt                                 (Quality:       0       0       0       1       1       1)
0x000baff0 __cxa_guard_acquire@plt                                     (Quality:       0       0       0       0       0       0)
0x000bb000 JArithmeticDecoder::decodeBit(unsigned int, JArithmeticDecoderStats*)@plt (Quality:       0       0       0       0       0       0)
0x000b5290 FoFiTrueType::cvtSfnts(void (*)(void*, char const*, int), void*, GooString*, bool, int*)@plt (Quality:       0       0       0       0       0       0)
0x000bb020 FoFiType1C::convertToCIDType0(char*, int*, int, void (*)(void*, char const*, int), void*)@plt (Quality:       0       0       0       0       0       0)
0x000bb030 OCDisplayNode::OCDisplayNode(GooString*)@plt                (Quality:       0       0       0       0       0       0)
0x000bb040 png_write_rows@plt                                          (Quality:       0       0       0       0       0       0)
0x000bb050 PopplerCacheItem::~PopplerCacheItem()@plt                   (Quality:       0       0       0       0       0       0)
0x000bb060 Hints::getPageObjectNum(int)@plt                            (Quality:       0       0       0       0       0       0)
0x000bb070 Splash::composite(SplashBitmap*, int, int, int, int, int, int, bool, bool, bool, double)@plt (Quality:       0       0       0       0       0       0)
0x000bb080 Splash::setOverprintMode(int)@plt                           (Quality:       0       0       0       0       0       0)
0x000bb090 GooString::append(GooString*)@plt                           (Quality:       0       0       0       0       0       0)
0x000bb0a0 TextSelectionDumper::endPage()@plt                          (Quality:       0       0       0       0       0       0)
0x000bb0b0 PDFDoc::saveAs(OutStream*, PDFWriteMode)@plt                (Quality:       0       0       0       0       0       0)
0x000bb0c0 GooFile::size() const@plt                                   (Quality:       0       0       0       3       3       3)
0x000bb0d0 UnicodeMap::UnicodeMap(char const*, bool, int (*)(unsigned int, char*, int))@plt (Quality:       0       0       0       2       2       2)
0x000bb0e0 strdup@plt                                                  (Quality:       0       0       0       0       0       0)
0x000bb0f0 AnnotFreeText::~AnnotFreeText()@plt                         (Quality:       0       0       0       0       0       0)
0x000b5280 GfxShadingPattern::parse(GfxResources*, Object*, OutputDev*, GfxState*)@plt (Quality:       0       0       0       0       0       0)
0x000b5270 longjmp@plt                                                 (Quality:       0       0       0       0       0       0)
0x000bb120 RunLengthEncoder::RunLengthEncoder(Stream*)@plt             (Quality:       0       0       0       0       0       0)
0x000bb130 ImgWriter::~ImgWriter()@plt                                 (Quality:       0       0       0       0       0       0)
0x000bb140 SplashPath::getCurPt(double*, double*)@plt                  (Quality:       0       0       0       0       0       0)
0x000bb150 FoFiType1C::getCIDToGIDMap(int*)@plt                        (Quality:       0       0       0       0       0       0)
0x000bb160 png_set_pHYs@plt                                            (Quality:       0       0       0       0       0       0)
0x000bb170 unicodeTypeAlphaNum(unsigned int)@plt                       (Quality:       0       0       0       0       0       0)
0x000bb180 freeBuiltinFontTables()@plt                                 (Quality:       0       0       0       1       1       1)
0x000bb190 TextPage::coalesce(bool, double, bool)@plt                  (Quality:       0       0       0       0       0       0)
0x000bb1a0 GooString::append(char)@plt                                 (Quality:       0       0       0  100000  100000  100000)
0x000bb1b0 OCGs::optContentIsVisible(Object*)@plt                      (Quality:       0       0       0       0       0       0)
0x000bb1c0 PSOutputDev::writeXpdfProcset()@plt                         (Quality:       0       0       0       1       1       1)
0x000b5260 TextPage::startPage(GfxState*)@plt                          (Quality:       0       0       0       0       0       0)
0x000b5250 FcDefaultSubstitute@plt                                     (Quality:       0       0       0       0       0       0)
0x000bb1f0 void std::__heap_select<SplashIntersect*, __gnu_cxx::__ops::_Iter_comp_iter<cmpIntersectFunctor> >(SplashIntersect*, SplashIntersect*, SplashIntersect*, __gnu_cxx::__ops::_Iter_comp_iter<cmpIntersectFunctor>)@plt (Quality:       0       0       0       0       0       0)
0x000bb200 SplashClip::resetToRect(double, double, double, double)@plt (Quality:       0       0       0       0       0       0)
0x000bb210 FcLangSetAdd@plt                                            (Quality:       0       0       0       0       0       0)
0x000bb220 SplashClip::clipToRect(double, double, double, double)@plt  (Quality:       0       0       0       0       0       0)
0x000bb230 PSOutputDev::setupEmbeddedOpenTypeT1CFont(GfxFont*, Ref*, GooString*)@plt (Quality:       0       0       0       0       0       0)
0x000bb240 BaseCryptStream::~BaseCryptStream()@plt                     (Quality:       0       0       0       0       0       0)
0x000b5240 JBIG2HuffmanDecoder::readBits(unsigned int)@plt             (Quality:       0       0       0       0       0       0)
0x000bb260 void std::__heap_select<TrueTypeLoca*, __gnu_cxx::__ops::_Iter_comp_iter<cmpTrueTypeLocaIdxFunctor> >(TrueTypeLoca*, TrueTypeLoca*, TrueTypeLoca*, __gnu_cxx::__ops::_Iter_comp_iter<cmpTrueTypeLocaIdxFunctor>)@plt (Quality:       0       0       0       0       0       0)
0x000bb270 appendToPath(GooString*, char const*)@plt                   (Quality:       0       0       0       0       0       0)
0x000bb280 TextFlow::~TextFlow()@plt                                   (Quality:       0       0       0       0       0       0)
0x000bb290 SplashAxialPattern::SplashAxialPattern(SplashColorMode, GfxState*, GfxAxialShading*)@plt (Quality:       0       0       0       0       0       0)
0x000b5230 Gfx::opSetLineCap(Object*, int)@plt                         (Quality:       0       0       0       0       0       0)
0x000bb2b0 MediaRendition::MediaRendition(Object*)@plt                 (Quality:       0       0       0       0       0       0)
0x000bb2c0 GfxFont::getExternalFont(GooString*, bool)@plt              (Quality:       0       0       0       0       0       0)
0x000bb2d0 Annot::~Annot()@plt                                         (Quality:       0       0       0       0       0       0)
0x000bb2e0 GooList::expand()@plt                                       (Quality:       0       0       0       0       0       0)
0x000bb2f0 Object::copy(Object*)@plt                                   (Quality:       0       0       0  100000  100000  100000)
0x000bb300 FoFiTrueType::FoFiTrueType(char*, int, bool, int)@plt       (Quality:       0       0       0       0       0       0)
0x000bb310 opj_setup_decoder@plt                                       (Quality:       0       0       0       0       0       0)
0x000b5220 FormFieldButton::updateState(char*)@plt                     (Quality:       0       0       0       0       0       0)
0x000bb330 LinkOCGState::StateList::~StateList()@plt                   (Quality:       0       0       0       0       0       0)
0x000bb340 JBIG2MMRDecoder::JBIG2MMRDecoder()@plt                      (Quality:       0       0       0       0       0       0)
0x000bb350 ASCIIHexEncoder::ASCIIHexEncoder(Stream*)@plt               (Quality:       0       0       0       0       0       0)
0x000bb360 SplashFont::~SplashFont()@plt                               (Quality:       0       0       0       0       0       0)
0x000b5210 JBIG2Stream::readTextRegion(bool, bool, int, int, unsigned int, unsigned int, int, JBIG2HuffmanTable*, unsigned int, JBIG2Bitmap**, unsigned int, unsigned int, unsigned int, unsigned int, int, JBIG2HuffmanTable*, JBIG2HuffmanTable*, JBIG2HuffmanTable*, JBIG2HuffmanTable*, JBIG2HuffmanTable*, JBIG2HuffmanTable*, JBIG2HuffmanTable*, JBIG2HuffmanTable*, unsigned int, int*, int*)@plt (Quality:       0       0       0       0       0       0)
0x000bb380 GfxState::getXYZ2DisplayTransform()@plt                     (Quality:       0       0       0       0       0       0)
0x000bb390 Page::removeAnnot(Annot*)@plt                               (Quality:       0       0       0       0       0       0)
0x000bb3a0 FT_Done_Face@plt                                            (Quality:       0       0       0       0       0       0)
0x000bb3b0 MediaParameters::parseMediaPlayParameters(Object*)@plt      (Quality:       0       0       0       0       0       0)
0x000bb3c0 JBIG2Bitmap::getSlice(unsigned int, unsigned int, unsigned int, unsigned int)@plt (Quality:       0       0       0       0       0       0)
0x000bb3d0 GfxImageColorMap::getDeviceN(unsigned char*, GfxColor*)@plt (Quality:       0       0       0       0       0       0)
0x000bb3e0 cos@plt                                                     (Quality:       0       0       0       0       0       0)
0x000b5200 StreamPredictor::getNextLine()@plt                          (Quality:       0       0       0       0       0       0)
0x000bb400 XRef::XRefPreScanWriter::XRefPreScanWriter()@plt            (Quality:       0       0       0       0       0       0)
0x000bb410 Splash::drawAAPixel(SplashPipe*, int, int)@plt              (Quality:       0       0       0       0       0       0)
0x000b51e0 void std::__adjust_heap<SplashXPathSeg*, long, SplashXPathSeg, __gnu_cxx::__ops::_Iter_comp_iter<cmpXPathSegsFunctor> >(SplashXPathSeg*, long, long, SplashXPathSeg, __gnu_cxx::__ops::_Iter_comp_iter<cmpXPathSegsFunctor>)@plt (Quality:       0       0       0       0       0       0)
0x000bb430 OutStream::OutStream()@plt                                  (Quality:       0       0       0       0       0       0)
0x000bb440 EncryptStream::EncryptStream(Stream*, unsigned char*, CryptAlgorithm, int, int, int)@plt (Quality:       0       0       0       0       0       0)
0x000bb450 DeviceNRecoder::DeviceNRecoder(Stream*, int, int, GfxImageColorMap*)@plt (Quality:       0       0       0       0       0       0)
0x000bb460 JBIG2Stream::readCodeTableSeg(unsigned int, unsigned int)@plt (Quality:       0       0       0       0       0       0)
0x000bb470 AnnotQuadrilaterals::AnnotQuadrilateral::AnnotQuadrilateral(double, double, double, double, double, double, double, double)@plt (Quality:       0       0       0       0       0       0)
0x000bb480 SplashUnivariatePattern::SplashUnivariatePattern(SplashColorMode, GfxState*, GfxUnivariateShading*)@plt (Quality:       0       0       0       0       0       0)
0x000bb490 Lexer::isSpace(int)@plt                                     (Quality:       0       0       0       0       0       0)
0x000bb4a0 T3FontCache::T3FontCache(Ref*, double, double, double, double, int, int, int, int, bool, bool)@plt (Quality:       0       0       0       0       0       0)
0x000bb4b0 PSOutputDev::setupImage(Ref, Stream*, bool)@plt             (Quality:       0       0       0       0       0       0)
0x000bb4c0 AnnotLink::~AnnotLink()@plt                                 (Quality:       0       0       0       0       0       0)
0x000bb4d0 png_init_io@plt                                             (Quality:       0       0       0       0       0       0)
0x000bb4e0 GlobalParams::getScreenDotRadius()@plt                      (Quality:       0       0       0       0       0       0)
0x000bb4f0 FormFieldChoice::getEditChoice()@plt                        (Quality:       0       0       0       0       0       0)
0x000b51d0 PDFDoc::saveIncrementalUpdate(OutStream*)@plt               (Quality:       0       0       0       0       0       0)
0x000bb510 MemStream::MemStream(char*, long long, long long, Object*)@plt (Quality:       0       0       0       0       0       0)
0x000bb520 TextSelectionVisitor::TextSelectionVisitor(TextPage*)@plt   (Quality:       0       0       0       0       0       0)
0x000bb530 GDir::~GDir()@plt                                           (Quality:       0       0       0       4       4       4)
0x000b51c0 JBIG2Stream::readPatternDictSeg(unsigned int, unsigned int)@plt (Quality:       0       0       0       0       0       0)
0x000bb550 FoFiTrueType::cvtCharStrings(char**, int*, void (*)(void*, char const*, int), void*)@plt (Quality:       0       0       0       0       0       0)
0x000bb560 __gmon_start__@plt                                          (Quality:       0       0       0       0       0       0)
0x000bb570 PDFDoc::markObject(Object*, XRef*, XRef*, unsigned int, int, int)@plt (Quality:       0       0       0       0       0       0)
0x000bb580 NameTree::NameTree()@plt                                    (Quality:       0       0       0       0       0       0)
0x000bb590 AnnotInk::writeInkList(AnnotPath**, int, Array*)@plt        (Quality:       0       0       0       0       0       0)
0x000bb5a0 GooHash::killIter(GooHashIter**)@plt                        (Quality:       0       0       0       0       0       0)
0x000bb5b0 AnnotLine::generateLineAppearance()@plt                     (Quality:       0       0       0       0       0       0)
0x000bb5c0 Gfx::opSetFlat(Object*, int)@plt                            (Quality:       0       0       0       0       0       0)
0x000bb5d0 PSOutputDev::filterPSName(GooString*)@plt                   (Quality:       0       0       0       0       0       0)
0x000bb5e0 GfxDeviceNColorSpace::~GfxDeviceNColorSpace()@plt           (Quality:       0       0       0       0       0       0)
0x000bb5f0 XRef::setEncryption(int, bool, unsigned char*, int, int, int, CryptAlgorithm)@plt (Quality:       0       0       0       0       0       0)
0x000bb600 qsort@plt                                                   (Quality:       0       0       0       0       0       0)
0x000bb610 Linearization::getObjectNumberFirst()@plt                   (Quality:       0       0       0       0       0       0)
0x000bb620 FoFiTrueType::cvtEncoding(char**, void (*)(void*, char const*, int), void*)@plt (Quality:       0       0       0       0       0       0)
0x000bb630 FoFiTrueType::mapNameToGID(char*)@plt                       (Quality:       0       0       0       0       0       0)
0x000bb640 AnnotWidget::drawFormFieldChoice(GfxResources*, GooString*)@plt (Quality:       0       0       0       0       0       0)
0x000bb650 OptionalContentGroup::OptionalContentGroup(Dict*)@plt       (Quality:       0       0       0       0       0       0)
0x000bb660 MemStream::~MemStream()@plt                                 (Quality:       0       0       0       0       0       0)
0x000bb670 GfxFunctionShading::GfxFunctionShading(GfxFunctionShading*)@plt (Quality:       0       0       0       0       0       0)
0x000bb680 FileOutStream::FileOutStream(_IO_FILE*, long long)@plt      (Quality:       0       0       0       0       0       0)
0x000bb690 Annot::setRect(double, double, double, double)@plt          (Quality:       0       0       0       0       0       0)
0x000bb6a0 AnnotQuadrilaterals::getX1(int)@plt                         (Quality:       0       0       0       0       0       0)
0x000bb6b0 FormWidgetSignature::FormWidgetSignature(PDFDoc*, Object*, unsigned int, Ref, FormField*)@plt (Quality:       0       0       0       0       0       0)
0x000b51b0 MediaParameters::parseMediaScreenParameters(Object*)@plt    (Quality:       0       0       0       0       0       0)
0x000bb6d0 GooHash::lookupInt(GooString*)@plt                          (Quality:       0       0       0       9       9       9)
0x000bb6e0 GfxDeviceCMYKColorSpace::GfxDeviceCMYKColorSpace()@plt      (Quality:       0       0       0       0       0       0)
0x000bb6f0 CMap::getCID(char*, int, unsigned int*, int*)@plt           (Quality:       0       0       0       0       0       0)
0x000bb700 Annot::removeReferencedObjects()@plt                        (Quality:       0       0       0       0       0       0)
0x000bb710 localeconv@plt                                              (Quality:       0       0       0       0       0       0)
0x000bb720 Annot::getRotation() const@plt                              (Quality:       0       0       0       0       0       0)
0x000bb730 PDFDoc::writeObjectHeader(Ref*, OutStream*)@plt             (Quality:       0       0       0       0       0       0)
0x000bb740 CCITTFaxStream::getBlackCode()@plt                          (Quality:       0       0       0       0       0       0)
0x000bb750 void std::__adjust_heap<SplashIntersect*, long, SplashIntersect, __gnu_cxx::__ops::_Iter_comp_iter<cmpIntersectFunctor> >(SplashIntersect*, long, long, SplashIntersect, __gnu_cxx::__ops::_Iter_comp_iter<cmpIntersectFunctor>)@plt (Quality:       0       0       0       0       0       0)
0x000bb760 GooString::insert(int, GooString*)@plt                      (Quality:       0       0       0       0       0       0)
0x000bb770 SplashPattern::~SplashPattern()@plt                         (Quality:       0       0       0       0       0       0)
0x000bb780 LinkMovie::~LinkMovie()@plt                                 (Quality:       0       0       0       0       0       0)
0x000bb790 GfxColorTransform::doTransform(void*, void*, unsigned int)@plt (Quality:       0       0       0       0       0       0)
0x000bb7a0 AnnotColor::AnnotColor(double, double, double)@plt          (Quality:       0       0       0       0       0       0)
0x000bb7b0 fwrite@plt                                                  (Quality:       0       0       0  100000  100000  100000)
0x000bb7c0 FormFieldButton::setState(char*)@plt                        (Quality:       0       0       0       0       0       0)
0x000bb7d0 FoFiTrueType::parse()@plt                                   (Quality:       0       0       0       0       0       0)
0x000b51a0 std::__throw_bad_alloc()@plt                                (Quality:       0       0       0       0       0       0)
0x000bb7f0 void std::__adjust_heap<GfxFontCIDWidthExcepV*, long, GfxFontCIDWidthExcepV, __gnu_cxx::__ops::_Iter_comp_iter<cmpWidthExcepVFunctor> >(GfxFontCIDWidthExcepV*, long, long, GfxFontCIDWidthExcepV, __gnu_cxx::__ops::_Iter_comp_iter<cmpWidthExcepVFunctor>)@plt (Quality:       0       0       0       0       0       0)
0x000bb800 SplashPath::append(SplashPath*)@plt                         (Quality:       0       0       0       0       0       0)
0x000bb810 close@plt                                                   (Quality:       0       0       0       1       1       1)
0x000bb820 JArithmeticDecoderStats::copyFrom(JArithmeticDecoderStats*)@plt (Quality:       0       0       0       0       0       0)
0x000bb830 LinkUnknown::LinkUnknown(char*)@plt                         (Quality:       0       0       0       0       0       0)
0x000bb840 Splash::setLineJoin(int)@plt                                (Quality:       0       0       0       0       0       0)
0x000bb850 IdentityFunction::IdentityFunction()@plt                    (Quality:       0       0       0       0       0       0)
0x000bb860 FoFiType1C::readPrivateDict(int, int, Type1CPrivateDict*)@plt (Quality:       0       0       0       0       0       0)
0x000bb870 FcLangSetCreate@plt                                         (Quality:       0       0       0       0       0       0)
0x000bb880 SplashFontEngine::~SplashFontEngine()@plt                   (Quality:       0       0       0       0       0       0)
0x000bb890 StructElement::StructElement(int, StructTreeRoot*, StructElement*)@plt (Quality:       0       0       0       0       0       0)
0x000bb8a0 Splash::setFillPattern(SplashPattern*)@plt                  (Quality:       0       0       0       0       0       0)
0x000bb8b0 Gfx::doAxialShFill(GfxAxialShading*)@plt                    (Quality:       0       0       0       0       0       0)
0x000bb8c0 Annots::createAnnot(Dict*, Object*)@plt                     (Quality:       0       0       0       0       0       0)
0x000b5190 CMap::parse(CMapCache*, GooString*, Object*)@plt            (Quality:       0       0       0       0       0       0)
0x000bb8e0 CharCodeToUnicode::CharCodeToUnicode(GooString*)@plt        (Quality:       0       0       0       0       0       0)
0x000bb8f0 PDFDoc::replacePageDict(int, int, PDFRectangle*, PDFRectangle*)@plt (Quality:       0       0       0       0       0       0)
0x000bb900 GfxSubpath::offset(double, double)@plt                      (Quality:       0       0       0       0       0       0)
0x000bb910 PostScriptFunction::getToken(Stream*)@plt                   (Quality:       0       0       0       0       0       0)
0x000bb920 UnicodeMap::parse(GooString*)@plt                           (Quality:       0       0       0       0       0       0)
0x000bb930 OCDisplayNode::OCDisplayNode()@plt                          (Quality:       0       0       0       0       0       0)
0x000bb940 PostScriptFunction::exec(PSStack*, int)@plt                 (Quality:       0       0       0       0       0       0)
0x000b5180 AnnotLink::initialize(PDFDoc*, Dict*)@plt                   (Quality:       0       0       0       0       0       0)
0x000bb960 JArithmeticDecoder::cleanup()@plt                           (Quality:       0       0       0       0       0       0)
0x000bb970 AnnotInk::parseInkList(Array*)@plt                          (Quality:       0       0       0       0       0       0)
0x000bb980 ASCII85Stream::~ASCII85Stream()@plt                         (Quality:       0       0       0       0       0       0)
0x000bb990 gmtime_r@plt                                                (Quality:       0       0       0       0       0       0)
0x000bb9a0 Gfx::Gfx(PDFDoc*, OutputDev*, Dict*, PDFRectangle*, PDFRectangle*, bool (*)(void*), void*, XRef*)@plt (Quality:       0       0       0       0       0       0)
0x000bb9b0 AnnotMarkup::AnnotMarkup(PDFDoc*, PDFRectangle*)@plt        (Quality:       0       0       0       0       0       0)
0x000bb9c0 Array::remove(int)@plt                                      (Quality:       0       0       0       0       0       0)
0x000bb9d0 Catalog::getNames()@plt                                     (Quality:       0       0       0       0       0       0)
0x000bb9e0 TextBlock::TextBlock(TextPage*, int)@plt                    (Quality:       0       0       0       0       0       0)
0x000bb9f0 PDFDoc::writeXRefTableTrailer(long long, XRef*, bool, int, OutStream*, bool)@plt (Quality:       0       0       0       0       0       0)
0x000b5170 Sound::getStream()@plt                                      (Quality:       0       0       0       0       0       0)
0x000bba10 GfxResources::lookupXObject(char*, Object*)@plt             (Quality:       0       0       0       4       4       4)
0x000bba20 StructElement::parseChild(Object*, Object*, std::set<int, std::less<int>, std::allocator<int> >&)@plt (Quality:       0       0       0       0       0       0)
0x000bba30 GfxCalGrayColorSpace::getXYZ(GfxColor*, double*, double*, double*)@plt (Quality:       0       0       0       0       0       0)
0x000bba40 UnicodeMap::match(GooString*)@plt                           (Quality:       0       0       0       0       0       0)
0x000bba50 GfxFont::locateFont(XRef*, PSOutputDev*)@plt                (Quality:       0       0       0       9       9       9)
0x000bba60 Hints::readPageOffsetTable(Stream*)@plt                     (Quality:       0       0       0       0       0       0)
0x000bba70 GlobalParams::getMapUnknownCharNames()@plt                  (Quality:       0       0       0       0       0       0)
0x000bba80 OCGs::~OCGs()@plt                                           (Quality:       0       0       0       0       0       0)
0x000bba90 TextPage::getText(double, double, double, double)@plt       (Quality:       0       0       0       0       0       0)
0x000bbaa0 TextWord::getCharBBox(int, double*, double*, double*, double*)@plt (Quality:       0       0       0       0       0       0)
0x000bbab0 PDFDoc::markAcroForm(Object*, XRef*, XRef*, unsigned int, int, int)@plt (Quality:       0       0       0       0       0       0)
0x000bbac0 GfxPath::curveTo(double, double, double, double, double, double)@plt (Quality:       0       0       0       0       0       0)
0x000bbad0 SplashFTFontEngine::loadOpenTypeT1CFont(SplashFontFileID*, SplashFontSrc*, char const**)@plt (Quality:       0       0       0       0       0       0)
0x000bbae0 TextPage::findText(unsigned int*, int, bool, bool, bool, bool, bool, bool, bool, double*, double*, double*, double*)@plt (Quality:       0       0       0       0       0       0)
0x000bbaf0 PDFDoc::saveCompleteRewrite(OutStream*)@plt                 (Quality:       0       0       0       0       0       0)
0x000bbb00 PSOutputDev::writePS(char const*)@plt                       (Quality:       0       0       0  100000  100000  100000)
0x000bbb10 TextLineFrag::computeCoords(bool)@plt                       (Quality:       0       0       0       0       0       0)
0x000bbb20 Page::getLinks()@plt                                        (Quality:       0       0       0       0       0       0)
0x000bbb30 SplashSolidColor::SplashSolidColor(unsigned char*)@plt      (Quality:       0       0       0       0       0       0)
0x000bbb40 CachedFile::tell()@plt                                      (Quality:       0       0       0       0       0       0)
0x000bbb50 Object::arrayGetLength() [clone .isra.15]                   (Quality:       0       0       0       0       0       0)
0x000bbb80 Object::getBool() [clone .isra.23]                          (Quality:       0       0       0       0       0       0)
0x000bbba8 Object::getInt() [clone .isra.24]                           (Quality:       0       0       0       4       4       4)
0x000bbbd4 Object::getName() [clone .isra.27]                          (Quality:       0       0       0       0       0       0)
0x000bbc00 Object::streamGetDict() [clone .isra.43]                    (Quality:       0       0       0       0       0       0)
0x000bbc38 Object::arrayGet(int, Object*, int) [clone .isra.35] [clone .constprop.185] (Quality:       0       0       0       0       0       0)
0x000bbc72 void std::__insertion_sort<GfxFontCIDWidthExcep*, __gnu_cxx::__ops::_Iter_comp_iter<cmpWidthExcepFunctor> >(GfxFontCIDWidthExcep*, GfxFontCIDWidthExcep*, __gnu_cxx::__ops::_Iter_comp_iter<cmpWidthExcepFunctor>) [clone .isra.64] (Quality:       0       0       0       0       0       0)
0x000bbd04 Object::getInt() [clone .isra.13]                           (Quality:       0       0       0       6       6       6)
0x000bbd30 Object::getInt() [clone .isra.12]                           (Quality:       0       0       0       0       0       0)
0x000bbd60 _GLOBAL__sub_I_StructElement.cc                             (Quality:       0       0       0       1       1       1)
0x000bbfe0 deregister_tm_clones                                        (Quality:       0       0       0       1       1       1)
0x000bc020 register_tm_clones                                          (Quality:       0       0       0       1       1       1)
0x000bc070 __do_global_dtors_aux                                       (Quality:       0       0       0       1       1       1)
0x000bc0b0 frame_dummy                                                 (Quality:       0       0       0       1       1       1)
0x000bc0e0 SplashAxialPattern::getParameter(double, double, double*)   (Quality:       0       0       0       0       0       0)
0x000bc190 splashOutBlendMultiply(unsigned char*, unsigned char*, unsigned char*, SplashColorMode) (Quality:       0       0       0       0       0       0)
0x000bc1e0 splashOutBlendScreen(unsigned char*, unsigned char*, unsigned char*, SplashColorMode) (Quality:       0       0       0       0       0       0)
0x000bc240 splashOutBlendOverlay(unsigned char*, unsigned char*, unsigned char*, SplashColorMode) (Quality:       0       0       0       0       0       0)
0x000bc2e0 splashOutBlendDarken(unsigned char*, unsigned char*, unsigned char*, SplashColorMode) (Quality:       0       0       0       0       0       0)
0x000bc320 splashOutBlendLighten(unsigned char*, unsigned char*, unsigned char*, SplashColorMode) (Quality:       0       0       0       0       0       0)
0x000bc360 splashOutBlendColorDodge(unsigned char*, unsigned char*, unsigned char*, SplashColorMode) (Quality:       0       0       0       0       0       0)
0x000bc3e0 splashOutBlendColorBurn(unsigned char*, unsigned char*, unsigned char*, SplashColorMode) (Quality:       0       0       0       0       0       0)
0x000bc460 splashOutBlendHardLight(unsigned char*, unsigned char*, unsigned char*, SplashColorMode) (Quality:       0       0       0       0       0       0)
0x000bc500 splashOutBlendDifference(unsigned char*, unsigned char*, unsigned char*, SplashColorMode) (Quality:       0       0       0       0       0       0)
0x000bc560 splashOutBlendExclusion(unsigned char*, unsigned char*, unsigned char*, SplashColorMode) (Quality:       0       0       0       0       0       0)
0x000bc5c0 setLum(unsigned char, unsigned char, unsigned char, int, unsigned char*, unsigned char*, unsigned char*) (Quality:       0       0       0       0       0       0)
0x000bc730 SplashOutputDev::updateFlatness(GfxState*)                  (Quality:       0       0       0       0       0       0)
0x000bc740 SplashOutputDev::updateStrokeAdjust(GfxState*)              (Quality:       0       0       0       0       0       0)
0x000bc750 SplashOutputDev::updateFillColorSpace(GfxState*)            (Quality:       0       0       0       0       0       0)
0x000bc760 SplashOutputDev::updateStrokeColorSpace(GfxState*)          (Quality:       0       0       0       0       0       0)
0x000bc770 SplashOutputDev::updateFont(GfxState*)                      (Quality:       0       0       0       0       0       0)
0x000bc780 SplashOutputDev::type3D0(GfxState*, double, double)         (Quality:       0       0       0       0       0       0)
0x000bc790 SplashOutputDev::beginTextObject(GfxState*)                 (Quality:       0       0       0       0       0       0)
0x000bc7a0 SplashOutputDev::getVectorAntialias()                       (Quality:       0       0       0       0       0       0)
0x000bc7b0 SplashOutputDev::setVectorAntialias(bool)                   (Quality:       0       0       0       0       0       0)
0x000bc7e0 SplashGouraudPattern::~SplashGouraudPattern()               (Quality:       0       0       0       0       0       0)
0x000bc800 SplashGouraudPattern::~SplashGouraudPattern()               (Quality:       0       0       0       0       0       0)
0x000bc820 SplashGouraudPattern::getParameterizedColor(double, SplashColorMode, unsigned char*) (Quality:       0       0       0       0       0       0)
0x000bc950 SplashUnivariatePattern::testPosition(int, int)             (Quality:       0       0       0       0       0       0)
0x000bc9f0 splashOutBlendSoftLight(unsigned char*, unsigned char*, unsigned char*, SplashColorMode) (Quality:       0       0       0       0       0       0)
0x000bcba0 SplashRadialPattern::getParameter(double, double, double*)  (Quality:       0       0       0       0       0       0)
0x000bce00 SplashOutputDev::unsetSoftMaskFromImageMask(GfxState*, double*) (Quality:       0       0       0       0       0       0)
0x000bcf00 SplashOutputDev::updateCTM(GfxState*, double, double, double, double, double, double) (Quality:       0       0       0       0       0       0)
0x000bcf60 SplashOutputDev::updateLineCap(GfxState*)                   (Quality:       0       0       0       0       0       0)
0x000bcf80 SplashOutputDev::updateLineJoin(GfxState*)                  (Quality:       0       0       0       0       0       0)
0x000bcfa0 SplashOutputDev::updateLineDash(GfxState*)                  (Quality:       0       0       0       0       0       0)
0x000bd010 SplashOutputDev::updateMiterLimit(GfxState*)                (Quality:       0       0       0       0       0       0)
0x000bd030 SplashOutputDev::saveState(GfxState*)                       (Quality:       0       0       0       0       0       0)
0x000bd040 SplashOutputDev::restoreState(GfxState*)                    (Quality:       0       0       0       0       0       0)
0x000bd060 SplashOutputDev::updateLineWidth(GfxState*)                 (Quality:       0       0       0       0       0       0)
0x000bd080 SplashOutputDev::updateBlendMode(GfxState*)                 (Quality:       0       0       0       0       0       0)
0x000bd0a0 SplashOutputDev::updateFillOpacity(GfxState*)               (Quality:       0       0       0       0       0       0)
0x000bd0f0 SplashOutputDev::updateStrokeOpacity(GfxState*)             (Quality:       0       0       0       0       0       0)
0x000bd140 SplashOutputDev::updateFillOverprint(GfxState*)             (Quality:       0       0       0       0       0       0)
0x000bd160 SplashOutputDev::updateStrokeOverprint(GfxState*)           (Quality:       0       0       0       0       0       0)
0x000bd180 SplashOutputDev::updateOverprintMode(GfxState*)             (Quality:       0       0       0       0       0       0)
0x000bd1a0 SplashOutputDev::updateTransfer(GfxState*)                  (Quality:       0       0       0       0       0       0)
0x000bd4b0 SplashOutputDev::endTextObject(GfxState*)                   (Quality:       0       0       0       0       0       0)
0x000bd510 SplashOutputDev::type3D1(GfxState*, double, double, double, double, double, double) (Quality:       0       0       0       0       0       0)
0x000bdb00 SplashOutputDev::tilingBitmapSrc(void*, unsigned char*, unsigned char*) (Quality:       0       0       0       0       0       0)
0x000bde30 SplashOutputDev::clearSoftMask(GfxState*)                   (Quality:       0       0       0       0       0       0)
0x000bde40 SplashOutputDev::endTransparencyGroup(GfxState*)            (Quality:       0       0       0       0       0       0)
0x000bdee0 SplashOutputDev::beginTransparencyGroup(GfxState*, double*, GfxColorSpace*, bool, bool, bool) (Quality:       0       0       0       0       0       0)
0x000be610 SplashOutputDev::paintTransparencyGroup(GfxState*, double*) (Quality:       0       0       0       0       0       0)
0x000be7e0 SplashOutputDev::setSoftMask(GfxState*, double*, bool, Function*, GfxColor*) (Quality:       0       0       0       0       0       0)
0x000bec90 splashOutBlendHue(unsigned char*, unsigned char*, unsigned char*, SplashColorMode) (Quality:       0       0       0       0       0       0)
0x000bee50 splashOutBlendSaturation(unsigned char*, unsigned char*, unsigned char*, SplashColorMode) (Quality:       0       0       0       0       0       0)
0x000bf000 splashOutBlendColor(unsigned char*, unsigned char*, unsigned char*, SplashColorMode) (Quality:       0       0       0       0       0       0)
0x000bf0a0 splashOutBlendLuminosity(unsigned char*, unsigned char*, unsigned char*, SplashColorMode) (Quality:       0       0       0       0       0       0)
0x000bf140 SplashOutputDev::endPage()                                  (Quality:       0       0       0       0       0       0)
0x000bf170 SplashOutputDev::imageMaskSrc(void*, unsigned char*)        (Quality:       0       0       0       0       0       0)
0x000bf1e0 SplashOutputDev::alphaImageSrc(void*, unsigned char*, unsigned char*) (Quality:       0       0       0       0       0       0)
0x000bf490 SplashOutputDev::checkTransparencyGroup(GfxState*, bool)    (Quality:       0       0       0       0       0       0)
0x000bf520 SplashOutputDev::maskedImageSrc(void*, unsigned char*, unsigned char*) (Quality:       0       0       0       0       0       0)
0x000bf7d0 SplashOutputDev::setSoftMaskFromImageMask(GfxState*, Object*, Stream*, int, int, bool, bool, double*) (Quality:       0       0       0       0       0       0)
0x000bfac0 SplashOutputDev::updateAll(GfxState*)                       (Quality:       0       0       0       0       0       0)
0x000bfc90 SplashOutputDev::tilingPatternFill(GfxState*, Gfx*, Catalog*, Object*, double*, int, int, Dict*, double*, double*, int, int, int, int, double, double) (Quality:       0       0       0       0       0       0)
0x000c0b70 SplashUnivariatePattern::getColor(int, int, unsigned char*) (Quality:       0       0       0       0       0       0)
0x000c0cd0 SplashOutputDev::imageSrc(void*, unsigned char*, unsigned char*) (Quality:       0       0       0       0       0       0)
0x000c1070 SplashGouraudPattern::SplashGouraudPattern(bool, GfxState*, GfxGouraudTriangleShading*, SplashColorMode) (Quality:       0       0       0       0       0       0)
0x000c1120 SplashOutputDev::gouraudTriangleShadedFill(GfxState*, GfxGouraudTriangleShading*) (Quality:       0       0       0       0       0       0)
0x000c1280 SplashUnivariatePattern::SplashUnivariatePattern(SplashColorMode, GfxState*, GfxUnivariateShading*) (Quality:       0       0       0       0       0       0)
0x000c1380 SplashUnivariatePattern::~SplashUnivariatePattern()         (Quality:       0       0       0       0       0       0)
0x000c13a0 SplashRadialPattern::~SplashRadialPattern()                 (Quality:       0       0       0       0       0       0)
0x000c13c0 SplashRadialPattern::~SplashRadialPattern()                 (Quality:       0       0       0       0       0       0)
0x000c13e0 SplashAxialPattern::~SplashAxialPattern()                   (Quality:       0       0       0       0       0       0)
0x000c1400 SplashAxialPattern::~SplashAxialPattern()                   (Quality:       0       0       0       0       0       0)
0x000c1420 SplashUnivariatePattern::~SplashUnivariatePattern()         (Quality:       0       0       0       0       0       0)
0x000c1440 SplashRadialPattern::SplashRadialPattern(SplashColorMode, GfxState*, GfxRadialShading*) (Quality:       0       0       0       0       0       0)
0x000c1580 SplashAxialPattern::SplashAxialPattern(SplashColorMode, GfxState*, GfxAxialShading*) (Quality:       0       0       0       0       0       0)
0x000c1680 T3FontCache::T3FontCache(Ref*, double, double, double, double, int, int, int, int, bool, bool) (Quality:       0       0       0       0       0       0)
0x000c1840 T3FontCache::~T3FontCache()                                 (Quality:       0       0       0       0       0       0)
0x000c1860 SplashOutputDev::~SplashOutputDev()                         (Quality:       0       0       0       0       0       0)
0x000c1940 SplashOutputDev::~SplashOutputDev()                         (Quality:       0       0       0       0       0       0)
0x000c1960 SplashOutputDev::setupScreenParams(double, double)          (Quality:       0       0       0       0       0       0)
0x000c1aa0 SplashOutputDev::SplashOutputDev(SplashColorMode, int, bool, unsigned char*, bool, SplashThinLineMode, bool) (Quality:       0       0       0       0       0       0)
0x000c1ce0 SplashOutputDev::startPage(int, GfxState*, XRef*)           (Quality:       0       0       0       0       0       0)
0x000c2050 SplashOutputDev::startDoc(PDFDoc*)                          (Quality:       0       0       0       0       0       0)
0x000c2140 SplashOutputDev::getColor(int)                              (Quality:       0       0       0       0       0       0)
0x000c2190 SplashOutputDev::getColor(GfxRGB*)                          (Quality:       0       0       0       0       0       0)
0x000c2230 SplashOutputDev::updateFillColor(GfxState*)                 (Quality:       0       0       0       0       0       0)
0x000c22c0 SplashOutputDev::updateStrokeColor(GfxState*)               (Quality:       0       0       0       0       0       0)
0x000c2360 SplashOutputDev::setOverprintMask(GfxColorSpace*, bool, int, GfxColor*, bool) (Quality:       0       0       0       0       0       0)
0x000c2370 SplashOutputDev::drawImageMask(GfxState*, Object*, Stream*, int, int, bool, bool, bool) (Quality:       0       0       0       0       0       0)
0x000c2570 SplashOutputDev::drawImage(GfxState*, Object*, Stream*, int, int, GfxImageColorMap*, bool, int*, bool) (Quality:       0       0       0       0       0       0)
0x000c2a70 SplashOutputDev::drawMaskedImage(GfxState*, Object*, Stream*, int, int, GfxImageColorMap*, bool, Stream*, int, int, bool, bool) (Quality:       0       0       0       0       0       0)
0x000c3330 SplashOutputDev::drawSoftMaskedImage(GfxState*, Object*, Stream*, int, int, GfxImageColorMap*, bool, Stream*, int, int, GfxImageColorMap*, bool) (Quality:       0       0       0       0       0       0)
0x000c39d0 SplashOutputDev::doUpdateFont(GfxState*)                    (Quality:       0       0       0       0       0       0)
0x000c41d0 SplashOutputDev::drawChar(GfxState*, double, double, double, double, double, double, unsigned int, int, unsigned int*, int) (Quality:       0       0       0       0       0       0)
0x000c4720 SplashOutputDev::convertPath(GfxState*, GfxPath*, bool)     (Quality:       0       0       0       0       0       0)
0x000c4870 SplashOutputDev::stroke(GfxState*)                          (Quality:       0       0       0       0       0       0)
0x000c4920 SplashOutputDev::fill(GfxState*)                            (Quality:       0       0       0       0       0       0)
0x000c49d0 SplashOutputDev::eoFill(GfxState*)                          (Quality:       0       0       0       0       0       0)
0x000c4a80 SplashOutputDev::clip(GfxState*)                            (Quality:       0       0       0       0       0       0)
0x000c4ae0 SplashOutputDev::eoClip(GfxState*)                          (Quality:       0       0       0       0       0       0)
0x000c4b40 SplashOutputDev::clipToStrokePath(GfxState*)                (Quality:       0       0       0       0       0       0)
0x000c4bd0 SplashOutputDev::drawType3Glyph(GfxState*, T3FontCache*, T3FontCacheTag*, unsigned char*) (Quality:       0       0       0       0       0       0)
0x000c4c60 SplashOutputDev::beginType3Char(GfxState*, double, double, double, double, unsigned int, unsigned int*, int) (Quality:       0       0       0       0       0       0)
0x000c5410 SplashOutputDev::endType3Char(GfxState*)                    (Quality:       0       0       0       0       0       0)
0x000c5530 SplashOutputDev::setPaperColor(unsigned char*)              (Quality:       0       0       0       0       0       0)
0x000c5550 SplashOutputDev::getBitmapWidth()                           (Quality:       0       0       0       0       0       0)
0x000c5560 SplashOutputDev::getBitmapHeight()                          (Quality:       0       0       0       0       0       0)
0x000c5570 SplashOutputDev::takeBitmap()                               (Quality:       0       0       0       0       0       0)
0x000c55d0 SplashOutputDev::getModRegion(int*, int*, int*, int*)       (Quality:       0       0       0       0       0       0)
0x000c5600 SplashOutputDev::clearModRegion()                           (Quality:       0       0       0       0       0       0)
0x000c5610 SplashOutputDev::setFreeTypeHinting(bool, bool)             (Quality:       0       0       0       0       0       0)
0x000c5620 SplashOutputDev::univariateShadedFill(GfxState*, SplashUnivariatePattern*, double, double) (Quality:       0       0       0       0       0       0)
0x000c5b30 SplashOutputDev::axialShadedFill(GfxState*, GfxAxialShading*, double, double) (Quality:       0       0       0       0       0       0)
0x000c5bd0 SplashOutputDev::radialShadedFill(GfxState*, GfxRadialShading*, double, double) (Quality:       0       0       0       0       0       0)
0x000c5c70 GfxColorSpace::isNonMarking()                               (Quality:       0       0       0       0       0       0)
0x000c5c80 GfxFont::isCIDFont()                                        (Quality:       0       0       0       0       0       0)
0x000c5c90 SplashFont::getGlyphAdvance(int)                            (Quality:       0       0       0       0       0       0)
0x000c5ca0 OutputDev::useFillColorStop()                               (Quality:       0       0       0       0       0       0)
0x000c5cb0 OutputDev::useDrawForm()                                    (Quality:       0       0       0       0       0       0)
0x000c5cc0 OutputDev::needNonText()                                    (Quality:       0       0       0       4       4       4)
0x000c5cd0 OutputDev::needCharCount()                                  (Quality:       0       0       0       0       0       0)
0x000c5ce0 OutputDev::needClipToCropBox()                              (Quality:       0       0       0       0       0       0)
0x000c5cf0 OutputDev::checkPageSlice(Page*, double, double, int, bool, bool, int, int, int, int, bool, bool (*)(void*), void*, bool (*)(Annot*, void*), void*) (Quality:       0       0       0       0       0       0)
0x000c5d00 OutputDev::dump()                                           (Quality:       0       0       0       0       0       0)
0x000c5d10 OutputDev::updateAlphaIsShape(GfxState*)                    (Quality:       0       0       0       0       0       0)
0x000c5d20 OutputDev::updateTextKnockout(GfxState*)                    (Quality:       0       0       0       0       0       0)
0x000c5d30 OutputDev::updateFillColorStop(GfxState*, double)           (Quality:       0       0       0       0       0       0)
0x000c5d40 OutputDev::updateTextMat(GfxState*)                         (Quality:       0       0       0       0       0       0)
0x000c5d50 OutputDev::updateCharSpace(GfxState*)                       (Quality:       0       0       0       0       0       0)
0x000c5d60 OutputDev::updateRender(GfxState*)                          (Quality:       0       0       0       0       0       0)
0x000c5d70 OutputDev::updateRise(GfxState*)                            (Quality:       0       0       0       0       0       0)
0x000c5d80 OutputDev::updateWordSpace(GfxState*)                       (Quality:       0       0       0       0       0       0)
0x000c5d90 OutputDev::updateHorizScaling(GfxState*)                    (Quality:       0       0       0       0       0       0)
0x000c5da0 OutputDev::updateTextPos(GfxState*)                         (Quality:       0       0       0       0       0       0)
0x000c5db0 OutputDev::updateTextShift(GfxState*, double)               (Quality:       0       0       0       0       0       0)
0x000c5dc0 OutputDev::saveTextPos(GfxState*)                           (Quality:       0       0       0       0       0       0)
0x000c5dd0 OutputDev::restoreTextPos(GfxState*)                        (Quality:       0       0       0       0       0       0)
0x000c5de0 OutputDev::functionShadedFill(GfxState*, GfxFunctionShading*) (Quality:       0       0       0       0       0       0)
0x000c5df0 OutputDev::axialShadedSupportExtend(GfxState*, GfxAxialShading*) (Quality:       0       0       0       0       0       0)
0x000c5e00 OutputDev::radialShadedSupportExtend(GfxState*, GfxRadialShading*) (Quality:       0       0       0       0       0       0)
0x000c5e10 OutputDev::patchMeshShadedFill(GfxState*, GfxPatchMeshShading*) (Quality:       0       0       0       0       0       0)
0x000c5e20 OutputDev::beginStringOp(GfxState*)                         (Quality:       0       0       0       0       0       0)
0x000c5e30 OutputDev::endStringOp(GfxState*)                           (Quality:       0       0       0       0       0       0)
0x000c5e40 OutputDev::beginString(GfxState*, GooString*)               (Quality:       0       0       0       0       0       0)
0x000c5e50 OutputDev::endString(GfxState*)                             (Quality:       0       0       0       0       0       0)
0x000c5e60 OutputDev::drawString(GfxState*, GooString*)                (Quality:       0       0       0       0       0       0)
0x000c5e70 OutputDev::incCharCount(int)                                (Quality:       0       0       0       0       0       0)
0x000c5e80 OutputDev::beginActualText(GfxState*, GooString*)           (Quality:       0       0       0       0       0       0)
0x000c5e90 OutputDev::endActualText(GfxState*)                         (Quality:       0       0       0       0       0       0)
0x000c5ea0 OutputDev::drawForm(Ref)                                    (Quality:       0       0       0       0       0       0)
0x000c5eb0 OutputDev::psXObject(Stream*, Stream*)                      (Quality:       0       0       0       0       0       0)
0x000c5ec0 OutputDev::getProfileHash()                                 (Quality:       0       0       0       0       0       0)
0x000c5ed0 OutputDev::processLink(AnnotLink*)                          (Quality:       0       0       0       0       0       0)
0x000c5ee0 SplashUnivariatePattern::isStatic()                         (Quality:       0       0       0       0       0       0)
0x000c5ef0 SplashUnivariatePattern::getShading()                       (Quality:       0       0       0       0       0       0)
0x000c5f00 SplashUnivariatePattern::isCMYK()                           (Quality:       0       0       0       0       0       0)
0x000c5f10 SplashGouraudPattern::getColor(int, int, unsigned char*)    (Quality:       0       0       0       0       0       0)
0x000c5f20 SplashGouraudPattern::testPosition(int, int)                (Quality:       0       0       0       0       0       0)
0x000c5f30 SplashGouraudPattern::isStatic()                            (Quality:       0       0       0       0       0       0)
0x000c5f40 SplashGouraudPattern::isCMYK()                              (Quality:       0       0       0       0       0       0)
0x000c5f50 SplashGouraudPattern::isParameterized()                     (Quality:       0       0       0       0       0       0)
0x000c5f60 SplashGouraudPattern::getNTriangles()                       (Quality:       0       0       0       0       0       0)
0x000c5f70 SplashOutputDev::useTilingPatternFill()                     (Quality:       0       0       0       0       0       0)
0x000c5f80 SplashOutputDev::useShadedFills(int)                        (Quality:       0       0       0       0       0       0)
0x000c5f90 SplashOutputDev::upsideDown()                               (Quality:       0       0       0       0       0       0)
0x000c5fa0 SplashOutputDev::useDrawChar()                              (Quality:       0       0       0       0       0       0)
0x000c5fb0 SplashOutputDev::interpretType3Chars()                      (Quality:       0       0       0       0       0       0)
0x000c5fc0 SplashOutFontFileID::matches(SplashFontFileID*)             (Quality:       0       0       0       0       0       0)
0x000c5fd0 SplashOutFontFileID::~SplashOutFontFileID()                 (Quality:       0       0       0       0       0       0)
0x000c5ff0 SplashOutFontFileID::~SplashOutFontFileID()                 (Quality:       0       0       0       0       0       0)
0x000c6010 SplashGouraudPattern::getTriangle(int, double*, double*, double*, double*, double*, double*, double*, double*, double*) (Quality:       0       0       0       0       0       0)
0x000c6020 SplashGouraudPattern::copy()                                (Quality:       0       0       0       0       0       0)
0x000c6060 SplashRadialPattern::copy()                                 (Quality:       0       0       0       0       0       0)
0x000c60a0 SplashAxialPattern::copy()                                  (Quality:       0       0       0       0       0       0)
0x000c60e0 str_init_source(jpeg_decompress_struct*)                    (Quality:       0       0       0       0       0       0)
0x000c60f0 str_fill_input_buffer(jpeg_decompress_struct*)              (Quality:       0       0       0       0       0       0)
0x000c6160 str_skip_input_data(jpeg_decompress_struct*, long)          (Quality:       0       0       0       0       0       0)
0x000c61b0 str_term_source(jpeg_decompress_struct*)                    (Quality:       0       0       0       0       0       0)
0x000c61c0 DCTStream::isBinary(bool)                                   (Quality:       0       0       0       1       1       1)
0x000c61e0 DCTStream::lookChar()                                       (Quality:       0       0       0       0       0       0)
0x000c6200 DCTStream::~DCTStream()                                     (Quality:       0       0       0       3       3       3)
0x000c6240 DCTStream::~DCTStream()                                     (Quality:       0       0       0       3       3       3)
0x000c6260 exitErrorHandler(jpeg_common_struct*)                       (Quality:       0       0       0       0       0       0)
0x000c62a0 DCTStream::getChar()                                        (Quality:       0       0       0       0       0       0)
0x000c6360 DCTStream::getChars(int, unsigned char*)                    (Quality:       0       0       0       0       0       0)
0x000c64a0 DCTStream::getPSFilter(int, char const*)                    (Quality:       0       0       0       1       1       1)
0x000c6500 DCTStream::init()                                           (Quality:       0       0       0       3       3       3)
0x000c6610 DCTStream::DCTStream(Stream*, int, Object*, int)            (Quality:       0       0       0       3       3       3)
0x000c6760 DCTStream::reset()                                          (Quality:       0       0       0       0       0       0)
0x000c6990 Stream::isEncoder()                                         (Quality:       0       0       0       2       2       2)
0x000c69a0 Stream::getImageParams(int*, StreamColorSpaceMode*)         (Quality:       0       0       0       0       0       0)
0x000c69b0 FilterStream::getPos()                                      (Quality:       0       0       0       0       0       0)
0x000c69c0 FilterStream::getNextStream()                               (Quality:       0       0       0       0       0       0)
0x000c69d0 FilterStream::unfilteredReset()                             (Quality:       0       0       0       0       0       0)
0x000c69e0 DCTStream::getKind()                                        (Quality:       0       0       0       0       0       0)
0x000c69f0 DCTStream::hasGetChars()                                    (Quality:       0       0       0       0       0       0)
0x000c6a00 FilterStream::getUnfilteredChar()                           (Quality:       0       0       0       0       0       0)
0x000c6ab0 FilterStream::getBaseStream()                               (Quality:       0       0       0       0       0       0)
0x000c6b80 FilterStream::getUndecodedStream()                          (Quality:       0       0       0       2       2       2)
0x000c6c50 FilterStream::getDict()                                     (Quality:       0       0       0      12      12      12)
0x000c6d20 JPXStream::reset()                                          (Quality:       0       0       0       0       0       0)
0x000c6d40 JPXStream::getPos()                                         (Quality:       0       0       0       0       0       0)
0x000c6d60 JPXStream::getPSFilter(int, char const*)                    (Quality:       0       0       0       0       0       0)
0x000c6d70 JPXStream::isBinary(bool)                                   (Quality:       0       0       0       0       0       0)
0x000c6d90 JPXStream::close()                                          (Quality:       0       0       0       0       0       0)
0x000c6de0 JPXStream::~JPXStream()                                     (Quality:       0       0       0       0       0       0)
0x000c6e20 JPXStream::~JPXStream()                                     (Quality:       0       0       0       0       0       0)
0x000c6e40 libopenjpeg_warning_callback(char const*, void*)            (Quality:       0       0       0       0       0       0)
0x000c6e60 libopenjpeg_error_callback(char const*, void*)              (Quality:       0       0       0       0       0       0)
0x000c6e80 JPXStream::JPXStream(Stream*)                               (Quality:       0       0       0       0       0       0)
0x000c6ed0 JPXStreamPrivate::init2(unsigned char*, int, CODEC_FORMAT)  (Quality:       0       0       0       0       0       0)
0x000c7020 JPXStream::init()                                           (Quality:       0       0       0       0       0       0)
0x000c74a0 JPXStream::getChars(int, unsigned char*)                    (Quality:       0       0       0       0       0       0)
0x000c7590 JPXStream::getChar()                                        (Quality:       0       0       0       0       0       0)
0x000c7610 JPXStream::lookChar()                                       (Quality:       0       0       0       0       0       0)
0x000c7660 JPXStream::getImageParams(int*, StreamColorSpaceMode*)      (Quality:       0       0       0       0       0       0)
0x000c76e0 JPXStream::getKind()                                        (Quality:       0       0       0       0       0       0)
0x000c76f0 JPXStream::hasGetChars()                                    (Quality:       0       0       0       0       0       0)
0x000c7700 createAnnotDrawFont(XRef*, Object*)                         (Quality:       0       0       0       0       0       0)
0x000c78f0 Annot::getAppearanceResDict(Object*)                        (Quality:       0       0       0       0       0       0)
0x000c79b0 getAdditionalAction(Annot::AdditionalActionsType, Object*, PDFDoc*) (Quality:       0       0       0       0       0       0)
0x000c7b40 AnnotBorderArray::writeToObject(XRef*, Object*) const       (Quality:       0       0       0       0       0       0)
0x000c7cd0 parseAnnotLineEndingStyle(GooString*)                       (Quality:       0       0       0       0       0       0)
0x000c7de0 convertAnnotLineEndingStyle(AnnotLineEndingStyle)           (Quality:       0       0       0       0       0       0)
0x000c7ea0 parseDiffRectangle(Array*, PDFRectangle*)                   (Quality:       0       0       0       0       0       0)
0x000c8300 AnnotBorderEffect::AnnotBorderEffect(Dict*)                 (Quality:       0       0       0       0       0       0)
0x000c8450 AnnotPath::AnnotPath()                                      (Quality:       0       0       0       0       0       0)
0x000c8460 AnnotPath::AnnotPath(AnnotCoord**, int)                     (Quality:       0       0       0       0       0       0)
0x000c8470 AnnotPath::~AnnotPath()                                     (Quality:       0       0       0       0       0       0)
0x000c84c0 AnnotPath::getX(int) const                                  (Quality:       0       0       0       0       0       0)
0x000c84f0 AnnotPath::getY(int) const                                  (Quality:       0       0       0       0       0       0)
0x000c8520 AnnotPath::getCoord(int) const                              (Quality:       0       0       0       0       0       0)
0x000c8540 AnnotPath::parsePathArray(Array*)                           (Quality:       0       0       0       0       0       0)
0x000c8810 AnnotPath::AnnotPath(Array*)                                (Quality:       0       0       0       0       0       0)
0x000c8830 AnnotCalloutLine::AnnotCalloutLine(double, double, double, double) (Quality:       0       0       0       0       0       0)
0x000c8860 AnnotCalloutMultiLine::AnnotCalloutMultiLine(double, double, double, double, double, double) (Quality:       0       0       0       0       0       0)
0x000c88b0 AnnotQuadrilaterals::AnnotQuadrilaterals(AnnotQuadrilaterals::AnnotQuadrilateral**, int) (Quality:       0       0       0       0       0       0)
0x000c88c0 AnnotQuadrilaterals::~AnnotQuadrilaterals()                 (Quality:       0       0       0       0       0       0)
0x000c8910 AnnotQuadrilaterals::getX1(int)                             (Quality:       0       0       0       0       0       0)
0x000c8940 AnnotQuadrilaterals::getY1(int)                             (Quality:       0       0       0       0       0       0)
0x000c8970 AnnotQuadrilaterals::getX2(int)                             (Quality:       0       0       0       0       0       0)
0x000c89a0 AnnotQuadrilaterals::getY2(int)                             (Quality:       0       0       0       0       0       0)
0x000c89d0 AnnotQuadrilaterals::getX3(int)                             (Quality:       0       0       0       0       0       0)
0x000c8a00 AnnotQuadrilaterals::getY3(int)                             (Quality:       0       0       0       0       0       0)
0x000c8a30 AnnotQuadrilaterals::getX4(int)                             (Quality:       0       0       0       0       0       0)
0x000c8a60 AnnotQuadrilaterals::getY4(int)                             (Quality:       0       0       0       0       0       0)
0x000c8a90 AnnotQuadrilaterals::AnnotQuadrilateral::AnnotQuadrilateral(double, double, double, double, double, double, double, double) (Quality:       0       0       0       0       0       0)
0x000c8ac0 AnnotQuadrilaterals::AnnotQuadrilaterals(Array*, PDFRectangle*) (Quality:       0       0       0       0       0       0)
0x000c8cf0 AnnotBorder::AnnotBorder()                                  (Quality:       0       0       0       0       0       0)
0x000c8d30 AnnotBorder::parseDashArray(Object*)                        (Quality:       0       0       0       0       0       0)
0x000c8f10 AnnotBorder::~AnnotBorder()                                 (Quality:       0       0       0       0       0       0)
0x000c8f40 AnnotBorder::~AnnotBorder()                                 (Quality:       0       0       0       0       0       0)
0x000c8f60 AnnotBorderArray::AnnotBorderArray()                        (Quality:       0       0       0       0       0       0)
0x000c8f90 AnnotBorderArray::AnnotBorderArray(Array*)                  (Quality:       0       0       0       0       0       0)
0x000c9200 AnnotBorderBS::AnnotBorderBS()                              (Quality:       0       0       0       0       0       0)
0x000c9220 AnnotBorderBS::AnnotBorderBS(Dict*)                         (Quality:       0       0       0       0       0       0)
0x000c9490 AnnotBorderBS::getStyleName() const                         (Quality:       0       0       0       0       0       0)
0x000c94e0 AnnotBorderBS::writeToObject(XRef*, Object*) const          (Quality:       0       0       0       0       0       0)
0x000c9680 AnnotColor::AnnotColor()                                    (Quality:       0       0       0       0       0       0)
0x000c9690 AnnotColor::AnnotColor(double)                              (Quality:       0       0       0       0       0       0)
0x000c96a0 AnnotColor::AnnotColor(double, double, double)              (Quality:       0       0       0       0       0       0)
0x000c96c0 AnnotColor::AnnotColor(double, double, double, double)      (Quality:       0       0       0       0       0       0)
0x000c96e0 AnnotColor::adjustColor(int)                                (Quality:       0       0       0       0       0       0)
0x000c9770 AnnotColor::AnnotColor(Array*, int)                         (Quality:       0       0       0       0       0       0)
0x000c98a0 AnnotColor::writeToObject(XRef*, Object*) const             (Quality:       0       0       0       0       0       0)
0x000c9970 AnnotIconFit::AnnotIconFit(Dict*)                           (Quality:       0       0       0       0       0       0)
0x000c9d30 AnnotAppearance::AnnotAppearance(PDFDoc*, Object*)          (Quality:       0       0       0       0       0       0)
0x000c9d80 AnnotAppearance::~AnnotAppearance()                         (Quality:       0       0       0       0       0       0)
0x000c9d90 Annot::~Annot()                                             (Quality:       0       0       0       0       0       0)
0x000c9ec0 Annot::~Annot()                                             (Quality:       0       0       0       0       0       0)
0x000c9ee0 AnnotPopup::~AnnotPopup()                                   (Quality:       0       0       0       0       0       0)
0x000c9f10 AnnotPopup::~AnnotPopup()                                   (Quality:       0       0       0       0       0       0)
0x000c9f30 AnnotMarkup::~AnnotMarkup()                                 (Quality:       0       0       0       0       0       0)
0x000c9ff0 AnnotMarkup::~AnnotMarkup()                                 (Quality:       0       0       0       0       0       0)
0x000ca010 AnnotText::~AnnotText()                                     (Quality:       0       0       0       0       0       0)
0x000ca060 AnnotText::~AnnotText()                                     (Quality:       0       0       0       0       0       0)
0x000ca080 AnnotFreeText::~AnnotFreeText()                             (Quality:       0       0       0       0       0       0)
0x000ca130 AnnotFreeText::~AnnotFreeText()                             (Quality:       0       0       0       0       0       0)
0x000ca150 AnnotLine::~AnnotLine()                                     (Quality:       0       0       0       0       0       0)
0x000ca1c0 AnnotLine::~AnnotLine()                                     (Quality:       0       0       0       0       0       0)
0x000ca1e0 AnnotTextMarkup::~AnnotTextMarkup()                         (Quality:       0       0       0       0       0       0)
0x000ca230 AnnotTextMarkup::~AnnotTextMarkup()                         (Quality:       0       0       0       0       0       0)
0x000ca250 AnnotStamp::~AnnotStamp()                                   (Quality:       0       0       0       0       0       0)
0x000ca2a0 AnnotStamp::~AnnotStamp()                                   (Quality:       0       0       0       0       0       0)
0x000ca2c0 AnnotGeometry::~AnnotGeometry()                             (Quality:       0       0       0       0       0       0)
0x000ca300 AnnotGeometry::~AnnotGeometry()                             (Quality:       0       0       0       0       0       0)
0x000ca320 AnnotPolygon::~AnnotPolygon()                               (Quality:       0       0       0       0       0       0)
0x000ca390 AnnotPolygon::~AnnotPolygon()                               (Quality:       0       0       0       0       0       0)
0x000ca3b0 AnnotCaret::~AnnotCaret()                                   (Quality:       0       0       0       0       0       0)
0x000ca3e0 AnnotCaret::~AnnotCaret()                                   (Quality:       0       0       0       0       0       0)
0x000ca400 AnnotFileAttachment::~AnnotFileAttachment()                 (Quality:       0       0       0       0       0       0)
0x000ca460 AnnotFileAttachment::~AnnotFileAttachment()                 (Quality:       0       0       0       0       0       0)
0x000ca480 AnnotSound::~AnnotSound()                                   (Quality:       0       0       0       0       0       0)
0x000ca4e0 AnnotSound::~AnnotSound()                                   (Quality:       0       0       0       0       0       0)
0x000ca500 AnnotLink::~AnnotLink()                                     (Quality:       0       0       0       0       0       0)
0x000ca560 AnnotLink::~AnnotLink()                                     (Quality:       0       0       0       0       0       0)
0x000ca580 AnnotMovie::~AnnotMovie()                                   (Quality:       0       0       0       0       0       0)
0x000ca5e0 AnnotMovie::~AnnotMovie()                                   (Quality:       0       0       0       0       0       0)
0x000ca600 Annot3D::~Annot3D()                                         (Quality:       0       0       0       0       0       0)
0x000ca630 Annot3D::~Annot3D()                                         (Quality:       0       0       0       0       0       0)
0x000ca650 AnnotAppearance::getAppearanceStream(AnnotAppearance::AnnotAppearanceType, char const*, Object*) (Quality:       0       0       0       0       0       0)
0x000ca7b0 AnnotAppearance::getStateKey(int)                           (Quality:       0       0       0       0       0       0)
0x000ca860 AnnotAppearance::getNumStates()                             (Quality:       0       0       0       0       0       0)
0x000ca8f0 AnnotAppearance::referencesStream(Object*, Ref)             (Quality:       0       0       0       0       0       0)
0x000ca9f0 AnnotAppearance::referencesStream(Ref)                      (Quality:       0       0       0       0       0       0)
0x000cab00 AnnotAppearance::removeStream(Ref)                          (Quality:       0       0       0       0       0       0)
0x000cabf0 AnnotAppearance::removeStateStreams(Object*)                (Quality:       0       0       0       0       0       0)
0x000cace0 AnnotAppearance::removeAllStreams()                         (Quality:       0       0       0       0       0       0)
0x000cadb0 AnnotAppearanceCharacs::AnnotAppearanceCharacs(Dict*)       (Quality:       0       0       0       0       0       0)
0x000cb150 AnnotAppearanceCharacs::~AnnotAppearanceCharacs()           (Quality:       0       0       0       0       0       0)
0x000cb1f0 AnnotWidget::~AnnotWidget()                                 (Quality:       0       0       0       0       0       0)
0x000cb270 AnnotWidget::~AnnotWidget()                                 (Quality:       0       0       0       0       0       0)
0x000cb290 AnnotScreen::~AnnotScreen()                                 (Quality:       0       0       0       0       0       0)
0x000cb320 AnnotScreen::~AnnotScreen()                                 (Quality:       0       0       0       0       0       0)
0x000cb340 AnnotAppearanceBBox::AnnotAppearanceBBox(PDFRectangle*)     (Quality:       0       0       0       0       0       0)
0x000cb390 AnnotAppearanceBBox::extendTo(double, double)               (Quality:       0       0       0       0       0       0)
0x000cb3e0 AnnotAppearanceBBox::getBBoxRect(double*) const             (Quality:       0       0       0       0       0       0)
0x000cb420 AnnotAppearanceBBox::getPageXMin() const                    (Quality:       0       0       0       0       0       0)
0x000cb430 AnnotAppearanceBBox::getPageYMin() const                    (Quality:       0       0       0       0       0       0)
0x000cb440 AnnotAppearanceBBox::getPageXMax() const                    (Quality:       0       0       0       0       0       0)
0x000cb450 AnnotAppearanceBBox::getPageYMax() const                    (Quality:       0       0       0       0       0       0)
0x000cb460 Annot::initialize(PDFDoc*, Dict*)                           (Quality:       0       0       0       0       0       0)
0x000cbde0 Annot::Annot(PDFDoc*, PDFRectangle*)                        (Quality:       0       0       0       0       0       0)
0x000cc000 Annot::Annot(PDFDoc*, Dict*)                                (Quality:       0       0       0       0       0       0)
0x000cc090 Annot::Annot(PDFDoc*, Dict*, Object*)                       (Quality:       0       0       0       0       0       0)
0x000cc140 Annot::getRect(double*, double*, double*, double*) const    (Quality:       0       0       0       0       0       0)
0x000cc170 Annot::inRect(double, double) const                         (Quality:       0       0       0       0       0       0)
0x000cc1b0 Annot::update(char const*, Object*)                         (Quality:       0       0       0       0       0       0)
0x000cc2d0 Annot::setContents(GooString*)                              (Quality:       0       0       0       0       0       0)
0x000cc3f0 Annot::setName(GooString*)                                  (Quality:       0       0       0       0       0       0)
0x000cc4c0 Annot::setModified(GooString*)                              (Quality:       0       0       0       0       0       0)
0x000cc590 Annot::setFlags(unsigned int)                               (Quality:       0       0       0       0       0       0)
0x000cc5f0 Annot::setPage(int, bool)                                   (Quality:       0       0       0       0       0       0)
0x000cc690 Annot::setAppearanceState(char const*)                      (Quality:       0       0       0       0       0       0)
0x000cc790 Annot::invalidateAppearance()                               (Quality:       0       0       0       0       0       0)
0x000cc900 Annot::setRect(double, double, double, double)              (Quality:       0       0       0       0       0       0)
0x000ccaa0 Annot::setRect(PDFRectangle*)                               (Quality:       0       0       0       0       0       0)
0x000ccac0 Annot::setBorder(AnnotBorder*)                              (Quality:       0       0       0       0       0       0)
0x000ccb80 Annot::setColor(AnnotColor*)                                (Quality:       0       0       0       0       0       0)
0x000ccc20 Annot::removeReferencedObjects()                            (Quality:       0       0       0       0       0       0)
0x000ccc30 AnnotMarkup::removeReferencedObjects()                      (Quality:       0       0       0       0       0       0)
0x000ccc90 AnnotFreeText::setContents(GooString*)                      (Quality:       0       0       0       0       0       0)
0x000cccb0 AnnotLine::setContents(GooString*)                          (Quality:       0       0       0       0       0       0)
0x000ccce0 Annot::getXMin()                                            (Quality:       0       0       0       0       0       0)
0x000cccf0 Annot::getYMin()                                            (Quality:       0       0       0       0       0       0)
0x000ccd00 Annot::getXMax()                                            (Quality:       0       0       0       0       0       0)
0x000ccd10 Annot::getYMax()                                            (Quality:       0       0       0       0       0       0)
0x000ccd20 Annot::readArrayNum(Object*, int, double*)                  (Quality:       0       0       0       0       0       0)
0x000cce30 Annot::incRefCnt()                                          (Quality:       0       0       0       0       0       0)
0x000cce60 Annot::decRefCnt()                                          (Quality:       0       0       0       0       0       0)
0x000cceb0 Annot::setColor(AnnotColor*, bool)                          (Quality:       0       0       0       0       0       0)
0x000ccf70 Annot::setLineStyleForBorder(AnnotBorder*)                  (Quality:       0       0       0       0       0       0)
0x000cd0e0 Annot::drawCircle(double, double, double, bool)             (Quality:       0       0       0       0       0       0)
0x000cd340 Annot::drawCircleTopLeft(double, double, double)            (Quality:       0       0       0       0       0       0)
0x000cd4c0 Annot::drawCircleBottomRight(double, double, double)        (Quality:       0       0       0       0       0       0)
0x000cd650 Annot::createForm(double*, bool, Object*, Object*)          (Quality:       0       0       0       0       0       0)
0x000cd9b0 Annot::createResourcesDict(char const*, Object*, char const*, double, char const*, Object*) (Quality:       0       0       0       0       0       0)
0x000cdbf0 Annot::isVisible(bool)                                      (Quality:       0       0       0       0       0       0)
0x000cdc50 Annot::getRotation() const                                  (Quality:       0       0       0       0       0       0)
0x000cdcd0 Annot::draw(Gfx*, bool)                                     (Quality:       0       0       0       0       0       0)
0x000cdd90 AnnotText::draw(Gfx*, bool)                                 (Quality:       0       0       0       0       0       0)
0x000ce2c0 AnnotLink::draw(Gfx*, bool)                                 (Quality:       0       0       0       0       0       0)
0x000ce380 AnnotTextMarkup::draw(Gfx*, bool)                           (Quality:       0       0       0       0       0       0)
0x000cef80 AnnotMovie::draw(Gfx*, bool)                                (Quality:       0       0       0       0       0       0)
0x000cf8d0 AnnotGeometry::draw(Gfx*, bool)                             (Quality:       0       0       0       0       0       0)
0x000cfe90 AnnotFileAttachment::draw(Gfx*, bool)                       (Quality:       0       0       0       0       0       0)
0x000d0220 AnnotSound::draw(Gfx*, bool)                                (Quality:       0       0       0       0       0       0)
0x000d0540 AnnotPolygon::draw(Gfx*, bool)                              (Quality:       0       0       0       0       0       0)
0x000d0aa0 AnnotInk::draw(Gfx*, bool)                                  (Quality:       0       0       0       0       0       0)
0x000d0f90 AnnotPopup::initialize(PDFDoc*, Dict*)                      (Quality:       0       0       0       0       0       0)
0x000d1050 AnnotPopup::AnnotPopup(PDFDoc*, PDFRectangle*)              (Quality:       0       0       0       0       0       0)
0x000d1110 AnnotPopup::AnnotPopup(PDFDoc*, Dict*, Object*)             (Quality:       0       0       0       0       0       0)
0x000d1160 AnnotPopup::setParent(Object*)                              (Quality:       0       0       0       0       0       0)
0x000d11a0 AnnotPopup::setParent(Annot*)                               (Quality:       0       0       0       0       0       0)
0x000d11e0 AnnotPopup::setOpen(bool)                                   (Quality:       0       0       0       0       0       0)
0x000d1220 AnnotMarkup::initialize(PDFDoc*, Dict*, Object*)            (Quality:       0       0       0       0       0       0)
0x000d16f0 AnnotMarkup::AnnotMarkup(PDFDoc*, PDFRectangle*)            (Quality:       0       0       0       0       0       0)
0x000d1760 AnnotMarkup::AnnotMarkup(PDFDoc*, Dict*, Object*)           (Quality:       0       0       0       0       0       0)
0x000d17b0 AnnotMarkup::setLabel(GooString*)                           (Quality:       0       0       0       0       0       0)
0x000d18c0 AnnotMarkup::setPopup(AnnotPopup*)                          (Quality:       0       0       0       0       0       0)
0x000d1970 AnnotMarkup::setOpacity(double)                             (Quality:       0       0       0       0       0       0)
0x000d19b0 AnnotMarkup::setDate(GooString*)                            (Quality:       0       0       0       0       0       0)
0x000d1a70 AnnotText::initialize(PDFDoc*, Dict*)                       (Quality:       0       0       0       0       0       0)
0x000d1df0 AnnotText::AnnotText(PDFDoc*, PDFRectangle*)                (Quality:       0       0       0       0       0       0)
0x000d1ea0 AnnotText::AnnotText(PDFDoc*, Dict*, Object*)               (Quality:       0       0       0       0       0       0)
0x000d1ee0 AnnotText::setOpen(bool)                                    (Quality:       0       0       0       0       0       0)
0x000d1f20 AnnotText::setIcon(GooString*)                              (Quality:       0       0       0       0       0       0)
0x000d2010 AnnotLink::initialize(PDFDoc*, Dict*)                       (Quality:       0       0       0       0       0       0)
0x000d22f0 AnnotLink::AnnotLink(PDFDoc*, PDFRectangle*)                (Quality:       0       0       0       0       0       0)
0x000d2390 AnnotLink::AnnotLink(PDFDoc*, Dict*, Object*)               (Quality:       0       0       0       0       0       0)
0x000d23d0 AnnotFreeText::initialize(PDFDoc*, Dict*)                   (Quality:       0       0       0       0       0       0)
0x000d2d50 AnnotFreeText::AnnotFreeText(PDFDoc*, PDFRectangle*, GooString*) (Quality:       0       0       0       0       0       0)
0x000d2e60 AnnotFreeText::AnnotFreeText(PDFDoc*, Dict*, Object*)       (Quality:       0       0       0       0       0       0)
0x000d2ea0 AnnotFreeText::setAppearanceString(GooString*)              (Quality:       0       0       0       0       0       0)
0x000d2f70 AnnotFreeText::setQuadding(AnnotFreeText::AnnotFreeTextQuadding) (Quality:       0       0       0       0       0       0)
0x000d2fb0 AnnotFreeText::setStyleString(GooString*)                   (Quality:       0       0       0       0       0       0)
0x000d30c0 AnnotFreeText::setCalloutLine(AnnotCalloutLine*)            (Quality:       0       0       0       0       0       0)
0x000d3380 AnnotFreeText::setIntent(AnnotFreeText::AnnotFreeTextIntent) (Quality:       0       0       0       0       0       0)
0x000d3400 AnnotFreeText::parseAppearanceString(GooString*, double&, AnnotColor*&) (Quality:       0       0       0       0       0       0)
0x000d3810 AnnotLine::initialize(PDFDoc*, Dict*)                       (Quality:       0       0       0       0       0       0)
0x000d4380 AnnotLine::AnnotLine(PDFDoc*, PDFRectangle*)                (Quality:       0       0       0       0       0       0)
0x000d4420 AnnotLine::AnnotLine(PDFDoc*, Dict*, Object*)               (Quality:       0       0       0       0       0       0)
0x000d4460 AnnotLine::setVertices(double, double, double, double)      (Quality:       0       0       0       0       0       0)
0x000d4620 AnnotLine::setStartEndStyle(AnnotLineEndingStyle, AnnotLineEndingStyle) (Quality:       0       0       0       0       0       0)
0x000d4730 AnnotLine::setInteriorColor(AnnotColor*)                    (Quality:       0       0       0       0       0       0)
0x000d47b0 AnnotLine::setLeaderLineLength(double)                      (Quality:       0       0       0       0       0       0)
0x000d47f0 AnnotLine::setLeaderLineExtension(double)                   (Quality:       0       0       0       0       0       0)
0x000d4860 AnnotLine::setCaption(bool)                                 (Quality:       0       0       0       0       0       0)
0x000d48b0 AnnotLine::setIntent(AnnotLine::AnnotLineIntent)            (Quality:       0       0       0       0       0       0)
0x000d4920 AnnotTextMarkup::initialize(PDFDoc*, Dict*)                 (Quality:       0       0       0       0       0       0)
0x000d4ad0 AnnotTextMarkup::AnnotTextMarkup(PDFDoc*, PDFRectangle*, Annot::AnnotSubtype) (Quality:       0       0       0       0       0       0)
0x000d4cd0 AnnotTextMarkup::AnnotTextMarkup(PDFDoc*, Dict*, Object*)   (Quality:       0       0       0       0       0       0)
0x000d4d10 AnnotTextMarkup::setType(Annot::AnnotSubtype)               (Quality:       0       0       0       0       0       0)
0x000d4e00 AnnotTextMarkup::setQuadrilaterals(AnnotQuadrilaterals*)    (Quality:       0       0       0       0       0       0)
0x000d50a0 AnnotWidget::initialize(PDFDoc*, Dict*)                     (Quality:       0       0       0       0       0       0)
0x000d5360 AnnotWidget::AnnotWidget(PDFDoc*, Dict*, Object*)           (Quality:       0       0       0       0       0       0)
0x000d53c0 AnnotWidget::AnnotWidget(PDFDoc*, Dict*, Object*, FormField*) (Quality:       0       0       0       0       0       0)
0x000d5430 AnnotWidget::getAdditionalAction(Annot::AdditionalActionsType) (Quality:       0       0       0       0       0       0)
0x000d5450 AnnotWidget::getFormAdditionalAction(Annot::FormAdditionalActionsType) (Quality:       0       0       0       0       0       0)
0x000d5580 Annot::layoutText(GooString*, GooString*, int*, GfxFont*, double*, double, int*, bool) (Quality:       0       0       0       0       0       0)
0x000d5d60 Annot::writeString(GooString*, GooString*)                  (Quality:       0       0       0       0       0       0)
0x000d5e20 AnnotFreeText::generateFreeTextAppearance()                 (Quality:       0       0       0       0       0       0)
0x000d6500 AnnotFreeText::draw(Gfx*, bool)                             (Quality:       0       0       0       0       0       0)
0x000d65d0 AnnotFreeText::getAppearanceResDict(Object*)                (Quality:       0       0       0       0       0       0)
0x000d6610 AnnotLine::generateLineAppearance()                         (Quality:       0       0       0       0       0       0)
0x000d7240 AnnotLine::draw(Gfx*, bool)                                 (Quality:       0       0       0       0       0       0)
0x000d7390 AnnotLine::getAppearanceResDict(Object*)                    (Quality:       0       0       0       0       0       0)
0x000d73d0 AnnotWidget::drawText(GooString*, GooString*, GfxResources*, bool, int, int, bool, bool, bool) (Quality:       0       0       0       0       0       0)
0x000d87d0 AnnotWidget::drawListBox(FormFieldChoice*, GooString*, GfxResources*, int) (Quality:       0       0       0       0       0       0)
0x000d9190 AnnotWidget::drawBorder()                                   (Quality:       0       0       0       0       0       0)
0x000d9b50 AnnotWidget::drawFormFieldButton(GfxResources*, GooString*) (Quality:       0       0       0       0       0       0)
0x000d9d70 AnnotWidget::drawFormFieldText(GfxResources*, GooString*)   (Quality:       0       0       0       0       0       0)
0x000d9df0 AnnotWidget::drawFormFieldChoice(GfxResources*, GooString*) (Quality:       0       0       0       0       0       0)
0x000d9e90 AnnotWidget::generateFieldAppearance()                      (Quality:       0       0       0       0       0       0)
0x000da320 AnnotWidget::draw(Gfx*, bool)                               (Quality:       0       0       0       0       0       0)
0x000da5f0 AnnotWidget::updateAppearanceStream()                       (Quality:       0       0       0       0       0       0)
0x000da780 AnnotMovie::initialize(PDFDoc*, Dict*)                      (Quality:       0       0       0       0       0       0)
0x000da950 AnnotMovie::AnnotMovie(PDFDoc*, PDFRectangle*, Movie*)      (Quality:       0       0       0       0       0       0)
0x000daa10 AnnotMovie::AnnotMovie(PDFDoc*, Dict*, Object*)             (Quality:       0       0       0       0       0       0)
0x000daa50 AnnotScreen::initialize(PDFDoc*, Dict*)                     (Quality:       0       0       0       0       0       0)
0x000dac50 AnnotScreen::AnnotScreen(PDFDoc*, PDFRectangle*)            (Quality:       0       0       0       0       0       0)
0x000dad10 AnnotScreen::AnnotScreen(PDFDoc*, Dict*, Object*)           (Quality:       0       0       0       0       0       0)
0x000dad60 AnnotScreen::getAdditionalAction(Annot::AdditionalActionsType) (Quality:       0       0       0       0       0       0)
0x000dad90 AnnotStamp::initialize(PDFDoc*, Dict*)                      (Quality:       0       0       0       0       0       0)
0x000dae50 AnnotStamp::AnnotStamp(PDFDoc*, PDFRectangle*)              (Quality:       0       0       0       0       0       0)
0x000daef0 AnnotStamp::AnnotStamp(PDFDoc*, Dict*, Object*)             (Quality:       0       0       0       0       0       0)
0x000daf30 AnnotStamp::setIcon(GooString*)                             (Quality:       0       0       0       0       0       0)
0x000dafe0 AnnotGeometry::initialize(PDFDoc*, Dict*)                   (Quality:       0       0       0       0       0       0)
0x000db2d0 AnnotGeometry::AnnotGeometry(PDFDoc*, PDFRectangle*, Annot::AnnotSubtype) (Quality:       0       0       0       0       0       0)
0x000db3b0 AnnotGeometry::AnnotGeometry(PDFDoc*, Dict*, Object*)       (Quality:       0       0       0       0       0       0)
0x000db3f0 AnnotGeometry::setType(Annot::AnnotSubtype)                 (Quality:       0       0       0       0       0       0)
0x000db4a0 AnnotGeometry::setInteriorColor(AnnotColor*)                (Quality:       0       0       0       0       0       0)
0x000db520 AnnotPolygon::initialize(PDFDoc*, Dict*)                    (Quality:       0       0       0       0       0       0)
0x000dba00 AnnotPolygon::AnnotPolygon(PDFDoc*, PDFRectangle*, Annot::AnnotSubtype) (Quality:       0       0       0       0       0       0)
0x000dbbc0 AnnotPolygon::AnnotPolygon(PDFDoc*, Dict*, Object*)         (Quality:       0       0       0       0       0       0)
0x000dbc00 AnnotPolygon::setType(Annot::AnnotSubtype)                  (Quality:       0       0       0       0       0       0)
0x000dbcb0 AnnotPolygon::setVertices(AnnotPath*)                       (Quality:       0       0       0       0       0       0)
0x000dbe00 AnnotPolygon::setStartEndStyle(AnnotLineEndingStyle, AnnotLineEndingStyle) (Quality:       0       0       0       0       0       0)
0x000dbf10 AnnotPolygon::setInteriorColor(AnnotColor*)                 (Quality:       0       0       0       0       0       0)
0x000dbf90 AnnotPolygon::setIntent(AnnotPolygon::AnnotPolygonIntent)   (Quality:       0       0       0       0       0       0)
0x000dc010 AnnotCaret::initialize(PDFDoc*, Dict*)                      (Quality:       0       0       0       0       0       0)
0x000dc160 AnnotCaret::AnnotCaret(PDFDoc*, PDFRectangle*)              (Quality:       0       0       0       0       0       0)
0x000dc200 AnnotCaret::AnnotCaret(PDFDoc*, Dict*, Object*)             (Quality:       0       0       0       0       0       0)
0x000dc240 AnnotCaret::setSymbol(AnnotCaret::AnnotCaretSymbol)         (Quality:       0       0       0       0       0       0)
0x000dc2b0 AnnotInk::writeInkList(AnnotPath**, int, Array*)            (Quality:       0       0       0       0       0       0)
0x000dc3e0 AnnotInk::parseInkList(Array*)                              (Quality:       0       0       0       0       0       0)
0x000dc4e0 AnnotInk::initialize(PDFDoc*, Dict*)                        (Quality:       0       0       0       0       0       0)
0x000dc650 AnnotInk::AnnotInk(PDFDoc*, PDFRectangle*)                  (Quality:       0       0       0       0       0       0)
0x000dc800 AnnotInk::AnnotInk(PDFDoc*, Dict*, Object*)                 (Quality:       0       0       0       0       0       0)
0x000dc840 AnnotInk::freeInkList()                                     (Quality:       0       0       0       0       0       0)
0x000dc8c0 AnnotInk::~AnnotInk()                                       (Quality:       0       0       0       0       0       0)
0x000dc8e0 AnnotInk::~AnnotInk()                                       (Quality:       0       0       0       0       0       0)
0x000dc900 AnnotInk::setInkList(AnnotPath**, int)                      (Quality:       0       0       0       0       0       0)
0x000dc9d0 AnnotFileAttachment::initialize(PDFDoc*, Dict*)             (Quality:       0       0       0       0       0       0)
0x000dcb10 AnnotFileAttachment::AnnotFileAttachment(PDFDoc*, PDFRectangle*, GooString*) (Quality:       0       0       0       0       0       0)
0x000dcc30 AnnotFileAttachment::AnnotFileAttachment(PDFDoc*, Dict*, Object*) (Quality:       0       0       0       0       0       0)
0x000dcc80 AnnotSound::initialize(PDFDoc*, Dict*)                      (Quality:       0       0       0       0       0       0)
0x000dcdb0 AnnotSound::AnnotSound(PDFDoc*, PDFRectangle*, Sound*)      (Quality:       0       0       0       0       0       0)
0x000dceb0 AnnotSound::AnnotSound(PDFDoc*, Dict*, Object*)             (Quality:       0       0       0       0       0       0)
0x000dcef0 Annot3D::Activation::Activation(Dict*)                      (Quality:       0       0       0       0       0       0)
0x000dd290 Annot3D::initialize(PDFDoc*, Dict*)                         (Quality:       0       0       0       0       0       0)
0x000dd340 Annot3D::Annot3D(PDFDoc*, PDFRectangle*)                    (Quality:       0       0       0       0       0       0)
0x000dd3e0 Annot3D::Annot3D(PDFDoc*, Dict*, Object*)                   (Quality:       0       0       0       0       0       0)
0x000dd420 Annots::appendAnnot(Annot*)                                 (Quality:       0       0       0       0       0       0)
0x000dd4a0 Annots::removeAnnot(Annot*)                                 (Quality:       0       0       0       0       0       0)
0x000dd500 Annots::createAnnot(Dict*, Object*)                         (Quality:       0       0       0       0       0       0)
0x000b5160 GooString::append(char const*, int)@plt                     (Quality:       0       0       0  100000  100000  100000)
0x000ddc90 Annots::findAnnot(Ref*)                                     (Quality:       0       0       0       0       0       0)
0x000b5150 SplashXPath::SplashXPath(SplashXPath*)@plt                  (Quality:       0       0       0       0       0       0)
0x000ddd30 MemStream::setNeedFree(bool)                                (Quality:       0       0       0       0       0       0)
0x000ddd40 AnnotCalloutLine::~AnnotCalloutLine()                       (Quality:       0       0       0       0       0       0)
0x000ddd50 AnnotBorder::setWidth(double)                               (Quality:       0       0       0       0       0       0)
0x000ddd60 AnnotBorder::getWidth() const                               (Quality:       0       0       0       0       0       0)
0x000ddd70 AnnotBorder::getDashLength() const                          (Quality:       0       0       0       0       0       0)
0x000ddd80 AnnotBorder::getDash() const                                (Quality:       0       0       0       0       0       0)
0x000ddd90 AnnotBorder::getStyle() const                               (Quality:       0       0       0       0       0       0)
0x000ddda0 AnnotBorderArray::getType() const                           (Quality:       0       0       0       0       0       0)
0x000dddb0 AnnotBorderBS::getType() const                              (Quality:       0       0       0       0       0       0)
0x000dddc0 AnnotCalloutMultiLine::~AnnotCalloutMultiLine()             (Quality:       0       0       0       0       0       0)
0x000dddd0 AnnotCalloutLine::~AnnotCalloutLine()                       (Quality:       0       0       0       0       0       0)
0x000ddde0 AnnotCalloutMultiLine::~AnnotCalloutMultiLine()             (Quality:       0       0       0       0       0       0)
0x000dddf0 AnnotBorderBS::~AnnotBorderBS()                             (Quality:       0       0       0       0       0       0)
0x000dde10 AnnotBorderBS::~AnnotBorderBS()                             (Quality:       0       0       0       0       0       0)
0x000dde30 AnnotBorderArray::~AnnotBorderArray()                       (Quality:       0       0       0       0       0       0)
0x000dde50 AnnotBorderArray::~AnnotBorderArray()                       (Quality:       0       0       0       0       0       0)
0x000b5140 Gfx::doTilingPatternFill(GfxTilingPattern*, bool, bool, bool)@plt (Quality:       0       0       0       0       0       0)
0x000b5130 GooString::GooString(char const*, int)@plt                  (Quality:       0       0       0  100000  100000  100000)
0x000b5120 DecryptStream::~DecryptStream()@plt                         (Quality:       0       0       0       0       0       0)
0x000b5110 Gfx8BitFont::getResources()@plt                             (Quality:       0       0       0       0       0       0)
0x000ddf80 Array::add(Object*)                                         (Quality:       0       0       0  100000  100000  100000)
0x000de010 Array::copy(XRef*, Object*)                                 (Quality:       0       0       0       0       0       0)
0x000de0e0 Array::remove(int)                                          (Quality:       0       0       0       0       0       0)
0x000de150 Array::get(int, Object*, int)                               (Quality:       0       0       0  100000  100000  100000)
0x000b50f0 XRef::init()@plt                                            (Quality:       0       0       0       1       1       1)
0x000de1d0 Array::getString(int, GooString*)                           (Quality:       0       0       0       0       0       0)
0x000de270 BuiltinFontWidths::~BuiltinFontWidths()                     (Quality:       0       0       0      14      14      14)
0x000de280 BuiltinFontWidths::hash(char const*)                        (Quality:       0       0       0    4173    4173    4173)
0x000de2b0 BuiltinFontWidths::BuiltinFontWidths(BuiltinFontWidth*, int) (Quality:       0       0       0      14      14      14)
0x000de340 BuiltinFontWidths::getWidth(char const*, unsigned short*)   (Quality:       0       0       0       0       0       0)
0x000de3a0 initBuiltinFontTables()                                     (Quality:       0       0       0       1       1       1)
0x000de5e0 freeBuiltinFontTables()                                     (Quality:       0       0       0       1       1       1)
0x000de630 CachedFile::~CachedFile()                                   (Quality:       0       0       0       0       0       0)
0x000de690 CachedFile::incRefCnt()                                     (Quality:       0       0       0       0       0       0)
0x000de6a0 CachedFile::decRefCnt()                                     (Quality:       0       0       0       0       0       0)
0x000de6d0 CachedFile::tell()                                          (Quality:       0       0       0       0       0       0)
0x000de6e0 CachedFile::seek(long, int)                                 (Quality:       0       0       0       0       0       0)
0x000de720 CachedFileWriter::CachedFileWriter(CachedFile*, std::vector<int, std::allocator<int> >*) (Quality:       0       0       0       0       0       0)
0x000de750 CachedFileWriter::~CachedFileWriter()                       (Quality:       0       0       0       0       0       0)
0x000de760 CachedFile::cache(std::vector<_ByteRange, std::allocator<_ByteRange> > const&) (Quality:       0       0       0       0       0       0)
0x000deba0 CachedFile::cache(unsigned long, unsigned long)             (Quality:       0       0       0       0       0       0)
0x000dec10 CachedFile::read(void*, unsigned long, unsigned long)       (Quality:       0       0       0       0       0       0)
0x000ded70 CachedFileWriter::write(char const*, unsigned long)         (Quality:       0       0       0       0       0       0)
0x000df020 CachedFile::CachedFile(CachedFileLoader*, GooString*)       (Quality:       0       0       0       0       0       0)
0x000df180 std::vector<_ByteRange, std::allocator<_ByteRange> >::_M_insert_aux(__gnu_cxx::__normal_iterator<_ByteRange*, std::vector<_ByteRange, std::allocator<_ByteRange> > >, _ByteRange const&) (Quality:       0       0       0       0       0       0)
0x000df310 std::vector<int, std::allocator<int> >::_M_insert_aux(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int const&) (Quality:       0       0       0       0       0       0)
0x000df4a0 std::vector<CachedFile::Chunk, std::allocator<CachedFile::Chunk> >::_M_fill_insert(__gnu_cxx::__normal_iterator<CachedFile::Chunk*, std::vector<CachedFile::Chunk, std::allocator<CachedFile::Chunk> > >, unsigned long, CachedFile::Chunk const&) (Quality:       0       0       0       0       0       0)
0x000df810 NameTree::Entry::cmpEntry(void const*, void const*)         (Quality:       0       0       0       0       0       0)
0x000df820 Catalog::Catalog(PDFDoc*)                                   (Quality:       0       0       0       1       1       1)
0x000dfc30 Catalog::readMetadata()                                     (Quality:       0       0       0       0       0       0)
0x000dfe30 Catalog::getPageMode()                                      (Quality:       0       0       0       0       0       0)
0x000e0020 Catalog::getPageLayout()                                    (Quality:       0       0       0       0       0       0)
0x000e01f0 NameTree::NameTree()                                        (Quality:       0       0       0       0       0       0)
0x000e0210 NameTree::Entry::Entry(Array*, int)                         (Quality:       0       0       0       0       0       0)
0x000e0310 NameTree::Entry::~Entry()                                   (Quality:       0       0       0       0       0       0)
0x000e0330 NameTree::~NameTree()                                       (Quality:       0       0       0       0       0       0)
0x000e03a0 Catalog::~Catalog()                                         (Quality:       0       0       0       1       1       1)
0x000e0660 NameTree::addEntry(NameTree::Entry*)                        (Quality:       0       0       0       0       0       0)
0x000e06d0 NameTree::parse(Object*)                                    (Quality:       0       0       0       0       0       0)
0x000e0880 NameTree::init(XRef*, Object*)                              (Quality:       0       0       0       0       0       0)
0x000e08c0 NameTree::Entry::cmp(void const*, void const*)              (Quality:       0       0       0       0       0       0)
0x000e08d0 NameTree::lookup(GooString*, Object*)                       (Quality:       0       0       0       0       0       0)
0x000e09b0 NameTree::getValue(int)                                     (Quality:       0       0       0       0       0       0)
0x000e09e0 NameTree::getName(int)                                      (Quality:       0       0       0       0       0       0)
0x000b50e0 TextPage::addUnderline(double, double, double, double)@plt  (Quality:       0       0       0       0       0       0)
0x000b50d0 FoFiType1C::eexecWrite(Type1CEexecBuf*, char const*)@plt    (Quality:       0       0       0       0       0       0)
0x000e0f30 Catalog::labelToIndex(GooString*, int*)                     (Quality:       0       0       0       0       0       0)
0x000b50c0 AnnotText::AnnotText(PDFDoc*, Dict*, Object*)@plt           (Quality:       0       0       0       0       0       0)
0x000e1060 Catalog::getStructTreeRoot()                                (Quality:       0       0       0       0       0       0)
0x000e11d0 Catalog::getMarkInfo()                                      (Quality:       0       0       0       0       0       0)
0x000e1520 Catalog::getOutline()                                       (Quality:       0       0       0       0       0       0)
0x000e15f0 Catalog::getDests()                                         (Quality:       0       0       0       0       0       0)
0x000e16c0 Catalog::getFormType()                                      (Quality:       0       0       0       0       0       0)
0x000e1740 Catalog::getForm()                                          (Quality:       0       0       0       0       0       0)
0x000e17b0 Catalog::getViewerPreferences()                             (Quality:       0       0       0       0       0       0)
0x000e1820 Catalog::getNames()                                         (Quality:       0       0       0       0       0       0)
0x000e18e0 Catalog::getDestNameTree()                                  (Quality:       0       0       0       0       0       0)
0x000e19b0 Catalog::findDest(GooString*)                               (Quality:       0       0       0       0       0       0)
0x000e1bd0 Catalog::getEmbeddedFileNameTree()                          (Quality:       0       0       0       0       0       0)
0x000e1ca0 Catalog::embeddedFile(int)                                  (Quality:       0       0       0       0       0       0)
0x000e1db0 Catalog::getJSNameTree()                                    (Quality:       0       0       0       0       0       0)
0x000e1e80 Catalog::getJS(int)                                         (Quality:       0       0       0       0       0       0)
0x000e2050 Catalog::getAdditionalAction(Catalog::DocumentAdditionalActionsType) (Quality:       0       0       0       0       0       0)
0x000b50b0 StitchingFunction::~StitchingFunction()@plt                 (Quality:       0       0       0       0       0       0)
0x000b50a0 UnicodeMap::incRefCnt()@plt                                 (Quality:       0       0       0       0       0       0)
0x000e2c00 Catalog::getPageRef(int)                                    (Quality:       0       0       0       0       0       0)
0x000e2c60 Catalog::findPage(int, int)                                 (Quality:       0       0       0       0       0       0)
0x000e2cc0 Stream::hasGetChars()                                       (Quality:       0       0       0       0       0       0)
0x000b5090 png_create_write_struct@plt                                 (Quality:       0       0       0       0       0       0)
0x000e2d90 std::vector<Dict*, std::allocator<Dict*> >::_M_insert_aux(__gnu_cxx::__normal_iterator<Dict**, std::vector<Dict*, std::allocator<Dict*> > >, Dict* const&) (Quality:       0       0       0       2       2       2)
0x000e2f20 std::vector<Ref, std::allocator<Ref> >::_M_insert_aux(__gnu_cxx::__normal_iterator<Ref*, std::vector<Ref, std::allocator<Ref> > >, Ref const&) (Quality:       0       0       0       2       2       2)
0x000e30b0 std::vector<PageAttrs*, std::allocator<PageAttrs*> >::_M_insert_aux(__gnu_cxx::__normal_iterator<PageAttrs**, std::vector<PageAttrs*, std::allocator<PageAttrs*> > >, PageAttrs* const&) (Quality:       0       0       0       2       2       2)
0x000e3240 getCharFromString(void*)                                    (Quality:       0       0       0  100000  100000  100000)
0x000e3260 getCharFromFile(void*)                                      (Quality:       0       0       0       0       0       0)
0x000e3270 CharCodeToUnicode::addMapping(unsigned int, char*, int, int) (Quality:       0       0       0  100000  100000  100000)
0x000b5080 FoFiTrueType::mapToVertGID(unsigned int)@plt                (Quality:       0       0       0       0       0       0)
0x000b5070 SplashOutputDev::getColor(int)@plt                          (Quality:       0       0       0       0       0       0)
0x000e3c40 CharCodeToUnicode::CharCodeToUnicode()                      (Quality:       0       0       0       0       0       0)
0x000e3cb0 CharCodeToUnicode::makeIdentityMapping()                    (Quality:       0       0       0       0       0       0)
0x000e3cf0 CharCodeToUnicode::CharCodeToUnicode(GooString*)            (Quality:       0       0       0       0       0       0)
0x000e3d90 CharCodeToUnicode::parseCMap(GooString*, int)               (Quality:       0       0       0       0       0       0)
0x000e3de0 CharCodeToUnicode::parseCMapFromFile(GooString*, int)       (Quality:       0       0       0       0       0       0)
0x000b5060 strerror@plt                                                (Quality:       0       0       0       0       0       0)
0x000e3f30 CharCodeToUnicode::parseCIDToUnicode(GooString*, GooString*) (Quality:       0       0       0       0       0       0)
0x000e40b0 CharCodeToUnicode::parseUnicodeToUnicode(GooString*)        (Quality:       0       0       0       0       0       0)
0x000b5050 FT_Load_Glyph@plt                                           (Quality:       0       0       0       0       0       0)
0x000b5040 TIFFSetField@plt                                            (Quality:       0       0       0       0       0       0)
0x000e45a0 CharCodeToUnicode::incRefCnt()                              (Quality:       0       0       0       0       0       0)
0x000b5030 SplashScreen::distance(int, int, int, int)@plt              (Quality:       0       0       0       0       0       0)
0x000e4620 CharCodeToUnicode::match(GooString*)                        (Quality:       0       0       0       0       0       0)
0x000e4640 CharCodeToUnicode::setMapping(unsigned int, unsigned int*, int) (Quality:       0       0       0       0       0       0)
0x000e47d0 CharCodeToUnicode::mapToUnicode(unsigned int, unsigned int**) (Quality:       0       0       0  100000  100000  100000)
0x000e4880 CharCodeToUnicode::mapToCharCode(unsigned int*, unsigned int*, int) (Quality:       0       0       0       0       0       0)
0x000e4950 CharCodeToUnicodeCache::CharCodeToUnicodeCache(int)         (Quality:       0       0       0       2       2       2)
0x000e49a0 CharCodeToUnicodeCache::~CharCodeToUnicodeCache()           (Quality:       0       0       0       2       2       2)
0x000e49f0 CharCodeToUnicodeCache::getCharCodeToUnicode(GooString*)    (Quality:       0       0       0       0       0       0)
0x000e4ae0 CharCodeToUnicodeCache::add(CharCodeToUnicode*)             (Quality:       0       0       0       0       0       0)
0x000e4b60 getCharFromStream(void*)                                    (Quality:       0       0       0       0       0       0)
0x000e4b70 getCharFromFile(void*)                                      (Quality:       0       0       0       0       0       0)
0x000e4b80 CMap::CMap(GooString*, GooString*)                          (Quality:       0       0       0       0       0       0)
0x000e4c10 CMap::CMap(GooString*, GooString*, int)                     (Quality:       0       0       0       0       0       0)
0x000e4c70 CMap::copyVector(CMapVectorEntry*, CMapVectorEntry*)        (Quality:       0       0       0       0       0       0)
0x000e4d50 CMap::addCIDs(unsigned int, unsigned int, unsigned int, unsigned int) (Quality:       0       0       0       0       0       0)
0x000e4e90 CMap::freeCMapVector(CMapVectorEntry*)                      (Quality:       0       0       0       0       0       0)
0x000e4ef0 CMap::~CMap()                                               (Quality:       0       0       0       0       0       0)
0x000e4f50 CMap::incRefCnt()                                           (Quality:       0       0       0       0       0       0)
0x000e4f80 CMap::decRefCnt()                                           (Quality:       0       0       0       0       0       0)
0x000e4fd0 CMap::match(GooString*, GooString*)                         (Quality:       0       0       0       0       0       0)
0x000e5010 CMap::getCID(char*, int, unsigned int*, int*)               (Quality:       0       0       0       0       0       0)
0x000e50c0 CMap::setReverseMapVector(unsigned int, CMapVectorEntry*, unsigned int*, unsigned int, unsigned int) (Quality:       0       0       0       0       0       0)
0x000e5190 CMap::setReverseMap(unsigned int*, unsigned int, unsigned int) (Quality:       0       0       0       0       0       0)
0x000e51b0 CMapCache::CMapCache()                                      (Quality:       0       0       0       1       1       1)
0x000e51d0 CMapCache::~CMapCache()                                     (Quality:       0       0       0       1       1       1)
0x000e5200 CMapCache::getCMap(GooString*, GooString*, Stream*)         (Quality:       0       0       0       0       0       0)
0x000e5310 CMap::useCMap(CMapCache*, char*)                            (Quality:       0       0       0       0       0       0)
0x000e53d0 CMap::parse(CMapCache*, GooString*, GooString*, Stream*)    (Quality:       0       0       0       0       0       0)
0x000e5a10 CMap::parse2(CMapCache*, int (*)(void*), void*)             (Quality:       0       0       0       0       0       0)
0x000e5e90 CMap::parse(CMapCache*, GooString*, GooString*)             (Quality:       0       0       0       0       0       0)
0x000e6040 CMap::parse(CMapCache*, GooString*, Stream*)                (Quality:       0       0       0       0       0       0)
0x000e6110 CMap::parse(CMapCache*, GooString*, Object*)                (Quality:       0       0       0       0       0       0)
0x000e6210 CMap::useCMap(CMapCache*, Object*)                          (Quality:       0       0       0       0       0       0)
0x000e6270 parseDateString(char const*, int*, int*, int*, int*, int*, int*, char*, int*, int*) (Quality:       0       0       0       0       0       0)
0x000e6400 timeToDateString(long*)                                     (Quality:       0       0       0       0       0       0)
0x000e6540 BaseCryptStream::reset()                                    (Quality:       0       0       0       0       0       0)
0x000e6560 BaseCryptStream::getPos()                                   (Quality:       0       0       0       0       0       0)
0x000e6570 BaseCryptStream::getChar()                                  (Quality:       0       0       0       0       0       0)
0x000e6590 BaseCryptStream::isBinary(bool)                             (Quality:       0       0       0       0       0       0)
0x000e65b0 aesReadBlock(Stream*, unsigned char*, bool)                 (Quality:       0       0       0       0       0       0)
0x000e6640 rc4InitKey(unsigned char*, int, unsigned char*)             (Quality:       0       0       0       0       0       0)
0x000e66b0 aes256KeyExpansion(DecryptAES256State*, unsigned char*, int, bool) (Quality:       0       0       0       0       0       0)
0x000e6e40 aesKeyExpansion(DecryptAESState*, unsigned char*, int, bool) (Quality:       0       0       0       0       0       0)
0x000e7570 EncryptStream::reset()                                      (Quality:       0       0       0       0       0       0)
0x000e7640 DecryptStream::reset()                                      (Quality:       0       0       0       0       0       0)
0x000e7740 aes256DecryptBlock(DecryptAES256State*, unsigned char*, bool) (Quality:       0       0       0       0       0       0)
0x000e8160 DecryptStream::lookChar()                                   (Quality:       0       0       0       0       0       0)
0x000e8dd0 EncryptStream::lookChar()                                   (Quality:       0       0       0       0       0       0)
0x000e9770 BaseCryptStream::~BaseCryptStream()                         (Quality:       0       0       0       0       0       0)
0x000e97a0 EncryptStream::~EncryptStream()                             (Quality:       0       0       0       0       0       0)
0x000e97c0 EncryptStream::~EncryptStream()                             (Quality:       0       0       0       0       0       0)
0x000e97e0 DecryptStream::~DecryptStream()                             (Quality:       0       0       0       0       0       0)
0x000e9800 DecryptStream::~DecryptStream()                             (Quality:       0       0       0       0       0       0)
0x000e9820 BaseCryptStream::~BaseCryptStream()                         (Quality:       0       0       0       0       0       0)
0x000e9840 BaseCryptStream::setAutoDelete(bool)                        (Quality:       0       0       0       0       0       0)
0x000e9850 md5(unsigned char*, int, unsigned char*)                    (Quality:       0       0       0       0       0       0)
0x000ea7c0 Decrypt::makeFileKey2(int, int, int, GooString*, GooString*, int, GooString*, GooString*, unsigned char*, bool) (Quality:       0       0       0       0       0       0)
0x000eac90 BaseCryptStream::BaseCryptStream(Stream*, unsigned char*, CryptAlgorithm, int, int, int) (Quality:       0       0       0       0       0       0)
0x000eae40 EncryptStream::EncryptStream(Stream*, unsigned char*, CryptAlgorithm, int, int, int) (Quality:       0       0       0       0       0       0)
0x000eaeb0 DecryptStream::DecryptStream(Stream*, unsigned char*, CryptAlgorithm, int, int, int) (Quality:       0       0       0       0       0       0)
0x000eaee0 sha256HashBlock(unsigned char*, unsigned int*)              (Quality:       0       0       0       0       0       0)
0x000eb0d0 sha256(unsigned char*, int, unsigned char*)                 (Quality:       0       0       0       0       0       0)
0x000eb290 Decrypt::makeFileKey(int, int, int, GooString*, GooString*, GooString*, GooString*, int, GooString*, GooString*, GooString*, unsigned char*, bool, bool*) (Quality:       0       0       0       0       0       0)
0x000ebb10 BaseCryptStream::getKind()                                  (Quality:       0       0       0       0       0       0)
0x000ebb20 BaseCryptStream::getUndecodedStream()                       (Quality:       0       0       0       0       0       0)
0x000ebb30 cmpDictEntries(DictEntry const&, DictEntry const&)          (Quality:       0       0       0       0       0       0)
0x000ebb50 binarySearch(char const*, DictEntry*, int)                  (Quality:       0       0       0       0       0       0)
0x000b5020 FoFiTrueType::doMapToVertGID(unsigned int)@plt              (Quality:       0       0       0       0       0       0)
0x000b5010 Lexer::getObj(Object*, char const*, int)@plt                (Quality:       0       0       0       0       0       0)
0x000b5000 JBIG2Stream::findSegment(unsigned int)@plt                  (Quality:       0       0       0       0       0       0)
0x000b4ff0 StructTreeRoot::parentTreeAdd(Ref const&, StructElement*)@plt (Quality:       0       0       0       0       0       0)
0x000b4fe0 AnnotCaret::~AnnotCaret()@plt                               (Quality:       0       0       0       0       0       0)
0x000b4fd0 Annot::isVisible(bool)@plt                                  (Quality:       0       0       0       0       0       0)
0x000b4fc0 SplashPath::curveTo(double, double, double, double, double, double)@plt (Quality:       0       0       0       0       0       0)
0x000ebf70 Dict::remove(char const*)                                   (Quality:       0       0       0       0       0       0)
0x000b4fb0 JPXStreamPrivate::init2(unsigned char*, int, CODEC_FORMAT)@plt (Quality:       0       0       0       0       0       0)
0x000ec110 Dict::getVal(int, Object*)                                  (Quality:       0       0       0       2       2       2)
0x000b4fa0 log@plt                                                     (Quality:       0       0       0       0       0       0)
0x000ec150 Dict::set(char const*, Object*)                             (Quality:       0       0       0       0       0       0)
0x000ec350 Dict::hasKey(char const*)                                   (Quality:       0       0       0       8       8       8)
0x000b4f90 CMap::copyVector(CMapVectorEntry*, CMapVectorEntry*)@plt    (Quality:       0       0       0       0       0       0)
0x000b4f80 CMap::useCMap(CMapCache*, char*)@plt                        (Quality:       0       0       0       0       0       0)
0x000b4f70 FixedLengthEncoder::FixedLengthEncoder(Stream*, int)@plt    (Quality:       0       0       0       0       0       0)
0x000eca50 Dict::lookupInt(char const*, char const*, int*)             (Quality:       0       0       0       0       0       0)
0x000ecaf0 void std::__move_median_to_first<DictEntry*, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(DictEntry const&, DictEntry const&)> >(DictEntry*, DictEntry*, DictEntry*, DictEntry*, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(DictEntry const&, DictEntry const&)>) (Quality:       0       0       0       0       0       0)
0x000ecc20 void std::__unguarded_linear_insert<DictEntry*, __gnu_cxx::__ops::_Val_comp_iter<bool (*)(DictEntry const&, DictEntry const&)> >(DictEntry*, __gnu_cxx::__ops::_Val_comp_iter<bool (*)(DictEntry const&, DictEntry const&)>) (Quality:       0       0       0       0       0       0)
0x000ecca0 void std::__insertion_sort<DictEntry*, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(DictEntry const&, DictEntry const&)> >(DictEntry*, DictEntry*, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(DictEntry const&, DictEntry const&)>) (Quality:       0       0       0       0       0       0)
0x000ecda0 void std::__adjust_heap<DictEntry*, long, DictEntry, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(DictEntry const&, DictEntry const&)> >(DictEntry*, long, long, DictEntry, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(DictEntry const&, DictEntry const&)>) (Quality:       0       0       0       0       0       0)
0x000ecfd0 void std::__heap_select<DictEntry*, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(DictEntry const&, DictEntry const&)> >(DictEntry*, DictEntry*, DictEntry*, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(DictEntry const&, DictEntry const&)>) (Quality:       0       0       0       0       0       0)
0x000ed110 void std::__introsort_loop<DictEntry*, long, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(DictEntry const&, DictEntry const&)> >(DictEntry*, DictEntry*, long, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(DictEntry const&, DictEntry const&)>) (Quality:       0       0       0       0       0       0)
0x000ed2d0 setErrorCallback(void (*)(void*, ErrorCategory, long long, char*), void*) (Quality:       0       0       0       0       0       0)
0x000ed2e0 error(ErrorCategory, long long, char const*, ...)           (Quality:       0       0       0       0       0       0)
0x000ed4f0 EmbFile::EmbFile(Object*)                                   (Quality:       0       0       0       0       0       0)
0x000ed7f0 EmbFile::~EmbFile()                                         (Quality:       0       0       0       0       0       0)
0x000ed870 EmbFile::save2(_IO_FILE*)                                   (Quality:       0       0       0       0       0       0)
0x000ed900 EmbFile::save(char const*)                                  (Quality:       0       0       0       0       0       0)
0x000ed940 FileSpec::~FileSpec()                                       (Quality:       0       0       0       0       0       0)
0x000ed9d0 FileSpec::getEmbeddedFile()                                 (Quality:       0       0       0       0       0       0)
0x000eda90 getFileSpecName(Object*, Object*)                           (Quality:       0       0       0       0       0       0)
0x000edbe0 FileSpec::FileSpec(Object*)                                 (Quality:       0       0       0       0       0       0)
0x000eddf0 getFileSpecNameForPlatform(Object*, Object*)                (Quality:       0       0       0       0       0       0)
0x000edef0 FileSpec::getFileNameForPlatform()                          (Quality:       0       0       0       0       0       0)
0x000edfa0 FormWidgetButton::updateWidgetAppearance()                  (Quality:       0       0       0       0       0       0)
0x000edfb0 FormWidgetSignature::updateWidgetAppearance()               (Quality:       0       0       0       0       0       0)
0x000edfc0 FormWidgetText::updateWidgetAppearance()                    (Quality:       0       0       0       0       0       0)
0x000edfe0 FormWidgetChoice::updateWidgetAppearance()                  (Quality:       0       0       0       0       0       0)
0x000ee000 FormField::~FormField()                                     (Quality:       0       0       0       0       0       0)
0x000ee140 FormField::~FormField()                                     (Quality:       0       0       0       0       0       0)
0x000ee160 FormFieldText::~FormFieldText()                             (Quality:       0       0       0       0       0       0)
0x000ee1b0 FormFieldText::~FormFieldText()                             (Quality:       0       0       0       0       0       0)
0x000ee1d0 FormFieldSignature::~FormFieldSignature()                   (Quality:       0       0       0       0       0       0)
0x000ee1f0 FormFieldSignature::~FormFieldSignature()                   (Quality:       0       0       0       0       0       0)
0x000ee210 FormFieldButton::~FormFieldButton()                         (Quality:       0       0       0       0       0       0)
0x000ee250 FormFieldButton::~FormFieldButton()                         (Quality:       0       0       0       0       0       0)
0x000ee270 FormFieldChoice::~FormFieldChoice()                         (Quality:       0       0       0       0       0       0)
0x000ee340 FormFieldChoice::~FormFieldChoice()                         (Quality:       0       0       0       0       0       0)
0x000ee360 FormField::fillChildrenSiblingsID()                         (Quality:       0       0       0       0       0       0)
0x000ee3b0 pdfDocEncodingToUTF16(GooString*, int*)                     (Quality:       0       0       0       0       0       0)
0x000ee420 convertToUtf16(GooString*)                                  (Quality:       0       0       0       0       0       0)
0x000ee480 FormWidget::FormWidget(PDFDoc*, Object*, unsigned int, Ref, FormField*) (Quality:       0       0       0       0       0       0)
0x000ee4f0 FormWidget::~FormWidget()                                   (Quality:       0       0       0       0       0       0)
0x000ee520 FormWidgetButton::~FormWidgetButton()                       (Quality:       0       0       0       0       0       0)
0x000ee560 FormWidgetButton::~FormWidgetButton()                       (Quality:       0       0       0       0       0       0)
0x000ee580 FormWidgetChoice::~FormWidgetChoice()                       (Quality:       0       0       0       0       0       0)
0x000ee5a0 FormWidgetChoice::~FormWidgetChoice()                       (Quality:       0       0       0       0       0       0)
0x000ee5c0 FormWidget::~FormWidget()                                   (Quality:       0       0       0       0       0       0)
0x000ee5e0 FormWidget::createWidgetAnnotation()                        (Quality:       0       0       0       0       0       0)
0x000ee680 FormWidget::inRect(double, double) const                    (Quality:       0       0       0       0       0       0)
0x000ee6a0 FormWidget::getRect(double*, double*, double*, double*) const (Quality:       0       0       0       0       0       0)
0x000ee6c0 FormWidget::getFontSize() const                             (Quality:       0       0       0       0       0       0)
0x000ee6e0 FormWidget::isReadOnly() const                              (Quality:       0       0       0       0       0       0)
0x000ee6f0 FormWidget::encodeID(unsigned int, unsigned int)            (Quality:       0       0       0       0       0       0)
0x000ee700 FormWidget::decodeID(unsigned int, unsigned int*, unsigned int*) (Quality:       0       0       0       0       0       0)
0x000ee710 FormWidget::getPartialName() const                          (Quality:       0       0       0       0       0       0)
0x000ee720 FormWidget::getAlternateUiName() const                      (Quality:       0       0       0       0       0       0)
0x000ee730 FormWidget::getMappingName() const                          (Quality:       0       0       0       0       0       0)
0x000ee740 FormWidget::getActivationAction()                           (Quality:       0       0       0       0       0       0)
0x000ee760 FormWidget::getAdditionalAction(Annot::FormAdditionalActionsType) (Quality:       0       0       0       0       0       0)
0x000ee780 FormWidgetButton::FormWidgetButton(PDFDoc*, Object*, unsigned int, Ref, FormField*) (Quality:       0       0       0       0       0       0)
0x000ee910 FormWidgetButton::getOnStr()                                (Quality:       0       0       0       0       0       0)
0x000ee940 FormWidgetButton::getButtonType() const                     (Quality:       0       0       0       0       0       0)
0x000ee950 FormWidgetButton::setAppearanceState(char const*)           (Quality:       0       0       0       0       0       0)
0x000ee970 FormWidgetText::FormWidgetText(PDFDoc*, Object*, unsigned int, Ref, FormField*) (Quality:       0       0       0       0       0       0)
0x000ee9a0 FormWidgetText::getContent()                                (Quality:       0       0       0       0       0       0)
0x000ee9b0 FormWidgetText::isMultiline() const                         (Quality:       0       0       0       0       0       0)
0x000ee9c0 FormWidgetText::isPassword() const                          (Quality:       0       0       0       0       0       0)
0x000ee9d0 FormWidgetText::isFileSelect() const                        (Quality:       0       0       0       0       0       0)
0x000ee9e0 FormWidgetText::noSpellCheck() const                        (Quality:       0       0       0       0       0       0)
0x000ee9f0 FormWidgetText::noScroll() const                            (Quality:       0       0       0       0       0       0)
0x000eea00 FormWidgetText::isComb() const                              (Quality:       0       0       0       0       0       0)
0x000eea10 FormWidgetText::isRichText() const                          (Quality:       0       0       0       0       0       0)
0x000eea20 FormWidgetText::getMaxLen() const                           (Quality:       0       0       0       0       0       0)
0x000eea30 FormWidgetChoice::FormWidgetChoice(PDFDoc*, Object*, unsigned int, Ref, FormField*) (Quality:       0       0       0       0       0       0)
0x000eea60 FormWidgetChoice::_checkRange(int)                          (Quality:       0       0       0       0       0       0)
0x000eeab0 FormWidgetChoice::isSelected(int)                           (Quality:       0       0       0       0       0       0)
0x000eeaf0 FormWidgetChoice::getNumChoices()                           (Quality:       0       0       0       0       0       0)
0x000eeb00 FormWidgetChoice::getChoice(int)                            (Quality:       0       0       0       0       0       0)
0x000eeb30 FormWidgetChoice::isCombo() const                           (Quality:       0       0       0       0       0       0)
0x000eeb40 FormWidgetChoice::hasEdit() const                           (Quality:       0       0       0       0       0       0)
0x000eeb50 FormWidgetChoice::isMultiSelect() const                     (Quality:       0       0       0       0       0       0)
0x000eeb60 FormWidgetChoice::noSpellCheck() const                      (Quality:       0       0       0       0       0       0)
0x000eeb70 FormWidgetChoice::commitOnSelChange() const                 (Quality:       0       0       0       0       0       0)
0x000eeb80 FormWidgetChoice::isListBox() const                         (Quality:       0       0       0       0       0       0)
0x000eeb90 FormWidgetSignature::FormWidgetSignature(PDFDoc*, Object*, unsigned int, Ref, FormField*) (Quality:       0       0       0       0       0       0)
0x000eebc0 FormField::createWidgetAnnotations()                        (Quality:       0       0       0       0       0       0)
0x000eec30 FormField::_createWidget(Object*, Ref)                      (Quality:       0       0       0       0       0       0)
0x000eedd0 FormField::findWidgetByRef(Ref)                             (Quality:       0       0       0       0       0       0)
0x000eee90 FormField::getFullyQualifiedName()                          (Quality:       0       0       0       0       0       0)
0x000ef220 FormWidget::getFullyQualifiedName()                         (Quality:       0       0       0       0       0       0)
0x000ef230 FormField::updateChildrenAppearance()                       (Quality:       0       0       0       0       0       0)
0x000ef2a0 FormFieldButton::setNumSiblings(int)                        (Quality:       0       0       0       0       0       0)
0x000ef2d0 FormFieldButton::fillChildrenSiblingsID()                   (Quality:       0       0       0       0       0       0)
0x000ef3f0 FormFieldButton::getState(char*)                            (Quality:       0       0       0       0       0       0)
0x000ef450 FormWidgetButton::getState()                                (Quality:       0       0       0       0       0       0)
0x000ef480 FormFieldButton::updateState(char*)                         (Quality:       0       0       0       0       0       0)
0x000ef540 FormFieldButton::setState(char*)                            (Quality:       0       0       0       0       0       0)
0x000ef760 FormWidgetButton::setState(bool)                            (Quality:       0       0       0       0       0       0)
0x000ef7b0 FormFieldText::getContentCopy()                             (Quality:       0       0       0       0       0       0)
0x000ef7f0 FormWidgetText::getContentCopy()                            (Quality:       0       0       0       0       0       0)
0x000ef800 FormFieldText::setContentCopy(GooString*)                   (Quality:       0       0       0       0       0       0)
0x000ef980 FormWidgetText::setContent(GooString*)                      (Quality:       0       0       0       0       0       0)
0x000ef9d0 FormFieldChoice::unselectAll()                              (Quality:       0       0       0       0       0       0)
0x000efa10 FormFieldChoice::getEditChoice()                            (Quality:       0       0       0       0       0       0)
0x000efa20 FormWidgetChoice::getEditChoice()                           (Quality:       0       0       0       0       0       0)
0x000efa60 FormFieldChoice::getNumSelected()                           (Quality:       0       0       0       0       0       0)
0x000efaa0 FormFieldChoice::updateSelection()                          (Quality:       0       0       0       0       0       0)
0x000efe10 FormFieldChoice::deselectAll()                              (Quality:       0       0       0       0       0       0)
0x000efe60 FormWidgetChoice::deselectAll()                             (Quality:       0       0       0       0       0       0)
0x000efea0 FormFieldChoice::toggle(int)                                (Quality:       0       0       0       0       0       0)
0x000efef0 FormWidgetChoice::toggle(int)                               (Quality:       0       0       0       0       0       0)
0x000eff60 FormFieldChoice::select(int)                                (Quality:       0       0       0       0       0       0)
0x000effd0 FormWidgetChoice::select(int)                               (Quality:       0       0       0       0       0       0)
0x000f0040 FormFieldChoice::setEditChoice(GooString*)                  (Quality:       0       0       0       0       0       0)
0x000f00f0 FormWidgetChoice::setEditChoice(GooString*)                 (Quality:       0       0       0       0       0       0)
0x000f0170 FormFieldChoice::getSelectedChoice()                        (Quality:       0       0       0       0       0       0)
0x000f01e0 Form::~Form()                                               (Quality:       0       0       0       0       0       0)
0x000f0270 Form::postWidgetsLoad()                                     (Quality:       0       0       0       0       0       0)
0x000f02c0 Form::findWidgetByRef(Ref)                                  (Quality:       0       0       0       0       0       0)
0x000f0320 FormPageWidgets::FormPageWidgets(Annots*, unsigned int, Form*) (Quality:       0       0       0       0       0       0)
0x000f0410 FormPageWidgets::~FormPageWidgets()                         (Quality:       0       0       0       0       0       0)
0x000f0420 fieldLookup(Dict*, char const*, Object*, std::set<int, std::less<int>, std::allocator<int> >*) (Quality:       0       0       0       0       0       0)
0x000f0570 Form::fieldLookup(Dict*, char const*, Object*)              (Quality:       0       0       0       0       0       0)
0x000f05d0 FormField::FormField(PDFDoc*, Object*, Ref const&, FormField*, std::set<int, std::less<int>, std::allocator<int> >*, FormFieldType) (Quality:       0       0       0       0       0       0)
0x000f0df0 FormFieldButton::FormFieldButton(PDFDoc*, Object*, Ref const&, FormField*, std::set<int, std::less<int>, std::allocator<int> >*) (Quality:       0       0       0       0       0       0)
0x000f0f80 FormFieldText::FormFieldText(PDFDoc*, Object*, Ref const&, FormField*, std::set<int, std::less<int>, std::allocator<int> >*) (Quality:       0       0       0       0       0       0)
0x000f1230 FormFieldChoice::FormFieldChoice(PDFDoc*, Object*, Ref const&, FormField*, std::set<int, std::less<int>, std::allocator<int> >*) (Quality:       0       0       0       0       0       0)
0x000f19c0 FormFieldSignature::FormFieldSignature(PDFDoc*, Object*, Ref const&, FormField*, std::set<int, std::less<int>, std::allocator<int> >*) (Quality:       0       0       0       0       0       0)
0x000f19f0 Form::createFieldFromDict(Object*, PDFDoc*, Ref const&, FormField*, std::set<int, std::less<int>, std::allocator<int> >*) (Quality:       0       0       0       0       0       0)
0x000f1be0 Form::Form(PDFDoc*, Object*)                                (Quality:       0       0       0       0       0       0)
0x000f2090 FormWidgetSignature::~FormWidgetSignature()                 (Quality:       0       0       0       0       0       0)
0x000f20b0 FormWidgetSignature::~FormWidgetSignature()                 (Quality:       0       0       0       0       0       0)
0x000f20d0 FormWidgetText::~FormWidgetText()                           (Quality:       0       0       0       0       0       0)
0x000f20f0 FormWidgetText::~FormWidgetText()                           (Quality:       0       0       0       0       0       0)
0x000f2110 std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::find(int const&) (Quality:       0       0       0       2       2       2)
0x000b4f60 GooString::clear()@plt                                      (Quality:       0       0       0       0       0       0)
0x000f21a0 std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_insert_unique(int const&) (Quality:       0       0       0       2       2       2)
0x000f22a0 std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_copy(std::_Rb_tree_node<int> const*, std::_Rb_tree_node<int>*) (Quality:       0       0       0       0       0       0)
0x000f2370 FontInfoScanner::FontInfoScanner(PDFDoc*, int)              (Quality:       0       0       0       0       0       0)
0x000f23c0 FontInfo::FontInfo(GfxFont*, XRef*)                         (Quality:       0       0       0       0       0       0)
0x000f2620 FontInfo::FontInfo(FontInfo&)                               (Quality:       0       0       0       0       0       0)
0x000f2710 FontInfo::~FontInfo()                                       (Quality:       0       0       0       0       0       0)
0x000f2790 FontInfoScanner::~FontInfoScanner()                         (Quality:       0       0       0       0       0       0)
0x000f27b0 FontInfoScanner::scanFonts(XRef*, Dict*, GooList*)          (Quality:       0       0       0       0       0       0)
0x000f2c20 FontInfoScanner::scan(int)                                  (Quality:       0       0       0       0       0       0)
0x000f2e10 IdentityFunction::transform(double*, double*)               (Quality:       0       0       0       0       0       0)
0x000f2e30 StitchingFunction::transform(double*, double*)              (Quality:       0       0       0       0       0       0)
0x000f2f30 SampledFunction::transform(double*, double*)                (Quality:       0       0       0       0       0       0)
0x000f32b0 ExponentialFunction::transform(double*, double*)            (Quality:       0       0       0       0       0       0)
0x000f33a0 SampledFunction::hasDifferentResultSet(Function*)           (Quality:       0       0       0       0       0       0)
0x000f3450 Function::Function()                                        (Quality:       0       0       0       0       0       0)
0x000f3460 Function::~Function()                                       (Quality:       0       0       0       0       0       0)
0x000f3470 IdentityFunction::~IdentityFunction()                       (Quality:       0       0       0       0       0       0)
0x000f3490 IdentityFunction::~IdentityFunction()                       (Quality:       0       0       0       0       0       0)
0x000f34b0 SampledFunction::~SampledFunction()                         (Quality:       0       0       0       0       0       0)
0x000f3500 SampledFunction::~SampledFunction()                         (Quality:       0       0       0       0       0       0)
0x000f3520 ExponentialFunction::~ExponentialFunction()                 (Quality:       0       0       0       0       0       0)
0x000f3540 ExponentialFunction::~ExponentialFunction()                 (Quality:       0       0       0       0       0       0)
0x000f3560 StitchingFunction::~StitchingFunction()                     (Quality:       0       0       0       0       0       0)
0x000f3600 StitchingFunction::~StitchingFunction()                     (Quality:       0       0       0       0       0       0)
0x000f3620 PostScriptFunction::~PostScriptFunction()                   (Quality:       0       0       0       0       0       0)
0x000f3670 PostScriptFunction::~PostScriptFunction()                   (Quality:       0       0       0       0       0       0)
0x000f3690 Function::~Function()                                       (Quality:       0       0       0       0       0       0)
0x000f36b0 Function::Function(Function const*)                         (Quality:       0       0       0       0       0       0)
0x000f3770 Function::init(Dict*)                                       (Quality:       0       0       0       0       0       0)
0x000f3c20 IdentityFunction::IdentityFunction()                        (Quality:       0       0       0       0       0       0)
0x000f3c80 SampledFunction::SampledFunction(Object*, Dict*)            (Quality:       0       0       0       0       0       0)
0x000f4710 SampledFunction::SampledFunction(SampledFunction const*)    (Quality:       0       0       0       0       0       0)
0x000f4a30 ExponentialFunction::ExponentialFunction(Object*, Dict*)    (Quality:       0       0       0       0       0       0)
0x000f4ec0 ExponentialFunction::ExponentialFunction(ExponentialFunction const*) (Quality:       0       0       0       0       0       0)
0x000f4fb0 StitchingFunction::StitchingFunction(StitchingFunction const*) (Quality:       0       0       0       0       0       0)
0x000f5110 PSStack::copy(int)                                          (Quality:       0       0       0       0       0       0)
0x000f51b0 PSStack::roll(int, int)                                     (Quality:       0       0       0       0       0       0)
0x000f5300 PostScriptFunction::PostScriptFunction(PostScriptFunction const*) (Quality:       0       0       0       0       0       0)
0x000f5430 PostScriptFunction::getToken(Stream*)                       (Quality:       0       0       0       0       0       0)
0x000f55d0 PostScriptFunction::resizeCode(int)                         (Quality:       0       0       0       0       0       0)
0x000f5610 PostScriptFunction::parseCode(Stream*, int*)                (Quality:       0       0       0       0       0       0)
0x000f5ad0 PostScriptFunction::exec(PSStack*, int)                     (Quality:       0       0       0       0       0       0)
0x000f8f80 PostScriptFunction::transform(double*, double*)             (Quality:       0       0       0       0       0       0)
0x000f9240 PostScriptFunction::PostScriptFunction(Object*, Dict*)      (Quality:       0       0       0       0       0       0)
0x000f9470 StitchingFunction::StitchingFunction(Object*, Dict*, std::set<int, std::less<int>, std::allocator<int> >*) (Quality:       0       0       0       0       0       0)
0x000f9c40 Function::parse(Object*, std::set<int, std::less<int>, std::allocator<int> >*) (Quality:       0       0       0       0       0       0)
0x000f9e90 Function::parse(Object*)                                    (Quality:       0       0       0       0       0       0)
0x000f9ef0 Function::hasDifferentResultSet(Function*)                  (Quality:       0       0       0       0       0       0)
0x000f9f00 IdentityFunction::getType()                                 (Quality:       0       0       0       0       0       0)
0x000f9f10 IdentityFunction::isOk()                                    (Quality:       0       0       0       0       0       0)
0x000f9f20 SampledFunction::getType()                                  (Quality:       0       0       0       0       0       0)
0x000f9f30 SampledFunction::isOk()                                     (Quality:       0       0       0       0       0       0)
0x000f9f40 ExponentialFunction::getType()                              (Quality:       0       0       0       0       0       0)
0x000f9f50 ExponentialFunction::isOk()                                 (Quality:       0       0       0       0       0       0)
0x000f9f60 StitchingFunction::getType()                                (Quality:       0       0       0       0       0       0)
0x000f9f70 StitchingFunction::isOk()                                   (Quality:       0       0       0       0       0       0)
0x000f9f80 PostScriptFunction::getType()                               (Quality:       0       0       0       0       0       0)
0x000f9f90 PostScriptFunction::isOk()                                  (Quality:       0       0       0       0       0       0)
0x000f9fa0 IdentityFunction::copy()                                    (Quality:       0       0       0       0       0       0)
0x000f9fc0 SampledFunction::copy()                                     (Quality:       0       0       0       0       0       0)
0x000f9ff0 ExponentialFunction::copy()                                 (Quality:       0       0       0       0       0       0)
0x000fa020 StitchingFunction::copy()                                   (Quality:       0       0       0       0       0       0)
0x000fa050 PSStack::popInt()                                           (Quality:       0       0       0       0       0       0)
0x000fa0d0 PSStack::popNum()                                           (Quality:       0       0       0       0       0       0)
0x000fa170 PostScriptFunction::copy()                                  (Quality:       0       0       0       0       0       0)
0x000fa1a0 bubbleSort(double*)                                         (Quality:       0       0       0       0       0       0)
0x000fa210 Gfx::opClip(Object*, int)                                   (Quality:       0       0       0       8       8       8)
0x000fa220 Gfx::opEOClip(Object*, int)                                 (Quality:       0       0       0       0       0       0)
0x000fa230 Gfx::opBeginIgnoreUndef(Object*, int)                       (Quality:       0       0       0       0       0       0)
0x000fa240 Gfx::opEndIgnoreUndef(Object*, int)                         (Quality:       0       0       0       0       0       0)
0x000fa250 Object::getStream() [clone .isra.30]                        (Quality:       0       0       0       0       0       0)
0x000fa290 Object::getRef() [clone .isra.31]                           (Quality:       0       0       0       0       0       0)
0x000fa2d0 Object::dictLookup(char const*, Object*, int) [clone .isra.39] [clone .constprop.183] (Quality:       0       0       0       0       0       0)
0x000b4f50 mkstemp@plt                                                 (Quality:       0       0       0       0       0       0)
0x000b4f30 TextBlock::coalesce(UnicodeMap*, double)@plt                (Quality:       0       0       0       0       0       0)
0x000b4f20 PDFDoc::checkHeader()@plt                                   (Quality:       0       0       0       1       1       1)
0x000fa4e0 GfxState::isParentState(GfxState*) [clone .isra.125]        (Quality:       0       0       0       0       0       0)
0x000b4f10 gstrtod@plt                                                 (Quality:       0       0       0       0       0       0)
0x000b4f00 FormField::findWidgetByRef(Ref)@plt                         (Quality:       0       0       0       0       0       0)
0x000fa640 Gfx::opSetTextRender(Object*, int)                          (Quality:       0       0       0       4       4       4)
0x000fa6a0 Gfx::opSetRenderingIntent(Object*, int)                     (Quality:       0       0       0       0       0       0)
0x000fa6f0 Gfx::opMarkPoint(Object*, int)                              (Quality:       0       0       0       0       0       0)
0x000fa7e0 Gfx::opSetTextLeading(Object*, int)                         (Quality:       0       0       0       0       0       0)
0x000fa870 Gfx::opSetTextRise(Object*, int)                            (Quality:       0       0       0       0       0       0)
0x000fa910 Gfx::opSetMiterLimit(Object*, int)                          (Quality:       0       0       0       0       0       0)
0x000b4ef0 jpeg_start_decompress@plt                                   (Quality:       0       0       0       0       0       0)
0x000faa50 Gfx::opSetWordSpacing(Object*, int)                         (Quality:       0       0       0       0       0       0)
0x000b4ee0 Attribute::Attribute(Attribute::Type, Object*)@plt          (Quality:       0       0       0       0       0       0)
0x000fab90 Gfx::opSetFlat(Object*, int)                                (Quality:       0       0       0       0       0       0)
0x000fac30 Gfx::opSetHorizScaling(Object*, int)                        (Quality:       0       0       0       0       0       0)
0x000facf0 Gfx::opSetCharWidth(Object*, int)                           (Quality:       0       0       0       0       0       0)
0x000b4ed0 GfxShading::~GfxShading()@plt                               (Quality:       0       0       0       0       0       0)
0x000faec0 Gfx::opTextMove(Object*, int)                               (Quality:       0       0       0       0       0       0)
0x000b4ec0 GfxGouraudTriangleShading::GfxGouraudTriangleShading(GfxGouraudTriangleShading*)@plt (Quality:       0       0       0       0       0       0)
0x000fb1b0 Gfx::opSetCacheDevice(Object*, int)                         (Quality:       0       0       0       0       0       0)
0x000b4eb0 jpeg_set_quality@plt                                        (Quality:       0       0       0       0       0       0)
0x000fb680 Gfx::opRectangle(Object*, int)                              (Quality:       0       0       0       8       8       8)
0x000fb950 Gfx::opConcat(Object*, int)                                 (Quality:       0       0       0       4       4       4)
0x000fbd30 Gfx::opSetDash(Object*, int)                                (Quality:       0       0       0       0       0       0)
0x000b4ea0 SecurityHandler::make(PDFDoc*, Object*)@plt                 (Quality:       0       0       0       0       0       0)
0x000b4e90 CachedFileWriter::write(char const*, unsigned long)@plt     (Quality:       0       0       0       0       0       0)
0x000b4e80 XRef::XRef(Object*)@plt                                     (Quality:       0       0       0       0       0       0)
0x000b4e70 popen@plt                                                   (Quality:       0       0       0       0       0       0)
0x000fc4b0 GfxResources::lookupXObject(char*, Object*)                 (Quality:       0       0       0       4       4       4)
0x000fc530 GfxResources::lookupXObjectNF(char*, Object*)               (Quality:       0       0       0       4       4       4)
0x000fc5b0 GfxResources::lookupMarkedContentNF(char*, Object*)         (Quality:       0       0       0       0       0       0)
0x000fc630 GfxResources::lookupColorSpace(char const*, Object*)        (Quality:       0       0       0       2       2       2)
0x000fc6a0 Gfx::opSetFillGray(Object*, int)                            (Quality:       0       0       0       0       0       0)
0x000fc830 Gfx::opSetStrokeGray(Object*, int)                          (Quality:       0       0       0       0       0       0)
0x000fc9c0 Gfx::opSetFillCMYKColor(Object*, int)                       (Quality:       0       0       0       0       0       0)
0x000fcc30 Gfx::opSetStrokeCMYKColor(Object*, int)                     (Quality:       0       0       0       0       0       0)
0x000fcea0 Gfx::opSetFillRGBColor(Object*, int)                        (Quality:       0       0       0       0       0       0)
0x000fd110 Gfx::opSetStrokeRGBColor(Object*, int)                      (Quality:       0       0       0       0       0       0)
0x000fd380 GfxResources::lookupPattern(char*, OutputDev*, GfxState*)   (Quality:       0       0       0       0       0       0)
0x000fd440 GfxResources::lookupShading(char*, OutputDev*, GfxState*)   (Quality:       0       0       0       0       0       0)
0x000fd500 GfxResources::lookupGStateNF(char*, Object*)                (Quality:       0       0       0       0       0       0)
0x000fd580 GfxResources::lookupGState(char*, Object*)                  (Quality:       0       0       0       0       0       0)
0x000b4e60 Splash::fillImageMask(bool (*)(void*, unsigned char*), void*, int, int, double*, bool)@plt (Quality:       0       0       0       0       0       0)
0x000b4e30 SplashRadialPattern::~SplashRadialPattern()@plt             (Quality:       0       0       0       0       0       0)
0x000b4e20 AnnotPolygon::AnnotPolygon(PDFDoc*, Dict*, Object*)@plt     (Quality:       0       0       0       0       0       0)
0x000fd8d0 Gfx::getPos()                                               (Quality:       0       0       0       0       0       0)
0x000b4e00 AnnotPath::getX(int) const@plt                              (Quality:       0       0       0       0       0       0)
0x000fdb10 Gfx::opSetFillColorSpace(Object*, int)                      (Quality:       0       0       0       0       0       0)
0x000fdd50 Gfx::opSetStrokeColorSpace(Object*, int)                    (Quality:       0       0       0       0       0       0)
0x000fdf90 Gfx::opSetFillColor(Object*, int)                           (Quality:       0       0       0       0       0       0)
0x000fe1b0 Gfx::opSetStrokeColor(Object*, int)                         (Quality:       0       0       0       0       0       0)
0x000fe3d0 Gfx::opSetFillColorN(Object*, int)                          (Quality:       0       0       0       0       0       0)
0x000fe840 Gfx::opSetStrokeColorN(Object*, int)                        (Quality:       0       0       0       0       0       0)
0x000b4df0 void std::__unguarded_linear_insert<DictEntry*, __gnu_cxx::__ops::_Val_comp_iter<bool (*)(DictEntry const&, DictEntry const&)> >(DictEntry*, __gnu_cxx::__ops::_Val_comp_iter<bool (*)(DictEntry const&, DictEntry const&)>)@plt (Quality:       0       0       0       0       0       0)
0x000fede0 Gfx::opCurveTo(Object*, int)                                (Quality:       0       0       0       0       0       0)
0x000ff020 Gfx::opCurveTo1(Object*, int)                               (Quality:       0       0       0       0       0       0)
0x000ff1e0 Gfx::opCurveTo2(Object*, int)                               (Quality:       0       0       0       0       0       0)
0x000ff390 Gfx::opClosePath(Object*, int)                              (Quality:       0       0       0       0       0       0)
0x000ff420 Gfx::opImageData(Object*, int)                              (Quality:       0       0       0       0       0       0)
0x000ff450 Gfx::opEndImage(Object*, int)                               (Quality:       0       0       0       0       0       0)
0x000ff480 Gfx::doFunctionShFill1(GfxFunctionShading*, double, double, double, double, GfxColor*, int) (Quality:       0       0       0       0       0       0)
0x00100a20 Gfx::doFunctionShFill(GfxFunctionShading*) [clone .part.136] (Quality:       0       0       0       0       0       0)
0x00100b30 Gfx::doFunctionShFill(GfxFunctionShading*)                  (Quality:       0       0       0       0       0       0)
0x00100ba0 Gfx::doAxialShFill(GfxAxialShading*)                        (Quality:       0       0       0       0       0       0)
0x00101f30 Gfx::doRadialShFill(GfxRadialShading*)                      (Quality:       0       0       0       0       0       0)
0x001047b0 Gfx::gouraudFillTriangle(double, double, GfxColor*, double, double, GfxColor*, double, double, GfxColor*, int, int, GfxState::ReusablePathIterator*) (Quality:       0       0       0       0       0       0)
0x00104ef0 Gfx::gouraudFillTriangle(double, double, double, double, double, double, double, double, double, double, int, GfxGouraudTriangleShading*, GfxState::ReusablePathIterator*) (Quality:       0       0       0       0       0       0)
0x00105570 Gfx::doGouraudTriangleShFill(GfxGouraudTriangleShading*)    (Quality:       0       0       0       0       0       0)
0x00105960 Gfx::fillPatch(GfxPatch*, int, int, double, int, GfxPatchMeshShading*) (Quality:       0       0       0       0       0       0)
0x00106390 Gfx::doPatchMeshShFill(GfxPatchMeshShading*)                (Quality:       0       0       0       0       0       0)
0x000b4dd0 FormFieldButton::~FormFieldButton()@plt                     (Quality:       0       0       0       0       0       0)
0x00106580 Gfx::opEndPath(Object*, int)                                (Quality:       0       0       0       8       8       8)
0x00106590 Gfx::doIncCharCount(GooString*)                             (Quality:       0       0       0       0       0       0)
0x001065f0 Gfx::buildImageStream()                                     (Quality:       0       0       0       0       0       0)
0x00106840 Gfx::popMarkedContent()                                     (Quality:       0       0       0       0       0       0)
0x00106860 Gfx::pushMarkedContent()                                    (Quality:       0       0       0       0       0       0)
0x00106890 Gfx::contentIsHidden()                                      (Quality:       0       0       0       0       0       0)
0x001068e0 Gfx::opBeginMarkedContent(Object*, int)                     (Quality:       0       0       0       0       0       0)
0x00106c70 Gfx::opEndMarkedContent(Object*, int)                       (Quality:       0       0       0       0       0       0)
0x000b4dc0 GlobalParams::getScreenSize()@plt                           (Quality:       0       0       0       0       0       0)
0x000b4db0 FoFiTrueType::readPostTable()@plt                           (Quality:       0       0       0       0       0       0)
0x000b4da0 SplashOutputDev::setupScreenParams(double, double)@plt      (Quality:       0       0       0       0       0       0)
0x000b4d90 SplashOutputDev::drawType3Glyph(GfxState*, T3FontCache*, T3FontCacheTag*, unsigned char*)@plt (Quality:       0       0       0       0       0       0)
0x000b4d70 CachedFile::incRefCnt()@plt                                 (Quality:       0       0       0       0       0       0)
0x000b4d60 FoFiType1C::getOp(int, bool, bool*)@plt                     (Quality:       0       0       0       0       0       0)
0x00106e60 Gfx::saveStateStack()                                       (Quality:       0       0       0       0       0       0)
0x00106ec0 Gfx::restoreStateStack(GfxState*)                           (Quality:       0       0       0       0       0       0)
0x00106f40 Gfx::doShadingPatternFill(GfxShadingPattern*, bool, bool, bool) (Quality:       0       0       0       0       0       0)
0x00107800 Gfx::opShFill(Object*, int)                                 (Quality:       0       0       0       0       0       0)
0x00107bd0 Gfx::pushResources(Dict*)                                   (Quality:       0       0       0       0       0       0)
0x000b4d50 Annot::setAppearanceState(char const*)@plt                  (Quality:       0       0       0       0       0       0)
0x00107c40 Gfx::checkTransparencyGroup(Dict*)                          (Quality:       0       0       0       0       0       0)
0x000b4d40 void std::__introsort_loop<GfxFontCIDWidthExcep*, long, __gnu_cxx::__ops::_Iter_comp_iter<cmpWidthExcepFunctor> >(GfxFontCIDWidthExcep*, GfxFontCIDWidthExcep*, long, __gnu_cxx::__ops::_Iter_comp_iter<cmpWidthExcepFunctor>)@plt (Quality:       0       0       0       0       0       0)
0x000b4d30 AnnotQuadrilaterals::getY2(int)@plt                         (Quality:       0       0       0       0       0       0)
0x000b4d20 LinkRendition::~LinkRendition()@plt                         (Quality:       0       0       0       0       0       0)
0x00108550 Gfx::Gfx(PDFDoc*, OutputDev*, Dict*, PDFRectangle*, PDFRectangle*, bool (*)(void*), void*, XRef*) (Quality:       0       0       0       0       0       0)
0x000b4d00 getFileSpecNameForPlatform(Object*, Object*)@plt            (Quality:       0       0       0       0       0       0)
0x000b4cf0 FormWidgetChoice::~FormWidgetChoice()@plt                   (Quality:       0       0       0       0       0       0)
0x00108ed0 Gfx::drawForm(Object*, Dict*, double*, double*, bool, bool, GfxColorSpace*, bool, bool, bool, Function*, GfxColor*) (Quality:       0       0       0       0       0       0)
0x00109530 Gfx::doSoftMask(Object*, bool, GfxColorSpace*, bool, bool, Function*, GfxColor*) (Quality:       0       0       0       0       0       0)
0x001099f0 Gfx::opSetExtGState(Object*, int)                           (Quality:       0       0       0       0       0       0)
0x0010b010 Gfx::doTilingPatternFill(GfxTilingPattern*, bool, bool, bool) (Quality:       0       0       0       0       0       0)
0x0010c020 Gfx::doPatternFill(bool)                                    (Quality:       0       0       0       0       0       0)
0x0010c0e0 Gfx::opFill(Object*, int)                                   (Quality:       0       0       0       0       0       0)
0x000b4ce0 GooString::hasUnicodeMarker()@plt                           (Quality:       0       0       0       0       0       0)
0x0010c1e0 Gfx::doPatternStroke()                                      (Quality:       0       0       0       0       0       0)
0x0010c290 Gfx::opStroke(Object*, int)                                 (Quality:       0       0       0       0       0       0)
0x0010c310 Gfx::opCloseStroke(Object*, int)                            (Quality:       0       0       0       0       0       0)
0x0010c3e0 Gfx::opFillStroke(Object*, int)                             (Quality:       0       0       0       0       0       0)
0x0010c4b0 Gfx::opCloseFillStroke(Object*, int)                        (Quality:       0       0       0       0       0       0)
0x0010c5d0 Gfx::opEOFillStroke(Object*, int)                           (Quality:       0       0       0       0       0       0)
0x0010c6a0 Gfx::opCloseEOFillStroke(Object*, int)                      (Quality:       0       0       0       0       0       0)
0x0010c7c0 Gfx::doPatternText()                                        (Quality:       0       0       0       0       0       0)
0x0010c870 Gfx::doPatternImageMask(Object*, Stream*, int, int, bool, bool) (Quality:       0       0       0       0       0       0)
0x0010ca40 Gfx::doImage(Object*, Stream*, bool)                        (Quality:       0       0       0       4       4       4)
0x0010ddf0 Gfx::opBeginImage(Object*, int)                             (Quality:       0       0       0       0       0       0)
0x0010deb0 Gfx::doForm(Object*)                                        (Quality:       0       0       0       0       0       0)
0x0010e620 Gfx::opXObject(Object*, int)                                (Quality:       0       0       0       4       4       4)
0x0010eac0 Gfx::drawAnnot(Object*, AnnotBorder*, AnnotColor*, double, double, double, double, int) (Quality:       0       0       0       0       0       0)
0x0010f720 Gfx::doShowText(GooString*)                                 (Quality:       0       0       0  100000  100000  100000)
0x001106e0 Gfx::opShowText(Object*, int)                               (Quality:       0       0       0       0       0       0)
0x00110820 Gfx::opMoveShowText(Object*, int)                           (Quality:       0       0       0       0       0       0)
0x00110a00 Gfx::opMoveSetShowText(Object*, int)                        (Quality:       0       0       0       0       0       0)
0x000b4cc0 SplashFTFontFile::loadTrueTypeFont(SplashFTFontEngine*, SplashFontFileID*, SplashFontSrc*, int*, int, int)@plt (Quality:       0       0       0       0       0       0)
0x001110e0 OutputDev::useTilingPatternFill()                           (Quality:       0       0       0       0       0       0)
0x001110f0 OutputDev::useShadedFills(int)                              (Quality:       0       0       0       0       0       0)
0x00111100 OutputDev::startPage(int, GfxState*, XRef*)                 (Quality:       0       0       0       0       0       0)
0x00111110 OutputDev::endPage()                                        (Quality:       0       0       0       0       0       0)
0x00111120 OutputDev::saveState(GfxState*)                             (Quality:       0       0       0       0       0       0)
0x00111130 OutputDev::restoreState(GfxState*)                          (Quality:       0       0       0       0       0       0)
0x00111140 OutputDev::updateCTM(GfxState*, double, double, double, double, double, double) (Quality:       0       0       0       0       0       0)
0x00111150 OutputDev::updateLineDash(GfxState*)                        (Quality:       0       0       0       0       0       0)
0x00111160 OutputDev::updateFlatness(GfxState*)                        (Quality:       0       0       0       0       0       0)
0x00111170 OutputDev::updateLineJoin(GfxState*)                        (Quality:       0       0       0       0       0       0)
0x00111180 OutputDev::updateLineCap(GfxState*)                         (Quality:       0       0       0       0       0       0)
0x00111190 OutputDev::updateMiterLimit(GfxState*)                      (Quality:       0       0       0       0       0       0)
0x001111a0 OutputDev::updateLineWidth(GfxState*)                       (Quality:       0       0       0       0       0       0)
0x001111b0 OutputDev::updateStrokeAdjust(GfxState*)                    (Quality:       0       0       0       0       0       0)
0x001111c0 OutputDev::updateFillColorSpace(GfxState*)                  (Quality:       0       0       0       0       0       0)
0x001111d0 OutputDev::updateStrokeColorSpace(GfxState*)                (Quality:       0       0       0       0       0       0)
0x001111e0 OutputDev::updateFillColor(GfxState*)                       (Quality:       0       0       0       0       0       0)
0x001111f0 OutputDev::updateStrokeColor(GfxState*)                     (Quality:       0       0       0       0       0       0)
0x00111200 OutputDev::updateBlendMode(GfxState*)                       (Quality:       0       0       0       0       0       0)
0x00111210 OutputDev::updateFillOpacity(GfxState*)                     (Quality:       0       0       0       0       0       0)
0x00111220 OutputDev::updateStrokeOpacity(GfxState*)                   (Quality:       0       0       0       0       0       0)
0x00111230 OutputDev::updateFillOverprint(GfxState*)                   (Quality:       0       0       0       0       0       0)
0x00111240 OutputDev::updateStrokeOverprint(GfxState*)                 (Quality:       0       0       0       0       0       0)
0x00111250 OutputDev::updateOverprintMode(GfxState*)                   (Quality:       0       0       0       0       0       0)
0x00111260 OutputDev::updateTransfer(GfxState*)                        (Quality:       0       0       0       0       0       0)
0x00111270 OutputDev::updateFont(GfxState*)                            (Quality:       0       0       0       0       0       0)
0x00111280 OutputDev::stroke(GfxState*)                                (Quality:       0       0       0       0       0       0)
0x00111290 OutputDev::fill(GfxState*)                                  (Quality:       0       0       0       0       0       0)
0x001112a0 OutputDev::eoFill(GfxState*)                                (Quality:       0       0       0       0       0       0)
0x001112b0 OutputDev::tilingPatternFill(GfxState*, Gfx*, Catalog*, Object*, double*, int, int, Dict*, double*, double*, int, int, int, int, double, double) (Quality:       0       0       0       0       0       0)
0x001112c0 OutputDev::axialShadedFill(GfxState*, GfxAxialShading*, double, double) (Quality:       0       0       0       0       0       0)
0x001112d0 OutputDev::radialShadedFill(GfxState*, GfxRadialShading*, double, double) (Quality:       0       0       0       0       0       0)
0x001112e0 OutputDev::gouraudTriangleShadedFill(GfxState*, GfxGouraudTriangleShading*) (Quality:       0       0       0       0       0       0)
0x001112f0 OutputDev::clip(GfxState*)                                  (Quality:       0       0       0       0       0       0)
0x00111300 OutputDev::eoClip(GfxState*)                                (Quality:       0       0       0       0       0       0)
0x00111310 OutputDev::clipToStrokePath(GfxState*)                      (Quality:       0       0       0       0       0       0)
0x00111320 OutputDev::drawChar(GfxState*, double, double, double, double, double, double, unsigned int, int, unsigned int*, int) (Quality:       0       0       0       0       0       0)
0x00111330 OutputDev::endType3Char(GfxState*)                          (Quality:       0       0       0       0       0       0)
0x00111340 OutputDev::beginTextObject(GfxState*)                       (Quality:       0       0       0       0       0       0)
0x00111350 OutputDev::endTextObject(GfxState*)                         (Quality:       0       0       0       0       0       0)
0x00111360 OutputDev::type3D0(GfxState*, double, double)               (Quality:       0       0       0       0       0       0)
0x00111370 OutputDev::type3D1(GfxState*, double, double, double, double, double, double) (Quality:       0       0       0       0       0       0)
0x00111380 OutputDev::beginTransparencyGroup(GfxState*, double*, GfxColorSpace*, bool, bool, bool) (Quality:       0       0       0       0       0       0)
0x00111390 OutputDev::endTransparencyGroup(GfxState*)                  (Quality:       0       0       0       0       0       0)
0x001113a0 OutputDev::paintTransparencyGroup(GfxState*, double*)       (Quality:       0       0       0       0       0       0)
0x001113b0 OutputDev::setSoftMask(GfxState*, double*, bool, Function*, GfxColor*) (Quality:       0       0       0       0       0       0)
0x001113c0 OutputDev::clearSoftMask(GfxState*)                         (Quality:       0       0       0       0       0       0)
0x001113d0 OutputDev::getVectorAntialias()                             (Quality:       0       0       0       0       0       0)
0x001113e0 OutputDev::setVectorAntialias(bool)                         (Quality:       0       0       0       0       0       0)
0x001113f0 Object::getNum()                                            (Quality:       0       0       0       0       0       0)
0x00111460 Stream::toUnsignedChars(int*, int, int)                     (Quality:       0       0       0       0       0       0)
0x000b4cb0 FixedLengthEncoder::~FixedLengthEncoder()@plt               (Quality:       0       0       0       0       0       0)
0x001115c0 GfxCIDFont::getWMode()                                      (Quality:       0       0       0       0       0       0)
0x001115e0 Gfx8BitFont::getNextChar(char*, int, unsigned int*, unsigned int**, int*, double*, double*, double*, double*) (Quality:       0       0       0  100000  100000  100000)
0x00111640 parseNumericName(char*, bool, unsigned int*)                (Quality:       0       0       0       0       0       0)
0x00111760 parseCharName(char*, unsigned int*, int, bool, bool, bool, bool, bool) (Quality:       0       0       0       0       0       0)
0x00111be0 Gfx8BitFont::getToUnicode()                                 (Quality:       0       0       0       0       0       0)
0x00111c00 GfxCIDFont::getToUnicode()                                  (Quality:       0       0       0       0       0       0)
0x00111c30 GfxCIDFont::getNextChar(char*, int, unsigned int*, unsigned int**, int*, double*, double*, double*, double*) (Quality:       0       0       0       0       0       0)
0x00111ec0 Object::getName() [clone .isra.16]                          (Quality:       0       0       0       0       0       0)
0x00111f00 Object::arrayGetLength() [clone .isra.21]                   (Quality:       0       0       0       0       0       0)
0x00111f40 void std::__unguarded_linear_insert<GfxFontCIDWidthExcep*, __gnu_cxx::__ops::_Val_comp_iter<cmpWidthExcepFunctor> >(GfxFontCIDWidthExcep*, __gnu_cxx::__ops::_Val_comp_iter<cmpWidthExcepFunctor>) [clone .isra.57] (Quality:       0       0       0       0       0       0)
0x00111f90 void std::__unguarded_linear_insert<GfxFontCIDWidthExcepV*, __gnu_cxx::__ops::_Val_comp_iter<cmpWidthExcepVFunctor> >(GfxFontCIDWidthExcepV*, __gnu_cxx::__ops::_Val_comp_iter<cmpWidthExcepVFunctor>) [clone .isra.61] (Quality:       0       0       0       0       0       0)
0x00112000 void std::__insertion_sort<GfxFontCIDWidthExcepV*, __gnu_cxx::__ops::_Iter_comp_iter<cmpWidthExcepVFunctor> >(GfxFontCIDWidthExcepV*, GfxFontCIDWidthExcepV*, __gnu_cxx::__ops::_Iter_comp_iter<cmpWidthExcepVFunctor>) [clone .isra.67] (Quality:       0       0       0       0       0       0)
0x001120e0 GfxFontLoc::GfxFontLoc()                                    (Quality:       0       0       0       9       9       9)
0x00112100 GfxFontLoc::~GfxFontLoc()                                   (Quality:       0       0       0       9       9       9)
0x000b4ca0 AnnotWidget::drawFormFieldButton(GfxResources*, GooString*)@plt (Quality:       0       0       0       0       0       0)
0x000b4c90 GfxGouraudTriangleShading::getTriangle(int, double*, double*, GfxColor*, double*, double*, GfxColor*, double*, double*, GfxColor*)@plt (Quality:       0       0       0       0       0       0)
0x000b4c80 CMap::match(GooString*, GooString*)@plt                     (Quality:       0       0       0       0       0       0)
0x000b4c70 cmsOpenProfileFromMem@plt                                   (Quality:       0       0       0       0       0       0)
0x001123a0 GfxCIDFont::~GfxCIDFont()                                   (Quality:       0       0       0       0       0       0)
0x00112430 GfxCIDFont::~GfxCIDFont()                                   (Quality:       0       0       0       0       0       0)
0x00112450 GfxFont::~GfxFont()                                         (Quality:       0       0       0       0       0       0)
0x000b4c60 AnnotLink::AnnotLink(PDFDoc*, Dict*, Object*)@plt           (Quality:       0       0       0       0       0       0)
0x000b4c50 SplashBitmap::getXBGRLine(int, unsigned char*)@plt          (Quality:       0       0       0       0       0       0)
0x000b4c40 ASCII85Encoder::fillBuf()@plt                               (Quality:       0       0       0   13440   13440   13440)
0x000b4c30 RunLengthEncoder::fillBuf()@plt                             (Quality:       0       0       0       0       0       0)
0x000b4c20 NameTree::parse(Object*)@plt                                (Quality:       0       0       0       0       0       0)
0x001137e0 GfxFont::getExternalFont(GooString*, bool)                  (Quality:       0       0       0       0       0       0)
0x001138c0 GfxFont::locateBase14Font(GooString*)                       (Quality:       0       0       0       0       0       0)
0x000b4c10 void std::__introsort_loop<SplashIntersect*, long, __gnu_cxx::__ops::_Iter_comp_iter<cmpIntersectFunctor> >(SplashIntersect*, SplashIntersect*, long, __gnu_cxx::__ops::_Iter_comp_iter<cmpIntersectFunctor>)@plt (Quality:       0       0       0       0       0       0)
0x00113b00 GfxFont::getAlternateName(char const*)                      (Quality:       0       0       0       0       0       0)
0x000b4bf0 TextLine::coalesce(UnicodeMap*)@plt                         (Quality:       0       0       0       0       0       0)
0x001152f0 Gfx8BitFont::getCodeToGIDMap(FoFiTrueType*)                 (Quality:       0       0       0       0       0       0)
0x00115600 Gfx8BitFont::getCharProcs()                                 (Quality:       0       0       0       0       0       0)
0x00115620 Gfx8BitFont::getCharProc(int, Object*)                      (Quality:       0       0       0       0       0       0)
0x00115670 Gfx8BitFont::getResources()                                 (Quality:       0       0       0       0       0       0)
0x00115690 GfxCIDFont::getCollection()                                 (Quality:       0       0       0       0       0       0)
0x001156b0 GfxFont::locateFont(XRef*, PSOutputDev*)                    (Quality:       0       0       0       9       9       9)
0x00115ed0 GfxCIDFont::mapCodeToGID(FoFiTrueType*, int, unsigned int, bool) (Quality:       0       0       0       0       0       0)
0x00115f10 GfxCIDFont::getCodeToGIDMap(FoFiTrueType*, int*)            (Quality:       0       0       0       0       0       0)
0x001165c0 GfxCIDFont::getWidth(char*, int)                            (Quality:       0       0       0       0       0       0)
0x000b4be0 Catalog::~Catalog()@plt                                     (Quality:       0       0       0       1       1       1)
0x000b4bd0 Catalog::getEmbeddedFileNameTree()@plt                      (Quality:       0       0       0       0       0       0)
0x00116720 GfxCIDFont::GfxCIDFont(XRef*, char const*, Ref, GooString*, GfxFontType, Ref, Dict*) (Quality:       0       0       0       0       0       0)
0x000b4bc0 FormFieldChoice::toggle(int)@plt                            (Quality:       0       0       0       0       0       0)
0x000b4bb0 GlobalParams::getCMap(GooString*, GooString*, Stream*)@plt  (Quality:       0       0       0       0       0       0)
0x00117ff0 GfxFont::getWMode()                                         (Quality:       0       0       0  100000  100000  100000)
0x00118000 GfxCIDFont::isCIDFont()                                     (Quality:       0       0       0       0       0       0)
0x00118010 void std::__adjust_heap<GfxFontCIDWidthExcep*, long, GfxFontCIDWidthExcep, __gnu_cxx::__ops::_Iter_comp_iter<cmpWidthExcepFunctor> >(GfxFontCIDWidthExcep*, long, long, GfxFontCIDWidthExcep, __gnu_cxx::__ops::_Iter_comp_iter<cmpWidthExcepFunctor>) (Quality:       0       0       0       0       0       0)
0x00118170 void std::__heap_select<GfxFontCIDWidthExcep*, __gnu_cxx::__ops::_Iter_comp_iter<cmpWidthExcepFunctor> >(GfxFontCIDWidthExcep*, GfxFontCIDWidthExcep*, GfxFontCIDWidthExcep*, __gnu_cxx::__ops::_Iter_comp_iter<cmpWidthExcepFunctor>) (Quality:       0       0       0       0       0       0)
0x00118260 void std::__introsort_loop<GfxFontCIDWidthExcep*, long, __gnu_cxx::__ops::_Iter_comp_iter<cmpWidthExcepFunctor> >(GfxFontCIDWidthExcep*, GfxFontCIDWidthExcep*, long, __gnu_cxx::__ops::_Iter_comp_iter<cmpWidthExcepFunctor>) (Quality:       0       0       0       0       0       0)
0x00118480 void std::__adjust_heap<GfxFontCIDWidthExcepV*, long, GfxFontCIDWidthExcepV, __gnu_cxx::__ops::_Iter_comp_iter<cmpWidthExcepVFunctor> >(GfxFontCIDWidthExcepV*, long, long, GfxFontCIDWidthExcepV, __gnu_cxx::__ops::_Iter_comp_iter<cmpWidthExcepVFunctor>) (Quality:       0       0       0       0       0       0)
0x00118660 void std::__heap_select<GfxFontCIDWidthExcepV*, __gnu_cxx::__ops::_Iter_comp_iter<cmpWidthExcepVFunctor> >(GfxFontCIDWidthExcepV*, GfxFontCIDWidthExcepV*, GfxFontCIDWidthExcepV*, __gnu_cxx::__ops::_Iter_comp_iter<cmpWidthExcepVFunctor>) (Quality:       0       0       0       0       0       0)
0x00118790 void std::__introsort_loop<GfxFontCIDWidthExcepV*, long, __gnu_cxx::__ops::_Iter_comp_iter<cmpWidthExcepVFunctor> >(GfxFontCIDWidthExcepV*, GfxFontCIDWidthExcepV*, long, __gnu_cxx::__ops::_Iter_comp_iter<cmpWidthExcepVFunctor>) (Quality:       0       0       0       0       0       0)
0x00118a70 GfxColorSpace::createMapping(GooList*, int)                 (Quality:       0       0       0       0       0       0)
0x00118a80 GfxColorSpace::getDefaultRanges(double*, double*, int)      (Quality:       0       0       0       2       2       2)
0x00118ae0 getCMSColorSpaceType(cmsColorSpaceSignature)                (Quality:       0       0       0       0       0       0)
0x00118bc0 getCMSNChannels(cmsColorSpaceSignature)                     (Quality:       0       0       0       0       0       0)
0x00118cf0 GfxDeviceGrayColorSpace::getGray(GfxColor*, int*)           (Quality:       0       0       0       0       0       0)
0x000b4ba0 FormField::~FormField()@plt                                 (Quality:       0       0       0       0       0       0)
0x00118d40 GfxDeviceGrayColorSpace::getRGBLine(unsigned char*, unsigned int*, int) (Quality:       0       0       0       0       0       0)
0x00118d80 GfxDeviceGrayColorSpace::getRGBLine(unsigned char*, unsigned char*, int) (Quality:       0       0       0       0       0       0)
0x00118dc0 GfxDeviceGrayColorSpace::getRGBXLine(unsigned char*, unsigned char*, int) (Quality:       0       0       0       0       0       0)
0x00118e00 GfxDeviceGrayColorSpace::getCMYKLine(unsigned char*, unsigned char*, int) (Quality:       0       0       0       0       0       0)
0x00118e30 GfxDeviceGrayColorSpace::getDeviceNLine(unsigned char*, unsigned char*, int) (Quality:       0       0       0       0       0       0)
0x00118e80 GfxDeviceGrayColorSpace::getCMYK(GfxColor*, GfxCMYK*)       (Quality:       0       0       0       0       0       0)
0x00118ec0 GfxDeviceGrayColorSpace::getDeviceN(GfxColor*, GfxColor*)   (Quality:       0       0       0       0       0       0)
0x00118f00 GfxDeviceGrayColorSpace::getDefaultColor(GfxColor*)         (Quality:       0       0       0       0       0       0)
0x00118f10 GfxCalGrayColorSpace::getDeviceN(GfxColor*, GfxColor*)      (Quality:       0       0       0       0       0       0)
0x00118f60 GfxCalGrayColorSpace::getDefaultColor(GfxColor*)            (Quality:       0       0       0       0       0       0)
0x00118f70 GfxDeviceRGBColorSpace::getGray(GfxColor*, int*)            (Quality:       0       0       0       0       0       0)
0x00118fe0 GfxDeviceRGBColorSpace::getGrayLine(unsigned char*, unsigned char*, int) (Quality:       0       0       0       0       0       0)
0x00119030 GfxDeviceRGBColorSpace::getRGB(GfxColor*, GfxRGB*)          (Quality:       0       0       0       0       0       0)
0x00119080 GfxDeviceRGBColorSpace::getRGBLine(unsigned char*, unsigned int*, int) (Quality:       0       0       0       0       0       0)
0x001190c0 GfxDeviceRGBColorSpace::getRGBLine(unsigned char*, unsigned char*, int) (Quality:       0       0       0       0       0       0)
0x00119100 GfxDeviceRGBColorSpace::getRGBXLine(unsigned char*, unsigned char*, int) (Quality:       0       0       0       0       0       0)
0x00119140 GfxDeviceRGBColorSpace::getCMYKLine(unsigned char*, unsigned char*, int) (Quality:       0       0       0       0       0       0)
0x00119210 GfxDeviceRGBColorSpace::getDeviceNLine(unsigned char*, unsigned char*, int) (Quality:       0       0       0       0       0       0)
0x00119310 GfxDeviceRGBColorSpace::getCMYK(GfxColor*, GfxCMYK*)        (Quality:       0       0       0       0       0       0)
0x00119380 GfxDeviceRGBColorSpace::getDeviceN(GfxColor*, GfxColor*)    (Quality:       0       0       0       0       0       0)
0x001193d0 GfxDeviceRGBColorSpace::getDefaultColor(GfxColor*)          (Quality:       0       0       0       0       0       0)
0x001193f0 GfxCalRGBColorSpace::getDeviceN(GfxColor*, GfxColor*)       (Quality:       0       0       0       0       0       0)
0x00119440 GfxCalRGBColorSpace::getDefaultColor(GfxColor*)             (Quality:       0       0       0       0       0       0)
0x00119460 GfxDeviceCMYKColorSpace::getGray(GfxColor*, int*)           (Quality:       0       0       0       0       0       0)
0x001194e0 GfxDeviceCMYKColorSpace::getCMYKLine(unsigned char*, unsigned char*, int) (Quality:       0       0       0       0       0       0)
0x00119520 GfxDeviceCMYKColorSpace::getDeviceNLine(unsigned char*, unsigned char*, int) (Quality:       0       0       0       0       0       0)
0x00119580 GfxDeviceCMYKColorSpace::getCMYK(GfxColor*, GfxCMYK*)       (Quality:       0       0       0       0       0       0)
0x001195e0 GfxDeviceCMYKColorSpace::getDeviceN(GfxColor*, GfxColor*)   (Quality:       0       0       0       0       0       0)
0x00119660 GfxDeviceCMYKColorSpace::getDefaultColor(GfxColor*)         (Quality:       0       0       0       0       0       0)
0x00119680 GfxLabColorSpace::getDeviceN(GfxColor*, GfxColor*)          (Quality:       0       0       0       0       0       0)
0x001196d0 GfxLabColorSpace::getDefaultRanges(double*, double*, int)   (Quality:       0       0       0       0       0       0)
0x00119720 GfxICCBasedColorSpace::getDeviceN(GfxColor*, GfxColor*)     (Quality:       0       0       0       0       0       0)
0x00119770 GfxICCBasedColorSpace::getDefaultColor(GfxColor*)           (Quality:       0       0       0       0       0       0)
0x001197e0 GfxICCBasedColorSpace::getDefaultRanges(double*, double*, int) (Quality:       0       0       0       0       0       0)
0x001197f0 GfxIndexedColorSpace::getDefaultColor(GfxColor*)            (Quality:       0       0       0       0       0       0)
0x00119800 GfxIndexedColorSpace::getDefaultRanges(double*, double*, int) (Quality:       0       0       0       0       0       0)
0x00119820 GfxSeparationColorSpace::getGray(GfxColor*, int*)           (Quality:       0       0       0       0       0       0)
0x001198c0 GfxSeparationColorSpace::getRGB(GfxColor*, GfxRGB*)         (Quality:       0       0       0       0       0       0)
0x00119960 GfxSeparationColorSpace::getCMYK(GfxColor*, GfxCMYK*)       (Quality:       0       0       0       0       0       0)
0x00119a00 GfxSeparationColorSpace::getDefaultColor(GfxColor*)         (Quality:       0       0       0       0       0       0)
0x00119a10 GfxDeviceNColorSpace::getGray(GfxColor*, int*)              (Quality:       0       0       0       0       0       0)
0x00119af0 GfxDeviceNColorSpace::getRGB(GfxColor*, GfxRGB*)            (Quality:       0       0       0       0       0       0)
0x00119bd0 GfxDeviceNColorSpace::getCMYK(GfxColor*, GfxCMYK*)          (Quality:       0       0       0       0       0       0)
0x00119cb0 GfxDeviceNColorSpace::getDefaultColor(GfxColor*)            (Quality:       0       0       0       0       0       0)
0x00119ce0 GfxPatternColorSpace::getGray(GfxColor*, int*)              (Quality:       0       0       0       0       0       0)
0x00119cf0 GfxPatternColorSpace::getRGB(GfxColor*, GfxRGB*)            (Quality:       0       0       0       0       0       0)
0x00119d10 GfxPatternColorSpace::getCMYK(GfxColor*, GfxCMYK*)          (Quality:       0       0       0       0       0       0)
0x00119d30 GfxPatternColorSpace::getDeviceN(GfxColor*, GfxColor*)      (Quality:       0       0       0       0       0       0)
0x00119d60 GfxPatternColorSpace::getDefaultColor(GfxColor*)            (Quality:       0       0       0       0       0       0)
0x00119d70 GfxAxialShading::getParameterRange(double*, double*, double, double, double, double) (Quality:       0       0       0       0       0       0)
0x00119e90 GfxAxialShading::getDistance(double, double)                (Quality:       0       0       0       0       0       0)
0x00119f00 GfxRadialShading::getDistance(double, double)               (Quality:       0       0       0       0       0       0)
0x00119fe0 CMSError(_cmsContext_struct*, unsigned int, char const*)    (Quality:       0       0       0       0       0       0)
0x0011a000 GfxDeviceGrayColorSpace::getGrayLine(unsigned char*, unsigned char*, int) (Quality:       0       0       0       0       0       0)
0x0011a010 GfxIndexedColorSpace::getRGBLine(unsigned char*, unsigned int*, int) (Quality:       0       0       0       0       0       0)
0x0011a0d0 GfxIndexedColorSpace::getRGBLine(unsigned char*, unsigned char*, int) (Quality:       0       0       0       0       0       0)
0x0011a190 GfxIndexedColorSpace::getRGBXLine(unsigned char*, unsigned char*, int) (Quality:       0       0       0       0       0       0)
0x0011a250 GfxIndexedColorSpace::getCMYKLine(unsigned char*, unsigned char*, int) (Quality:       0       0       0       0       0       0)
0x0011a310 GfxIndexedColorSpace::getDeviceNLine(unsigned char*, unsigned char*, int) (Quality:       0       0       0       0       0       0)
0x0011a3d0 GfxLabColorSpace::getDefaultColor(GfxColor*)                (Quality:       0       0       0       0       0       0)
0x0011a440 GfxICCBasedColorSpace::useGetRGBLine()                      (Quality:       0       0       0       0       0       0)
0x0011a460 GfxICCBasedColorSpace::useGetCMYKLine()                     (Quality:       0       0       0       0       0       0)
0x0011a480 GfxICCBasedColorSpace::useGetDeviceNLine()                  (Quality:       0       0       0       0       0       0)
0x0011a4a0 GfxSeparationColorSpace::getDeviceN(GfxColor*, GfxColor*)   (Quality:       0       0       0       0       0       0)
0x0011a510 GfxDeviceNColorSpace::getDeviceN(GfxColor*, GfxColor*)      (Quality:       0       0       0       0       0       0)
0x0011a5a0 radialExtendRange(double*, double, bool) [clone .part.6]    (Quality:       0       0       0       0       0       0)
0x0011a5d0 loadColorProfile(char const*)                               (Quality:       0       0       0       2       2       2)
0x0011a6a0 Object::getArray() [clone .isra.27]                         (Quality:       0       0       0       0       0       0)
0x0011a6e0 GfxSeparationColorSpace::createMapping(GooList*, int)       (Quality:       0       0       0       0       0       0)
0x0011a880 GfxRadialShading::getParameterRange(double*, double*, double, double, double, double) (Quality:       0       0       0       0       0       0)
0x0011c240 GfxDeviceCMYKColorSpace::getRGB(GfxColor*, GfxRGB*)         (Quality:       0       0       0       0       0       0)
0x0011c560 GfxDeviceCMYKColorSpace::getRGBLine(unsigned char*, unsigned char*, int) (Quality:       0       0       0       0       0       0)
0x0011c930 GfxDeviceCMYKColorSpace::getRGBXLine(unsigned char*, unsigned char*, int) (Quality:       0       0       0       0       0       0)
0x0011cd10 GfxDeviceCMYKColorSpace::getRGBLine(unsigned char*, unsigned int*, int) (Quality:       0       0       0       0       0       0)
0x0011d0f0 Matrix::invertTo(Matrix*) const                             (Quality:       0       0       0       0       0       0)
0x0011d1a0 Matrix::transform(double, double, double*, double*) const   (Quality:       0       0       0       0       0       0)
0x0011d1e0 Matrix::norm() const                                        (Quality:       0       0       0       0       0       0)
0x0011d290 GfxColorTransform::doTransform(void*, void*, unsigned int)  (Quality:       0       0       0       0       0       0)
0x0011d2a0 GfxICCBasedColorSpace::getRGBLine(unsigned char*, unsigned int*, int) (Quality:       0       0       0       0       0       0)
0x0011d340 GfxICCBasedColorSpace::getRGBLine(unsigned char*, unsigned char*, int) (Quality:       0       0       0       0       0       0)
0x0011d770 GfxICCBasedColorSpace::getRGBXLine(unsigned char*, unsigned char*, int) (Quality:       0       0       0       0       0       0)
0x0011d830 GfxICCBasedColorSpace::getCMYKLine(unsigned char*, unsigned char*, int) (Quality:       0       0       0       0       0       0)
0x0011d9c0 GfxICCBasedColorSpace::getDeviceNLine(unsigned char*, unsigned char*, int) (Quality:       0       0       0       0       0       0)
0x0011dbe0 GfxColorTransform::GfxColorTransform(void*, int, unsigned int, unsigned int) (Quality:       0       0       0       0       0       0)
0x0011dc00 GfxColorTransform::~GfxColorTransform()                     (Quality:       0       0       0       0       0       0)
0x0011dc10 GfxColorTransform::ref()                                    (Quality:       0       0       0       0       0       0)
0x0011dc20 GfxColorTransform::unref()                                  (Quality:       0       0       0       0       0       0)
0x0011dc30 GfxColorSpace::setDisplayProfile(void*)                     (Quality:       0       0       0       0       0       0)
0x0011dd20 GfxColorSpace::setDisplayProfileName(GooString*)            (Quality:       0       0       0       0       0       0)
0x0011dd50 GfxColorSpace::getRGBProfile()                              (Quality:       0       0       0       0       0       0)
0x0011dd60 GfxColorSpace::getDisplayProfile()                          (Quality:       0       0       0       0       0       0)
0x000b4b90 FormField::createWidgetAnnotations()@plt                    (Quality:       0       0       0       0       0       0)
0x000b4b80 Gfx::contentIsHidden()@plt                                  (Quality:       0       0       0       0       0       0)
0x000b4b70 FoFiBase::getU32BE(int, bool*)@plt                          (Quality:       0       0       0       0       0       0)
0x000b4b60 AnnotScreen::~AnnotScreen()@plt                             (Quality:       0       0       0       0       0       0)
0x0011dde0 GfxCalGrayColorSpace::~GfxCalGrayColorSpace()               (Quality:       0       0       0       0       0       0)
0x0011de30 GfxCalGrayColorSpace::~GfxCalGrayColorSpace()               (Quality:       0       0       0       0       0       0)
0x0011de50 GfxDeviceRGBColorSpace::~GfxDeviceRGBColorSpace()           (Quality:       0       0       0       2       2       2)
0x0011de70 GfxDeviceRGBColorSpace::~GfxDeviceRGBColorSpace()           (Quality:       0       0       0       2       2       2)
0x0011de90 GfxCalRGBColorSpace::~GfxCalRGBColorSpace()                 (Quality:       0       0       0       0       0       0)
0x0011def0 GfxCalRGBColorSpace::~GfxCalRGBColorSpace()                 (Quality:       0       0       0       0       0       0)
0x0011df10 GfxDeviceCMYKColorSpace::~GfxDeviceCMYKColorSpace()         (Quality:       0       0       0       0       0       0)
0x0011df30 GfxDeviceCMYKColorSpace::~GfxDeviceCMYKColorSpace()         (Quality:       0       0       0       0       0       0)
0x0011df50 GfxLabColorSpace::~GfxLabColorSpace()                       (Quality:       0       0       0       0       0       0)
0x0011dfb0 GfxLabColorSpace::~GfxLabColorSpace()                       (Quality:       0       0       0       0       0       0)
0x0011dfd0 GfxIndexedColorSpace::~GfxIndexedColorSpace()               (Quality:       0       0       0       0       0       0)
0x0011e010 GfxIndexedColorSpace::~GfxIndexedColorSpace()               (Quality:       0       0       0       0       0       0)
0x0011e030 GfxSeparationColorSpace::~GfxSeparationColorSpace()         (Quality:       0       0       0       0       0       0)
0x0011e0a0 GfxSeparationColorSpace::~GfxSeparationColorSpace()         (Quality:       0       0       0       0       0       0)
0x0011e0c0 GfxDeviceNColorSpace::~GfxDeviceNColorSpace()               (Quality:       0       0       0       0       0       0)
0x0011e1e0 GfxDeviceNColorSpace::~GfxDeviceNColorSpace()               (Quality:       0       0       0       0       0       0)
0x0011e200 GfxPatternColorSpace::~GfxPatternColorSpace()               (Quality:       0       0       0       0       0       0)
0x0011e230 GfxPatternColorSpace::~GfxPatternColorSpace()               (Quality:       0       0       0       0       0       0)
0x0011e250 GfxColorSpace::~GfxColorSpace()                             (Quality:       0       0       0       0       0       0)
0x0011e270 GfxColorSpace::getNumColorSpaceModes()                      (Quality:       0       0       0       0       0       0)
0x0011e280 GfxColorSpace::getColorSpaceModeName(int)                   (Quality:       0       0       0       0       0       0)
0x000b4b40 jpeg_destroy_decompress@plt                                 (Quality:       0       0       0       3       3       3)
0x000b4b30 GfxState::concatCTM(double, double, double, double, double, double)@plt (Quality:       0       0       0       4       4       4)
0x000b4b20 Splash::blitImageClipped(SplashBitmap*, bool, int, int, int, int, int, int)@plt (Quality:       0       0       0       0       0       0)
0x0011e460 GfxCalGrayColorSpace::GfxCalGrayColorSpace()                (Quality:       0       0       0       0       0       0)
0x0011e4b0 GfxCalGrayColorSpace::copy()                                (Quality:       0       0       0       0       0       0)
0x0011e540 GfxCalGrayColorSpace::getXYZ(GfxColor*, double*, double*, double*) (Quality:       0       0       0       0       0       0)
0x0011e580 GfxCalGrayColorSpace::getGray(GfxColor*, int*) [clone .part.77] (Quality:       0       0       0       0       0       0)
0x0011e680 GfxCalGrayColorSpace::getGray(GfxColor*, int*)              (Quality:       0       0       0       0       0       0)
0x0011e720 GfxCalGrayColorSpace::getRGB(GfxColor*, GfxRGB*)            (Quality:       0       0       0       0       0       0)
0x0011eab0 GfxCalGrayColorSpace::getCMYK(GfxColor*, GfxCMYK*)          (Quality:       0       0       0       0       0       0)
0x0011ec80 GfxDeviceRGBColorSpace::GfxDeviceRGBColorSpace()            (Quality:       0       0       0       2       2       2)
0x0011eca0 GfxDeviceRGBColorSpace::copy()                              (Quality:       0       0       0       0       0       0)
0x0011ecc0 GfxCalRGBColorSpace::GfxCalRGBColorSpace()                  (Quality:       0       0       0       0       0       0)
0x0011ed50 GfxCalRGBColorSpace::copy()                                 (Quality:       0       0       0       0       0       0)
0x0011ee10 GfxCalRGBColorSpace::getXYZ(GfxColor*, double*, double*, double*) (Quality:       0       0       0       0       0       0)
0x0011ef20 GfxCalRGBColorSpace::getGray(GfxColor*, int*) [clone .part.78] (Quality:       0       0       0       0       0       0)
0x0011f020 GfxCalRGBColorSpace::getGray(GfxColor*, int*)               (Quality:       0       0       0       0       0       0)
0x0011f0c0 GfxCalRGBColorSpace::getRGB(GfxColor*, GfxRGB*)             (Quality:       0       0       0       0       0       0)
0x0011f3d0 GfxCalRGBColorSpace::getCMYK(GfxColor*, GfxCMYK*)           (Quality:       0       0       0       0       0       0)
0x0011f5a0 GfxDeviceCMYKColorSpace::GfxDeviceCMYKColorSpace()          (Quality:       0       0       0       0       0       0)
0x0011f5c0 GfxDeviceCMYKColorSpace::copy()                             (Quality:       0       0       0       0       0       0)
0x0011f5e0 GfxLabColorSpace::GfxLabColorSpace()                        (Quality:       0       0       0       0       0       0)
0x0011f650 GfxLabColorSpace::copy()                                    (Quality:       0       0       0       0       0       0)
0x0011f720 GfxLabColorSpace::getXYZ(GfxColor*, double*, double*, double*) (Quality:       0       0       0       0       0       0)
0x0011f820 GfxLabColorSpace::getGray(GfxColor*, int*) [clone .part.79] (Quality:       0       0       0       0       0       0)
0x0011f880 GfxLabColorSpace::getGray(GfxColor*, int*)                  (Quality:       0       0       0       0       0       0)
0x0011f920 GfxLabColorSpace::getRGB(GfxColor*, GfxRGB*)                (Quality:       0       0       0       0       0       0)
0x001200c0 GfxLabColorSpace::getCMYK(GfxColor*, GfxCMYK*)              (Quality:       0       0       0       0       0       0)
0x001201f0 GfxICCBasedColorSpace::GfxICCBasedColorSpace(int, GfxColorSpace*, Ref*) (Quality:       0       0       0       0       0       0)
0x001202b0 GfxICCBasedColorSpace::copy()                               (Quality:       0       0       0       0       0       0)
0x00120340 GfxIndexedColorSpace::GfxIndexedColorSpace(GfxColorSpace*, int) (Quality:       0       0       0       0       0       0)
0x001203a0 GfxIndexedColorSpace::copy()                                (Quality:       0       0       0       0       0       0)
0x00120410 GfxIndexedColorSpace::mapColorToBase(GfxColor*, GfxColor*)  (Quality:       0       0       0       0       0       0)
0x00120560 GfxIndexedColorSpace::getGray(GfxColor*, int*)              (Quality:       0       0       0       0       0       0)
0x001205a0 GfxIndexedColorSpace::getRGB(GfxColor*, GfxRGB*)            (Quality:       0       0       0       0       0       0)
0x001205e0 GfxIndexedColorSpace::getCMYK(GfxColor*, GfxCMYK*)          (Quality:       0       0       0       0       0       0)
0x00120620 GfxIndexedColorSpace::getDeviceN(GfxColor*, GfxColor*)      (Quality:       0       0       0       0       0       0)
0x00120660 GfxSeparationColorSpace::GfxSeparationColorSpace(GooString*, GfxColorSpace*, Function*) (Quality:       0       0       0       0       0       0)
0x00120770 GfxDeviceNColorSpace::createMapping(GooList*, int)          (Quality:       0       0       0       0       0       0)
0x00120bc0 GfxSeparationColorSpace::GfxSeparationColorSpace(GooString*, GfxColorSpace*, Function*, bool, unsigned int, int*) (Quality:       0       0       0       0       0       0)
0x00120c20 GfxSeparationColorSpace::copy()                             (Quality:       0       0       0       0       0       0)
0x00120cd0 GfxDeviceNColorSpace::GfxDeviceNColorSpace(int, GooString**, GfxColorSpace*, Function*, GooList*) (Quality:       0       0       0       0       0       0)
0x00120e20 GfxDeviceNColorSpace::GfxDeviceNColorSpace(int, GooString**, GfxColorSpace*, Function*, GooList*, int*, bool, unsigned int) (Quality:       0       0       0       0       0       0)
0x00120ee0 GfxDeviceNColorSpace::copy()                                (Quality:       0       0       0       0       0       0)
0x00121000 GfxPatternColorSpace::GfxPatternColorSpace(GfxColorSpace*)  (Quality:       0       0       0       0       0       0)
0x00121030 GfxPatternColorSpace::copy()                                (Quality:       0       0       0       0       0       0)
0x00121070 GfxPattern::GfxPattern(int)                                 (Quality:       0       0       0       0       0       0)
0x00121090 GfxPattern::~GfxPattern()                                   (Quality:       0       0       0       0       0       0)
0x001210a0 GfxTilingPattern::~GfxTilingPattern()                       (Quality:       0       0       0       0       0       0)
0x001210e0 GfxTilingPattern::~GfxTilingPattern()                       (Quality:       0       0       0       0       0       0)
0x00121100 GfxShadingPattern::~GfxShadingPattern()                     (Quality:       0       0       0       0       0       0)
0x00121130 GfxShadingPattern::~GfxShadingPattern()                     (Quality:       0       0       0       0       0       0)
0x00121150 GfxPattern::~GfxPattern()                                   (Quality:       0       0       0       0       0       0)
0x00121170 GfxTilingPattern::GfxTilingPattern(int, int, double*, double, double, Object*, double*, Object*) (Quality:       0       0       0       0       0       0)
0x00121270 GfxTilingPattern::parse(Object*)                            (Quality:       0       0       0       0       0       0)
0x00121870 GfxTilingPattern::copy()                                    (Quality:       0       0       0       0       0       0)
0x001218c0 GfxShadingPattern::GfxShadingPattern(GfxShading*, double*)  (Quality:       0       0       0       0       0       0)
0x00121910 GfxShadingPattern::copy()                                   (Quality:       0       0       0       0       0       0)
0x00121950 GfxShading::GfxShading(int)                                 (Quality:       0       0       0       0       0       0)
0x00121970 GfxShading::GfxShading(GfxShading*)                         (Quality:       0       0       0       0       0       0)
0x00121a20 GfxShading::~GfxShading()                                   (Quality:       0       0       0       0       0       0)
0x00121a50 GfxFunctionShading::~GfxFunctionShading()                   (Quality:       0       0       0       0       0       0)
0x00121ab0 GfxFunctionShading::~GfxFunctionShading()                   (Quality:       0       0       0       0       0       0)
0x00121ad0 GfxGouraudTriangleShading::~GfxGouraudTriangleShading()     (Quality:       0       0       0       0       0       0)
0x00121b50 GfxGouraudTriangleShading::~GfxGouraudTriangleShading()     (Quality:       0       0       0       0       0       0)
0x00121b70 GfxPatchMeshShading::~GfxPatchMeshShading()                 (Quality:       0       0       0       0       0       0)
0x00121be0 GfxPatchMeshShading::~GfxPatchMeshShading()                 (Quality:       0       0       0       0       0       0)
0x00121c00 GfxShading::~GfxShading()                                   (Quality:       0       0       0       0       0       0)
0x00121c20 GfxFunctionShading::GfxFunctionShading(double, double, double, double, double*, Function**, int) (Quality:       0       0       0       0       0       0)
0x00121d00 GfxFunctionShading::GfxFunctionShading(GfxFunctionShading*) (Quality:       0       0       0       0       0       0)
0x00121de0 GfxFunctionShading::copy()                                  (Quality:       0       0       0       0       0       0)
0x00121e10 GfxFunctionShading::getColor(double, double, GfxColor*)     (Quality:       0       0       0       0       0       0)
0x00121ee0 GfxUnivariateShading::GfxUnivariateShading(int, double, double, Function**, int, bool, bool) (Quality:       0       0       0       0       0       0)
0x00121fc0 GfxUnivariateShading::GfxUnivariateShading(GfxUnivariateShading*) (Quality:       0       0       0       0       0       0)
0x001220a0 GfxUnivariateShading::~GfxUnivariateShading()               (Quality:       0       0       0       0       0       0)
0x00122110 GfxAxialShading::~GfxAxialShading()                         (Quality:       0       0       0       0       0       0)
0x00122130 GfxAxialShading::~GfxAxialShading()                         (Quality:       0       0       0       0       0       0)
0x00122150 GfxRadialShading::~GfxRadialShading()                       (Quality:       0       0       0       0       0       0)
0x00122170 GfxRadialShading::~GfxRadialShading()                       (Quality:       0       0       0       0       0       0)
0x00122190 GfxUnivariateShading::~GfxUnivariateShading()               (Quality:       0       0       0       0       0       0)
0x001221b0 GfxUnivariateShading::getColor(double, GfxColor*)           (Quality:       0       0       0       0       0       0)
0x001224c0 GfxUnivariateShading::setupCache(Matrix const*, double, double, double, double) (Quality:       0       0       0       0       0       0)
0x00122910 GfxAxialShading::GfxAxialShading(double, double, double, double, double, double, Function**, int, bool, bool) (Quality:       0       0       0       0       0       0)
0x001229a0 GfxAxialShading::GfxAxialShading(GfxAxialShading*)          (Quality:       0       0       0       0       0       0)
0x00122a10 GfxAxialShading::copy()                                     (Quality:       0       0       0       0       0       0)
0x00122a40 GfxRadialShading::GfxRadialShading(double, double, double, double, double, double, double, double, Function**, int, bool, bool) (Quality:       0       0       0       0       0       0)
0x00122b00 GfxRadialShading::GfxRadialShading(GfxRadialShading*)       (Quality:       0       0       0       0       0       0)
0x00122b90 GfxRadialShading::copy()                                    (Quality:       0       0       0       0       0       0)
0x00122bc0 GfxShadingBitBuf::GfxShadingBitBuf(Stream*)                 (Quality:       0       0       0       0       0       0)
0x00122be0 GfxShadingBitBuf::~GfxShadingBitBuf()                       (Quality:       0       0       0       0       0       0)
0x00122bf0 GfxShadingBitBuf::getBits(int, unsigned int*)               (Quality:       0       0       0       0       0       0)
0x00122cc0 GfxShadingBitBuf::flushBits()                               (Quality:       0       0       0       0       0       0)
0x00122cd0 GfxGouraudTriangleShading::GfxGouraudTriangleShading(int, GfxGouraudVertex*, int, int (*) [3], int, Function**, int) (Quality:       0       0       0       0       0       0)
0x00122d80 GfxGouraudTriangleShading::GfxGouraudTriangleShading(GfxGouraudTriangleShading*) (Quality:       0       0       0       0       0       0)
0x00122e70 GfxGouraudTriangleShading::copy()                           (Quality:       0       0       0       0       0       0)
0x00122ea0 GfxGouraudTriangleShading::getTriangle(int, double*, double*, GfxColor*, double*, double*, GfxColor*, double*, double*, GfxColor*) (Quality:       0       0       0       0       0       0)
0x001231d0 GfxGouraudTriangleShading::getParameterizedColor(double, GfxColor*) (Quality:       0       0       0       0       0       0)
0x00123270 GfxGouraudTriangleShading::getTriangle(int, double*, double*, double*, double*, double*, double*, double*, double*, double*) (Quality:       0       0       0       0       0       0)
0x00123380 GfxPatchMeshShading::GfxPatchMeshShading(int, GfxPatch*, int, Function**, int) (Quality:       0       0       0       0       0       0)
0x00123400 GfxPatchMeshShading::GfxPatchMeshShading(GfxPatchMeshShading*) (Quality:       0       0       0       0       0       0)
0x001234a0 GfxPatchMeshShading::copy()                                 (Quality:       0       0       0       0       0       0)
0x001234d0 GfxPatchMeshShading::getParameterizedColor(double, GfxColor*) (Quality:       0       0       0       0       0       0)
0x00123570 GfxImageColorMap::GfxImageColorMap(int, Object*, GfxColorSpace*) (Quality:       0       0       0       2       2       2)
0x00123ec0 GfxImageColorMap::GfxImageColorMap(GfxImageColorMap*)       (Quality:       0       0       0       0       0       0)
0x001240f0 GfxImageColorMap::~GfxImageColorMap()                       (Quality:       0       0       0       2       2       2)
0x00124150 GfxImageColorMap::getGray(unsigned char*, int*)             (Quality:       0       0       0       0       0       0)
0x00124210 GfxImageColorMap::getRGB(unsigned char*, GfxRGB*)           (Quality:       0       0       0       0       0       0)
0x001242d0 GfxImageColorMap::getGrayLine(unsigned char*, unsigned char*, int) (Quality:       0       0       0       0       0       0)
0x001244a0 GfxImageColorMap::getRGBLine(unsigned char*, unsigned int*, int) (Quality:       0       0       0       0       0       0)
0x00124690 GfxImageColorMap::getRGBLine(unsigned char*, unsigned char*, int) (Quality:       0       0       0       0       0       0)
0x00124880 GfxImageColorMap::getRGBXLine(unsigned char*, unsigned char*, int) (Quality:       0       0       0       0       0       0)
0x00124a60 GfxImageColorMap::getCMYK(unsigned char*, GfxCMYK*)         (Quality:       0       0       0       0       0       0)
0x00124b20 GfxImageColorMap::getCMYKLine(unsigned char*, unsigned char*, int) (Quality:       0       0       0       0       0       0)
0x00124d30 GfxImageColorMap::getDeviceN(unsigned char*, GfxColor*)     (Quality:       0       0       0       0       0       0)
0x00124df0 GfxImageColorMap::getDeviceNLine(unsigned char*, unsigned char*, int) (Quality:       0       0       0       0       0       0)
0x00124fa0 GfxImageColorMap::getColor(unsigned char*, GfxColor*)       (Quality:       0       0       0       0       0       0)
0x000b4b10 BaseCryptStream::setAutoDelete(bool)@plt                    (Quality:       0       0       0       0       0       0)
0x000b4b00 JPXStream::JPXStream(Stream*)@plt                           (Quality:       0       0       0       0       0       0)
0x001250b0 GfxSubpath::GfxSubpath(GfxSubpath*)                         (Quality:       0       0       0       0       0       0)
0x000b4af0 XRef::readXRef(long long*, std::vector<long long, std::allocator<long long> >*, std::vector<int, std::allocator<int> >*)@plt (Quality:       0       0       0       1       1       1)
0x001251e0 GfxSubpath::curveTo(double, double, double, double, double, double) (Quality:       0       0       0       0       0       0)
0x001252e0 GfxSubpath::close()                                         (Quality:       0       0       0       8       8       8)
0x00125330 GfxSubpath::offset(double, double)                          (Quality:       0       0       0       0       0       0)
0x000b4ae0 TextLine::secondaryCmp(TextLine*)@plt                       (Quality:       0       0       0       0       0       0)
0x000b4ad0 Annot::drawCircleBottomRight(double, double, double)@plt    (Quality:       0       0       0       0       0       0)
0x00125420 GfxPath::GfxPath(bool, double, double, GfxSubpath**, int, int) (Quality:       0       0       0       0       0       0)
0x000b4ac0 FilterStream::close()@plt                                   (Quality:       0       0       0       0       0       0)
0x000b4ab0 Attribute::parseUserProperty(Dict*)@plt                     (Quality:       0       0       0       0       0       0)
0x00125660 GfxPath::curveTo(double, double, double, double, double, double) (Quality:       0       0       0       0       0       0)
0x00125890 GfxPath::close()                                            (Quality:       0       0       0       8       8       8)
0x00125920 GfxPath::append(GfxPath*)                                   (Quality:       0       0       0       0       0       0)
0x001259d0 GfxPath::offset(double, double)                             (Quality:       0       0       0       0       0       0)
0x00125a30 GfxState::ReusablePathIterator::ReusablePathIterator(GfxPath*) (Quality:       0       0       0       0       0       0)
0x00125a70 GfxState::ReusablePathIterator::isEnd() const               (Quality:       0       0       0       0       0       0)
0x00125a80 GfxState::ReusablePathIterator::next()                      (Quality:       0       0       0       0       0       0)
0x00125ac0 GfxState::ReusablePathIterator::setCoord(double, double)    (Quality:       0       0       0       0       0       0)
0x00125ae0 GfxState::ReusablePathIterator::reset()                     (Quality:       0       0       0       0       0       0)
0x000b4aa0 GfxFontLoc::GfxFontLoc()@plt                                (Quality:       0       0       0       9       9       9)
0x000b4a90 Gfx::doFunctionShFill(GfxFunctionShading*)@plt              (Quality:       0       0       0       0       0       0)
0x000b4a80 SplashPath::offset(double, double)@plt                      (Quality:       0       0       0       0       0       0)
0x00126410 GfxState::setDisplayProfile(void*)                          (Quality:       0       0       0       0       0       0)
0x001266a0 GfxState::getXYZ2DisplayTransform()                         (Quality:       0       0       0       0       0       0)
0x00126740 GfxCalGrayColorSpace::parse(Array*, GfxState*)              (Quality:       0       0       0       0       0       0)
0x00126df0 GfxCalRGBColorSpace::parse(Array*, GfxState*)               (Quality:       0       0       0       0       0       0)
0x001276c0 GfxLabColorSpace::parse(Array*, GfxState*)                  (Quality:       0       0       0       0       0       0)
0x00127e50 GfxState::setPath(GfxPath*)                                 (Quality:       0       0       0       0       0       0)
0x00127e90 GfxState::getUserClipBBox(double*, double*, double*, double*) (Quality:       0       0       0       0       0       0)
0x001280d0 GfxState::transformWidth(double)                            (Quality:       0       0       0       0       0       0)
0x00128140 GfxState::getTransformedFontSize()                          (Quality:       0       0       0       0       0       0)
0x000b4a70 XRef::markUnencrypted()@plt                                 (Quality:       0       0       0       0       0       0)
0x00128280 GfxState::setCTM(double, double, double, double, double, double) (Quality:       0       0       0       0       0       0)
0x001282a0 GfxState::concatCTM(double, double, double, double, double, double) (Quality:       0       0       0       4       4       4)
0x00128350 GfxState::shiftCTMAndClip(double, double)                   (Quality:       0       0       0       0       0       0)
0x001283c0 GfxState::setFillColorSpace(GfxColorSpace*)                 (Quality:       0       0       0       0       0       0)
0x001283f0 GfxState::setStrokeColorSpace(GfxColorSpace*)               (Quality:       0       0       0       0       0       0)
0x00128420 GfxState::setFillPattern(GfxPattern*)                       (Quality:       0       0       0       0       0       0)
0x00128450 GfxState::setStrokePattern(GfxPattern*)                     (Quality:       0       0       0       0       0       0)
0x000b4a60 SplashScreen::buildSCDMatrix(int)@plt                       (Quality:       0       0       0       0       0       0)
0x001284c0 GfxState::setTransfer(Function**)                           (Quality:       0       0       0       0       0       0)
0x00128500 GfxState::setLineDash(double*, int, double)                 (Quality:       0       0       0       0       0       0)
0x000b4a40 SplashPath::moveTo(double, double)@plt                      (Quality:       0       0       0       0       0       0)
0x001285a0 GfxState::clip()                                            (Quality:       0       0       0       8       8       8)
0x00128730 GfxState::clipToStrokePath()                                (Quality:       0       0       0       0       0       0)
0x00128950 GfxState::clipToRect(double, double, double, double)        (Quality:       0       0       0       0       0       0)
0x00128b60 GfxState::textShift(double, double)                         (Quality:       0       0       0  100000  100000  100000)
0x00128bc0 GfxState::shift(double, double)                             (Quality:       0       0       0  100000  100000  100000)
0x000b4a30 strstr@plt                                                  (Quality:       0       0       0       1       1       1)
0x000b4a10 FT_New_Size@plt                                             (Quality:       0       0       0       0       0       0)
0x00128cd0 GfxState::parseBlendMode(Object*, GfxBlendMode*)            (Quality:       0       0       0       0       0       0)
0x00128e80 GfxICCBasedColorSpace::~GfxICCBasedColorSpace()             (Quality:       0       0       0       0       0       0)
0x00128f20 GfxICCBasedColorSpace::~GfxICCBasedColorSpace()             (Quality:       0       0       0       0       0       0)
0x00128f40 GfxICCBasedColorSpace::parse(Array*, OutputDev*, GfxState*, int) (Quality:       0       0       0       0       0       0)
0x00129b10 GfxColorSpace::parse(GfxResources*, Object*, OutputDev*, GfxState*, int) (Quality:       0       0       0       2       2       2)
0x0012a350 GfxIndexedColorSpace::parse(GfxResources*, Array*, OutputDev*, GfxState*, int) (Quality:       0       0       0       0       0       0)
0x0012a790 GfxSeparationColorSpace::parse(GfxResources*, Array*, OutputDev*, GfxState*, int) (Quality:       0       0       0       0       0       0)
0x0012a9b0 GfxDeviceNColorSpace::parse(GfxResources*, Array*, OutputDev*, GfxState*, int) (Quality:       0       0       0       0       0       0)
0x0012ae70 GfxPatternColorSpace::parse(GfxResources*, Array*, OutputDev*, GfxState*, int) (Quality:       0       0       0       0       0       0)
0x0012af70 GfxShading::init(GfxResources*, Dict*, OutputDev*, GfxState*) (Quality:       0       0       0       0       0       0)
0x0012b4e0 GfxFunctionShading::parse(GfxResources*, Dict*, OutputDev*, GfxState*) (Quality:       0       0       0       0       0       0)
0x0012bd30 GfxAxialShading::parse(GfxResources*, Dict*, OutputDev*, GfxState*) (Quality:       0       0       0       0       0       0)
0x0012c6f0 GfxRadialShading::parse(GfxResources*, Dict*, OutputDev*, GfxState*) (Quality:       0       0       0       0       0       0)
0x0012cf30 GfxGouraudTriangleShading::parse(GfxResources*, int, Dict*, Stream*, OutputDev*, GfxState*) (Quality:       0       0       0       0       0       0)
0x0012ddd0 GfxPatchMeshShading::parse(GfxResources*, int, Dict*, Stream*, OutputDev*, GfxState*) (Quality:       0       0       0       0       0       0)
0x0012fe60 GfxShading::parse(GfxResources*, Object*, OutputDev*, GfxState*) (Quality:       0       0       0       0       0       0)
0x00130110 GfxShadingPattern::parse(GfxResources*, Object*, OutputDev*, GfxState*) (Quality:       0       0       0       0       0       0)
0x00130320 GfxPattern::parse(GfxResources*, Object*, OutputDev*, GfxState*) (Quality:       0       0       0       0       0       0)
0x00130400 GfxICCBasedColorSpace::getGray(GfxColor*, int*)             (Quality:       0       0       0       0       0       0)
0x001306d0 GfxICCBasedColorSpace::getRGB(GfxColor*, GfxRGB*)           (Quality:       0       0       0       0       0       0)
0x00130f20 GfxICCBasedColorSpace::getCMYK(GfxColor*, GfxCMYK*)         (Quality:       0       0       0       0       0       0)
0x001312d0 GfxColorSpace::useGetRGBLine()                              (Quality:       0       0       0       0       0       0)
0x001312e0 GfxColorSpace::useGetGrayLine()                             (Quality:       0       0       0       0       0       0)
0x001312f0 GfxColorSpace::useGetCMYKLine()                             (Quality:       0       0       0       0       0       0)
0x00131300 GfxColorSpace::useGetDeviceNLine()                          (Quality:       0       0       0       0       0       0)
0x00131310 GfxDeviceGrayColorSpace::getMode()                          (Quality:       0       0       0  100000  100000  100000)
0x00131320 GfxDeviceGrayColorSpace::useGetRGBLine()                    (Quality:       0       0       0       0       0       0)
0x00131330 GfxDeviceGrayColorSpace::useGetGrayLine()                   (Quality:       0       0       0       0       0       0)
0x00131340 GfxDeviceGrayColorSpace::useGetCMYKLine()                   (Quality:       0       0       0       0       0       0)
0x00131350 GfxDeviceGrayColorSpace::useGetDeviceNLine()                (Quality:       0       0       0       0       0       0)
0x000b4a00 AnnotSound::AnnotSound(PDFDoc*, Dict*, Object*)@plt         (Quality:       0       0       0       0       0       0)
0x00131370 GfxCalGrayColorSpace::getMode()                             (Quality:       0       0       0       0       0       0)
0x00131380 GfxCalGrayColorSpace::getNComps()                           (Quality:       0       0       0       0       0       0)
0x00131390 GfxDeviceRGBColorSpace::getMode()                           (Quality:       0       0       0      10      10      10)
0x001313a0 GfxDeviceRGBColorSpace::useGetRGBLine()                     (Quality:       0       0       0       0       0       0)
0x001313b0 GfxDeviceRGBColorSpace::useGetGrayLine()                    (Quality:       0       0       0       2       2       2)
0x001313c0 GfxDeviceRGBColorSpace::useGetCMYKLine()                    (Quality:       0       0       0       0       0       0)
0x001313d0 GfxDeviceRGBColorSpace::useGetDeviceNLine()                 (Quality:       0       0       0       0       0       0)
0x001313e0 GfxDeviceRGBColorSpace::getNComps()                         (Quality:       0       0       0      10      10      10)
0x001313f0 GfxCalRGBColorSpace::getMode()                              (Quality:       0       0       0       0       0       0)
0x00131400 GfxCalRGBColorSpace::getNComps()                            (Quality:       0       0       0       0       0       0)
0x00131410 GfxDeviceCMYKColorSpace::getMode()                          (Quality:       0       0       0       0       0       0)
0x00131420 GfxDeviceCMYKColorSpace::useGetRGBLine()                    (Quality:       0       0       0       0       0       0)
0x00131430 GfxDeviceCMYKColorSpace::useGetCMYKLine()                   (Quality:       0       0       0       0       0       0)
0x00131440 GfxDeviceCMYKColorSpace::useGetDeviceNLine()                (Quality:       0       0       0       0       0       0)
0x00131450 GfxDeviceCMYKColorSpace::getNComps()                        (Quality:       0       0       0       0       0       0)
0x00131460 GfxLabColorSpace::getMode()                                 (Quality:       0       0       0       0       0       0)
0x00131470 GfxLabColorSpace::getNComps()                               (Quality:       0       0       0       0       0       0)
0x00131480 GfxICCBasedColorSpace::getMode()                            (Quality:       0       0       0       0       0       0)
0x00131490 GfxICCBasedColorSpace::getNComps()                          (Quality:       0       0       0       0       0       0)
0x001314a0 GfxIndexedColorSpace::getMode()                             (Quality:       0       0       0       0       0       0)
0x001314b0 GfxIndexedColorSpace::useGetRGBLine()                       (Quality:       0       0       0       0       0       0)
0x001314c0 GfxIndexedColorSpace::useGetCMYKLine()                      (Quality:       0       0       0       0       0       0)
0x001314d0 GfxIndexedColorSpace::useGetDeviceNLine()                   (Quality:       0       0       0       0       0       0)
0x001314e0 GfxIndexedColorSpace::getNComps()                           (Quality:       0       0       0       0       0       0)
0x001314f0 GfxIndexedColorSpace::createMapping(GooList*, int)          (Quality:       0       0       0       0       0       0)
0x00131500 GfxSeparationColorSpace::getMode()                          (Quality:       0       0       0       0       0       0)
0x00131510 GfxSeparationColorSpace::getNComps()                        (Quality:       0       0       0       0       0       0)
0x00131520 GfxSeparationColorSpace::isNonMarking()                     (Quality:       0       0       0       0       0       0)
0x00131530 GfxDeviceNColorSpace::getMode()                             (Quality:       0       0       0       0       0       0)
0x00131540 GfxDeviceNColorSpace::getNComps()                           (Quality:       0       0       0       0       0       0)
0x00131550 GfxDeviceNColorSpace::isNonMarking()                        (Quality:       0       0       0       0       0       0)
0x00131560 GfxPatternColorSpace::getMode()                             (Quality:       0       0       0       0       0       0)
0x00131570 GfxPatternColorSpace::getNComps()                           (Quality:       0       0       0       0       0       0)
0x00131580 GfxICCBasedColorSpaceKey::operator==(PopplerCacheKey const&) const (Quality:       0       0       0       0       0       0)
0x00131590 GfxColorSpace::getRGBLine(unsigned char*, unsigned int*, int) (Quality:       0       0       0       0       0       0)
0x001315b0 GfxColorSpace::getRGBLine(unsigned char*, unsigned char*, int) (Quality:       0       0       0       0       0       0)
0x001315d0 GfxColorSpace::getRGBXLine(unsigned char*, unsigned char*, int) (Quality:       0       0       0       0       0       0)
0x001315f0 GfxColorSpace::getCMYKLine(unsigned char*, unsigned char*, int) (Quality:       0       0       0       0       0       0)
0x00131610 GfxColorSpace::getDeviceNLine(unsigned char*, unsigned char*, int) (Quality:       0       0       0       0       0       0)
0x00131630 GfxColorSpace::getGrayLine(unsigned char*, unsigned char*, int) (Quality:       0       0       0       0       0       0)
0x00131650 GfxICCBasedColorSpaceKey::~GfxICCBasedColorSpaceKey()       (Quality:       0       0       0       0       0       0)
0x00131670 GfxICCBasedColorSpaceKey::~GfxICCBasedColorSpaceKey()       (Quality:       0       0       0       0       0       0)
0x00131690 std::_Rb_tree<unsigned int, std::pair<unsigned int const, unsigned int>, std::_Select1st<std::pair<unsigned int const, unsigned int> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned int const, unsigned int> >*) (Quality:       0       0       0       0       0       0)
0x001316d0 GfxICCBasedColorSpaceItem::~GfxICCBasedColorSpaceItem()     (Quality:       0       0       0       0       0       0)
0x00131740 GfxICCBasedColorSpaceItem::~GfxICCBasedColorSpaceItem()     (Quality:       0       0       0       0       0       0)
0x001317b0 std::_Rb_tree<unsigned int, std::pair<unsigned int const, unsigned int>, std::_Select1st<std::pair<unsigned int const, unsigned int> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >::find(unsigned int const&) (Quality:       0       0       0       0       0       0)
0x00131800 std::_Rb_tree<unsigned int, std::pair<unsigned int const, unsigned int>, std::_Select1st<std::pair<unsigned int const, unsigned int> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned int> > >::_M_insert_unique(std::pair<unsigned int const, unsigned int> const&) (Quality:       0       0       0       0       0       0)
0x00131900 findModifier(char const*, char const*, char const**)        (Quality:       0       0       0       0       0       0)
0x00131950 mapUTF8(unsigned int, char*, int)                           (Quality:       0       0       0       0       0       0)
0x00131a30 mapUCS2(unsigned int, char*, int)                           (Quality:       0       0       0       0       0       0)
0x00131ab0 getFontLang(GfxFont*)                                       (Quality:       0       0       0       0       0       0)
0x00131c00 PSFontParam16::PSFontParam16(GooString*, int, GooString*, GooString*) (Quality:       0       0       0       0       0       0)
0x00131c10 PSFontParam16::~PSFontParam16()                             (Quality:       0       0       0       0       0       0)
0x00131c80 SysFontInfo::SysFontInfo(GooString*, bool, bool, bool, bool, GooString*, SysFontType, int, GooString*) (Quality:       0       0       0       0       0       0)
0x00131cc0 SysFontInfo::~SysFontInfo()                                 (Quality:       0       0       0       0       0       0)
0x00131d30 SysFontInfo::match(SysFontInfo*)                            (Quality:       0       0       0       0       0       0)
0x00131d70 SysFontInfo::match(GooString*, bool, bool, bool, bool)      (Quality:       0       0       0       0       0       0)
0x00131dd0 SysFontInfo::match(GooString*, bool, bool)                  (Quality:       0       0       0       0       0       0)
0x00131e10 SysFontList::SysFontList()                                  (Quality:       0       0       0       1       1       1)
0x00131e40 SysFontList::~SysFontList()                                 (Quality:       0       0       0       1       1       1)
0x00131eb0 SysFontList::find(GooString*, bool, bool)                   (Quality:       0       0       0       0       0       0)
0x00132320 GlobalParams::parseNameToUnicode(GooString*)                (Quality:       0       0       0       0       0       0)
0x00132460 GlobalParams::addCIDToUnicode(GooString*, GooString*)       (Quality:       0       0       0       0       0       0)
0x001324e0 GlobalParams::addUnicodeMap(GooString*, GooString*)         (Quality:       0       0       0       0       0       0)
0x00132560 GlobalParams::addCMapDir(GooString*, GooString*)            (Quality:       0       0       0       0       0       0)
0x001325f0 GlobalParams::scanEncodingDirs()                            (Quality:       0       0       0       1       1       1)
0x00132880 GlobalParams::GlobalParams(char const*)                     (Quality:       0       0       0       1       1       1)
0x00132e20 GlobalParams::parseYesNo2(char const*, bool*)               (Quality:       0       0       0       0       0       0)
0x00132e80 GlobalParams::~GlobalParams()                               (Quality:       0       0       0       1       1       1)
0x00133550 GlobalParams::getMacRomanCharCode(char*)                    (Quality:       0       0       0       0       0       0)
0x00133560 GlobalParams::mapNameToUnicodeAll(char const*)              (Quality:       0       0       0       0       0       0)
0x000b49f0 Splash::scaleMaskYuXd(bool (*)(void*, unsigned char*), void*, int, int, int, int, SplashBitmap*)@plt (Quality:       0       0       0       0       0       0)
0x001335b0 GlobalParams::getResidentUnicodeMap(GooString*)             (Quality:       0       0       0       0       0       0)
0x00133600 GlobalParams::getUnicodeMapFile(GooString*)                 (Quality:       0       0       0       0       0       0)
0x00133660 GlobalParams::findCMapFile(GooString*, GooString*)          (Quality:       0       0       0       0       0       0)
0x00133760 GlobalParams::findToUnicodeFile(GooString*)                 (Quality:       0       0       0       0       0       0)
0x00133850 GlobalParams::setupBaseFonts(char*)                         (Quality:       0       0       0       0       0       0)
0x00133860 GlobalParams::findFontFile(GooString*)                      (Quality:       0       0       0       0       0       0)
0x001339f0 GlobalParams::findSystemFontFile(GfxFont*, SysFontType*, int*, GooString*, GooString*) (Quality:       0       0       0       0       0       0)
0x00134650 GlobalParams::findBase14FontFile(GooString*, GfxFont*)      (Quality:       0       0       0       0       0       0)
0x00134680 GlobalParams::findCCFontFile(GooString*)                    (Quality:       0       0       0       0       0       0)
0x000b49e0 Splash::scaleImageYdXu(bool (*)(void*, unsigned char*, unsigned char*), void*, SplashColorMode, int, bool, int, int, int, int, SplashBitmap*)@plt (Quality:       0       0       0       0       0       0)
0x000b49d0 TextBlock::visitSelection(TextSelectionVisitor*, PDFRectangle*, SelectionStyle)@plt (Quality:       0       0       0       0       0       0)
0x000b49c0 StructElement::getTypeName() const@plt                      (Quality:       0       0       0       0       0       0)
0x000b49b0 FcPatternGetLangSet@plt                                     (Quality:       0       0       0       0       0       0)
0x001347a0 GlobalParams::getPSResidentFont(GooString*)                 (Quality:       0       0       0       0       0       0)
0x001347e0 GlobalParams::getPSResidentFonts()                          (Quality:       0       0       0       1       1       1)
0x001348a0 GlobalParams::getPSResidentFont16(GooString*, int)          (Quality:       0       0       0       0       0       0)
0x00134940 GlobalParams::getPSResidentFontCC(GooString*, int)          (Quality:       0       0       0       0       0       0)
0x001349e0 GlobalParams::getTextEncodingName()                         (Quality:       0       0       0       0       0       0)
0x00134a30 GlobalParams::getTextEOL()                                  (Quality:       0       0       0       0       0       0)
0x00134a60 GlobalParams::getTextPageBreaks()                           (Quality:       0       0       0       0       0       0)
0x00134a90 GlobalParams::getTextKeepTinyChars()                        (Quality:       0       0       0       0       0       0)
0x00134ac0 GlobalParams::getEnableFreeType()                           (Quality:       0       0       0       0       0       0)
0x00134af0 GlobalParams::getStrokeAdjust()                             (Quality:       0       0       0       0       0       0)
0x00134b20 GlobalParams::getScreenType()                               (Quality:       0       0       0       0       0       0)
0x00134b50 GlobalParams::getScreenSize()                               (Quality:       0       0       0       0       0       0)
0x00134b80 GlobalParams::getScreenDotRadius()                          (Quality:       0       0       0       0       0       0)
0x00134bb0 GlobalParams::getScreenGamma()                              (Quality:       0       0       0       0       0       0)
0x00134bf0 GlobalParams::getScreenBlackThreshold()                     (Quality:       0       0       0       0       0       0)
0x00134c30 GlobalParams::getScreenWhiteThreshold()                     (Quality:       0       0       0       0       0       0)
0x00134c70 GlobalParams::getMinLineWidth()                             (Quality:       0       0       0       0       0       0)
0x00134cb0 GlobalParams::getMapNumericCharNames()                      (Quality:       0       0       0       0       0       0)
0x00134ce0 GlobalParams::getMapUnknownCharNames()                      (Quality:       0       0       0       0       0       0)
0x000b49a0 StandardSecurityHandler::StandardSecurityHandler(PDFDoc*, Object*)@plt (Quality:       0       0       0       0       0       0)
0x000b4990 PDFDoc::writeObject(Object*, OutStream*, XRef*, unsigned int, unsigned char*, CryptAlgorithm, int, int, int)@plt (Quality:       0       0       0       0       0       0)
0x00134d70 GlobalParams::getErrQuiet()                                 (Quality:       0       0       0       0       0       0)
0x00134d80 GlobalParams::getCIDToUnicode(GooString*)                   (Quality:       0       0       0       0       0       0)
0x000b4980 SplashClip::SplashClip(double, double, double, double, bool)@plt (Quality:       0       0       0       0       0       0)
0x00134f00 GlobalParams::getUnicodeMap2(GooString*)                    (Quality:       0       0       0       0       0       0)
0x00134f70 GlobalParams::getUnicodeMap(GooString*)                     (Quality:       0       0       0       0       0       0)
0x00134f80 GlobalParams::getCMap(GooString*, GooString*, Stream*)      (Quality:       0       0       0       0       0       0)
0x00134fd0 GlobalParams::getTextEncoding()                             (Quality:       0       0       0       0       0       0)
0x00134fe0 GlobalParams::getEncodingNames()                            (Quality:       0       0       0       0       0       0)
0x001350b0 GlobalParams::addFontFile(GooString*, GooString*)           (Quality:       0       0       0       0       0       0)
0x00135100 GlobalParams::setPSFile(char*)                              (Quality:       0       0       0       0       0       0)
0x00135170 GlobalParams::setPSExpandSmaller(bool)                      (Quality:       0       0       0       0       0       0)
0x001351a0 GlobalParams::setPSShrinkLarger(bool)                       (Quality:       0       0       0       0       0       0)
0x001351d0 GlobalParams::setPSCenter(bool)                             (Quality:       0       0       0       0       0       0)
0x00135200 GlobalParams::setPSLevel(PSLevel)                           (Quality:       0       0       0       0       0       0)
0x00135230 GlobalParams::setTextEncoding(char*)                        (Quality:       0       0       0       0       0       0)
0x001352a0 GlobalParams::setTextEOL(char*)                             (Quality:       0       0       0       0       0       0)
0x00135350 GlobalParams::setTextPageBreaks(bool)                       (Quality:       0       0       0       0       0       0)
0x00135380 GlobalParams::setTextKeepTinyChars(bool)                    (Quality:       0       0       0       0       0       0)
0x001353b0 GlobalParams::setEnableFreeType(char*)                      (Quality:       0       0       0       0       0       0)
0x001353f0 GlobalParams::setDisableFreeTypeHinting(char*)              (Quality:       0       0       0       0       0       0)
0x00135430 GlobalParams::setStrokeAdjust(bool)                         (Quality:       0       0       0       0       0       0)
0x00135460 GlobalParams::setScreenType(ScreenType)                     (Quality:       0       0       0       0       0       0)
0x00135490 GlobalParams::setScreenSize(int)                            (Quality:       0       0       0       0       0       0)
0x001354c0 GlobalParams::setScreenDotRadius(int)                       (Quality:       0       0       0       0       0       0)
0x001354f0 GlobalParams::setScreenGamma(double)                        (Quality:       0       0       0       0       0       0)
0x00135530 GlobalParams::setScreenBlackThreshold(double)               (Quality:       0       0       0       0       0       0)
0x00135570 GlobalParams::setScreenWhiteThreshold(double)               (Quality:       0       0       0       0       0       0)
0x001355b0 GlobalParams::setMinLineWidth(double)                       (Quality:       0       0       0       0       0       0)
0x001355f0 GlobalParams::setOverprintPreview(bool)                     (Quality:       0       0       0       0       0       0)
0x00135620 GlobalParams::setMapNumericCharNames(bool)                  (Quality:       0       0       0       0       0       0)
0x00135650 GlobalParams::setMapUnknownCharNames(bool)                  (Quality:       0       0       0       0       0       0)
0x00135680 GlobalParams::setPrintCommands(bool)                        (Quality:       0       0       0       0       0       0)
0x001356b0 GlobalParams::setProfileCommands(bool)                      (Quality:       0       0       0       0       0       0)
0x001356e0 GlobalParams::setErrQuiet(bool)                             (Quality:       0       0       0       0       0       0)
0x00135710 GlobalParams::addSecurityHandler(XpdfSecurityHandler*)      (Quality:       0       0       0       0       0       0)
0x00135720 GlobalParams::getSecurityHandler(char*)                     (Quality:       0       0       0       0       0       0)
0x00135730 Hints::~Hints()                                             (Quality:       0       0       0       0       0       0)
0x00135810 Hints::getPageOffset(int)                                   (Quality:       0       0       0       0       0       0)
0x00135860 Hints::readBit(Stream*)                                     (Quality:       0       0       0       0       0       0)
0x001358c0 Hints::readBits(int, Stream*)                               (Quality:       0       0       0       0       0       0)
0x00135940 Hints::readPageOffsetTable(Stream*)                         (Quality:       0       0       0       0       0       0)
0x00135db0 Hints::readSharedObjectsTable(Stream*)                      (Quality:       0       0       0       0       0       0)
0x001361c0 Hints::readTables(BaseStream*, Linearization*, XRef*, SecurityHandler*) (Quality:       0       0       0       0       0       0)
0x00136640 Hints::Hints(BaseStream*, Linearization*, XRef*, SecurityHandler*) (Quality:       0       0       0       0       0       0)
0x001368b0 Hints::getPageObjectNum(int)                                (Quality:       0       0       0       0       0       0)
0x00136900 Hints::getPageRanges(int)                                   (Quality:       0       0       0       0       0       0)
0x00136b40 JArithmeticDecoderStats::~JArithmeticDecoderStats()         (Quality:       0       0       0       0       0       0)
0x00136b50 JArithmeticDecoderStats::reset()                            (Quality:       0       0       0       0       0       0)
0x00136b60 JArithmeticDecoderStats::JArithmeticDecoderStats(int)       (Quality:       0       0       0       0       0       0)
0x00136b80 JArithmeticDecoderStats::copy()                             (Quality:       0       0       0       0       0       0)
0x00136bc0 JArithmeticDecoderStats::copyFrom(JArithmeticDecoderStats*) (Quality:       0       0       0       0       0       0)
0x00136be0 JArithmeticDecoderStats::setEntry(unsigned int, int, int)   (Quality:       0       0       0       0       0       0)
0x00136bf0 JArithmeticDecoder::JArithmeticDecoder()                    (Quality:       0       0       0       0       0       0)
0x00136c10 JArithmeticDecoder::restart(int)                            (Quality:       0       0       0       0       0       0)
0x00136d50 JArithmeticDecoder::cleanup()                               (Quality:       0       0       0       0       0       0)
0x00136db0 JArithmeticDecoder::~JArithmeticDecoder()                   (Quality:       0       0       0       0       0       0)
0x00136dc0 JArithmeticDecoder::byteIn()                                (Quality:       0       0       0       0       0       0)
0x00136e90 JArithmeticDecoder::start()                                 (Quality:       0       0       0       0       0       0)
0x00136f30 JArithmeticDecoder::decodeBit(unsigned int, JArithmeticDecoderStats*) (Quality:       0       0       0       0       0       0)
0x001370c0 JArithmeticDecoder::decodeByte(unsigned int, JArithmeticDecoderStats*) (Quality:       0       0       0       0       0       0)
0x00137110 JArithmeticDecoder::decodeIntBit(JArithmeticDecoderStats*)  (Quality:       0       0       0       0       0       0)
0x00137150 JArithmeticDecoder::decodeInt(int*, JArithmeticDecoderStats*) (Quality:       0       0       0       0       0       0)
0x00137330 JArithmeticDecoder::decodeIAID(unsigned int, JArithmeticDecoderStats*) (Quality:       0       0       0       0       0       0)
0x001373a0 JBIG2Stream::getChar()                                      (Quality:       0       0       0       0       0       0)
0x001373e0 JBIG2Stream::lookChar()                                     (Quality:       0       0       0       0       0       0)
0x00137410 JBIG2Stream::getPos()                                       (Quality:       0       0       0       0       0       0)
0x00137430 JBIG2Stream::getChars(int, unsigned char*)                  (Quality:       0       0       0       0       0       0)
0x001374a0 JBIG2Stream::getPSFilter(int, char const*)                  (Quality:       0       0       0       0       0       0)
0x001374b0 JBIG2Stream::isBinary(bool)                                 (Quality:       0       0       0       0       0       0)
0x001374d0 JBIG2Bitmap::~JBIG2Bitmap()                                 (Quality:       0       0       0       0       0       0)
0x001374f0 JBIG2CodeTable::~JBIG2CodeTable()                           (Quality:       0       0       0       0       0       0)
0x00137510 JBIG2Bitmap::~JBIG2Bitmap()                                 (Quality:       0       0       0       0       0       0)
0x00137530 JBIG2CodeTable::~JBIG2CodeTable()                           (Quality:       0       0       0       0       0       0)
0x00137550 JBIG2SymbolDict::~JBIG2SymbolDict()                         (Quality:       0       0       0       0       0       0)
0x00137620 JBIG2SymbolDict::~JBIG2SymbolDict()                         (Quality:       0       0       0       0       0       0)
0x00137640 JBIG2PatternDict::~JBIG2PatternDict()                       (Quality:       0       0       0       0       0       0)
0x001376e0 JBIG2PatternDict::~JBIG2PatternDict()                       (Quality:       0       0       0       0       0       0)
0x00137700 JBIG2HuffmanDecoder::~JBIG2HuffmanDecoder()                 (Quality:       0       0       0       0       0       0)
0x00137710 JBIG2HuffmanDecoder::reset()                                (Quality:       0       0       0       0       0       0)
0x00137720 JBIG2HuffmanDecoder::JBIG2HuffmanDecoder()                  (Quality:       0       0       0       0       0       0)
0x00137730 JBIG2HuffmanDecoder::readBits(unsigned int)                 (Quality:       0       0       0       0       0       0)
0x00137820 JBIG2HuffmanDecoder::readBit()                              (Quality:       0       0       0       0       0       0)
0x00137860 JBIG2HuffmanDecoder::decodeInt(int*, JBIG2HuffmanTable*)    (Quality:       0       0       0       0       0       0)
0x00137960 JBIG2HuffmanDecoder::buildTable(JBIG2HuffmanTable*, unsigned int) (Quality:       0       0       0       0       0       0)
0x00137ad0 JBIG2MMRDecoder::~JBIG2MMRDecoder()                         (Quality:       0       0       0       0       0       0)
0x00137ae0 JBIG2MMRDecoder::reset()                                    (Quality:       0       0       0       0       0       0)
0x00137b00 JBIG2MMRDecoder::JBIG2MMRDecoder()                          (Quality:       0       0       0       0       0       0)
0x00137b10 JBIG2MMRDecoder::get2DCode()                                (Quality:       0       0       0       0       0       0)
0x00137c40 JBIG2MMRDecoder::getWhiteCode()                             (Quality:       0       0       0       0       0       0)
0x00137de0 JBIG2MMRDecoder::getBlackCode()                             (Quality:       0       0       0       0       0       0)
0x00137fd0 JBIG2MMRDecoder::get24Bits()                                (Quality:       0       0       0       0       0       0)
0x00138030 JBIG2MMRDecoder::skipTo(unsigned int)                       (Quality:       0       0       0       0       0       0)
0x00138060 JBIG2Bitmap::JBIG2Bitmap(unsigned int, int, int)            (Quality:       0       0       0       0       0       0)
0x00138100 JBIG2Bitmap::JBIG2Bitmap(unsigned int, JBIG2Bitmap*)        (Quality:       0       0       0       0       0       0)
0x00138200 JBIG2Bitmap::expand(int, unsigned int)                      (Quality:       0       0       0       0       0       0)
0x001382e0 JBIG2Bitmap::clearToZero()                                  (Quality:       0       0       0       0       0       0)
0x00138300 JBIG2Bitmap::getSlice(unsigned int, unsigned int, unsigned int, unsigned int) (Quality:       0       0       0       0       0       0)
0x00138440 JBIG2Bitmap::clearToOne()                                   (Quality:       0       0       0       0       0       0)
0x00138460 JBIG2Bitmap::duplicateRow(int, int)                         (Quality:       0       0       0       0       0       0)
0x00138490 JBIG2Bitmap::combine(JBIG2Bitmap*, int, int, unsigned int)  (Quality:       0       0       0       0       0       0)
0x00138970 JBIG2SymbolDict::JBIG2SymbolDict(unsigned int, unsigned int) (Quality:       0       0       0       0       0       0)
0x001389f0 JBIG2PatternDict::JBIG2PatternDict(unsigned int, unsigned int) (Quality:       0       0       0       0       0       0)
0x00138a60 JBIG2CodeTable::JBIG2CodeTable(unsigned int, JBIG2HuffmanTable*) (Quality:       0       0       0       0       0       0)
0x00138a80 JBIG2Stream::JBIG2Stream(Stream*, Object*, Object*)         (Quality:       0       0       0       0       0       0)
0x00138da0 JBIG2Stream::readGenericBitmap(bool, int, int, int, bool, bool, JBIG2Bitmap*, int*, int*, int) (Quality:       0       0       0       0       0       0)
0x0013bb60 JBIG2Stream::readGenericRefinementRegion(int, int, int, bool, JBIG2Bitmap*, int, int, int*, int*) (Quality:       0       0       0       0       0       0)
0x0013ed00 JBIG2Stream::readTextRegion(bool, bool, int, int, unsigned int, unsigned int, int, JBIG2HuffmanTable*, unsigned int, JBIG2Bitmap**, unsigned int, unsigned int, unsigned int, unsigned int, int, JBIG2HuffmanTable*, JBIG2HuffmanTable*, JBIG2HuffmanTable*, JBIG2HuffmanTable*, JBIG2HuffmanTable*, JBIG2HuffmanTable*, JBIG2HuffmanTable*, JBIG2HuffmanTable*, unsigned int, int*, int*) (Quality:       0       0       0       0       0       0)
0x0013f6b0 JBIG2Stream::readEndOfStripeSeg(unsigned int)               (Quality:       0       0       0       0       0       0)
0x0013f6f0 JBIG2Stream::readProfilesSeg(unsigned int)                  (Quality:       0       0       0       0       0       0)
0x0013f730 JBIG2Stream::readExtensionSeg(unsigned int)                 (Quality:       0       0       0       0       0       0)
0x0013f770 JBIG2Stream::findSegment(unsigned int)                      (Quality:       0       0       0       0       0       0)
0x0013f800 JBIG2Stream::discardSegment(unsigned int)                   (Quality:       0       0       0       0       0       0)
0x0013f8a0 JBIG2Stream::resetGenericStats(unsigned int, JArithmeticDecoderStats*) (Quality:       0       0       0       0       0       0)
0x0013f990 JBIG2Stream::resetRefinementStats(unsigned int, JArithmeticDecoderStats*) (Quality:       0       0       0       0       0       0)
0x0013fa80 JBIG2Stream::resetIntStats(int)                             (Quality:       0       0       0       0       0       0)
0x0013fb90 JBIG2Stream::readUByte(unsigned int*)                       (Quality:       0       0       0       0       0       0)
0x0013fbc0 JBIG2Stream::readByte(int*)                                 (Quality:       0       0       0       0       0       0)
0x0013fc00 JBIG2Stream::readUWord(unsigned int*)                       (Quality:       0       0       0       0       0       0)
0x0013fc50 JBIG2Stream::readULong(unsigned int*)                       (Quality:       0       0       0       0       0       0)
0x0013fce0 JBIG2Stream::readSymbolDictSeg(unsigned int, unsigned int, unsigned int*, unsigned int) (Quality:       0       0       0       0       0       0)
0x001411e0 JBIG2Stream::readTextRegionSeg(unsigned int, bool, bool, unsigned int, unsigned int*, unsigned int) (Quality:       0       0       0       0       0       0)
0x00141f90 JBIG2Stream::readPatternDictSeg(unsigned int, unsigned int) (Quality:       0       0       0       0       0       0)
0x001421e0 JBIG2Stream::readGenericRegionSeg(unsigned int, bool, bool, unsigned int) (Quality:       0       0       0       0       0       0)
0x001425c0 JBIG2Stream::readGenericRefinementRegionSeg(unsigned int, bool, bool, unsigned int, unsigned int*, unsigned int) (Quality:       0       0       0       0       0       0)
0x00142a50 JBIG2Stream::readPageInfoSeg(unsigned int)                  (Quality:       0       0       0       0       0       0)
0x00142c00 JBIG2Stream::readLong(int*)                                 (Quality:       0       0       0       0       0       0)
0x00142c90 JBIG2Stream::readHalftoneRegionSeg(unsigned int, bool, bool, unsigned int, unsigned int*, unsigned int) (Quality:       0       0       0       0       0       0)
0x001435a0 JBIG2Stream::readCodeTableSeg(unsigned int, unsigned int)   (Quality:       0       0       0       0       0       0)
0x001438b0 JBIG2Stream::readSegments()                                 (Quality:       0       0       0       0       0       0)
0x00144040 JBIG2Stream::reset()                                        (Quality:       0       0       0       0       0       0)
0x001441a0 JBIG2Stream::close()                                        (Quality:       0       0       0       0       0       0)
0x001442d0 JBIG2Stream::~JBIG2Stream()                                 (Quality:       0       0       0       0       0       0)
0x00144530 JBIG2Stream::~JBIG2Stream()                                 (Quality:       0       0       0       0       0       0)
0x00144550 JBIG2Stream::getKind()                                      (Quality:       0       0       0       0       0       0)
0x00144560 JBIG2Stream::getGlobalsStream()                             (Quality:       0       0       0       0       0       0)
0x00144570 JBIG2Stream::getGlobalsStreamRef()                          (Quality:       0       0       0       0       0       0)
0x00144580 JBIG2Stream::hasGetChars()                                  (Quality:       0       0       0       0       0       0)
0x00144590 JBIG2Bitmap::getType()                                      (Quality:       0       0       0       0       0       0)
0x001445a0 JBIG2SymbolDict::getType()                                  (Quality:       0       0       0       0       0       0)
0x001445b0 JBIG2PatternDict::getType()                                 (Quality:       0       0       0       0       0       0)
0x001445c0 JBIG2CodeTable::getType()                                   (Quality:       0       0       0       0       0       0)
0x001445d0 Object::streamGetPos() [clone .isra.9]                      (Quality:       0       0       0       0       0       0)
0x000b4950 GfxState::ReusablePathIterator::isEnd() const@plt           (Quality:       0       0       0       0       0       0)
0x000b4940 SplashClip::clipAALine(SplashBitmap*, int*, int*, int, bool)@plt (Quality:       0       0       0       0       0       0)
0x000b4930 CCITTFaxStream::lookBits(int)@plt                           (Quality:       0       0       0       0       0       0)
0x00144850 Lexer::getChar(bool)                                        (Quality:       0       0       0  100000  100000  100000)
0x00144910 Lexer::lookChar()                                           (Quality:       0       0       0  100000  100000  100000)
0x00144940 Lexer::getObj(Object*, int)                                 (Quality:       0       0       0  100000  100000  100000)
0x001457d0 Lexer::getObj(Object*, char const*, int)                    (Quality:       0       0       0       0       0       0)
0x000b4920 sin@plt                                                     (Quality:       0       0       0       0       0       0)
0x001459b0 Lexer::isSpace(int)                                         (Quality:       0       0       0       0       0       0)
0x001459d0 Linearization::Linearization(BaseStream*)                   (Quality:       0       0       0       1       1       1)
0x00145c70 Linearization::~Linearization()                             (Quality:       0       0       0       1       1       1)
0x000b4910 GfxGouraudTriangleShading::getTriangle(int, double*, double*, double*, double*, double*, double*, double*, double*, double*)@plt (Quality:       0       0       0       0       0       0)
0x00145ce0 Linearization::getHintsOffset()                             (Quality:       0       0       0       0       0       0)
0x00145de0 Linearization::getHintsLength()                             (Quality:       0       0       0       0       0       0)
0x00145ee0 Linearization::getHintsOffset2()                            (Quality:       0       0       0       0       0       0)
0x00145fe0 Linearization::getHintsLength2()                            (Quality:       0       0       0       0       0       0)
0x001460e0 Linearization::getObjectNumberFirst()                       (Quality:       0       0       0       0       0       0)
0x00146140 Linearization::getEndFirst()                                (Quality:       0       0       0       0       0       0)
0x001461a0 Linearization::getNumPages()                                (Quality:       0       0       0       0       0       0)
0x00146200 Linearization::getMainXRefEntriesOffset()                   (Quality:       0       0       0       0       0       0)
0x00146260 Linearization::getPageFirst()                               (Quality:       0       0       0       0       0       0)
0x001462e0 LinkGoTo::~LinkGoTo()                                       (Quality:       0       0       0       0       0       0)
0x00146330 LinkGoTo::~LinkGoTo()                                       (Quality:       0       0       0       0       0       0)
0x00146350 LinkGoToR::~LinkGoToR()                                     (Quality:       0       0       0       0       0       0)
0x001463c0 LinkGoToR::~LinkGoToR()                                     (Quality:       0       0       0       0       0       0)
0x001463e0 LinkLaunch::~LinkLaunch()                                   (Quality:       0       0       0       0       0       0)
0x00146440 LinkLaunch::~LinkLaunch()                                   (Quality:       0       0       0       0       0       0)
0x00146460 LinkURI::~LinkURI()                                         (Quality:       0       0       0       0       0       0)
0x001464a0 LinkURI::~LinkURI()                                         (Quality:       0       0       0       0       0       0)
0x001464c0 LinkNamed::~LinkNamed()                                     (Quality:       0       0       0       0       0       0)
0x00146500 LinkNamed::~LinkNamed()                                     (Quality:       0       0       0       0       0       0)
0x00146520 LinkMovie::~LinkMovie()                                     (Quality:       0       0       0       0       0       0)
0x00146560 LinkMovie::~LinkMovie()                                     (Quality:       0       0       0       0       0       0)
0x00146580 LinkJavaScript::~LinkJavaScript()                           (Quality:       0       0       0       0       0       0)
0x001465c0 LinkJavaScript::~LinkJavaScript()                           (Quality:       0       0       0       0       0       0)
0x001465e0 LinkUnknown::~LinkUnknown()                                 (Quality:       0       0       0       0       0       0)
0x00146620 LinkUnknown::~LinkUnknown()                                 (Quality:       0       0       0       0       0       0)
0x00146640 LinkSound::~LinkSound()                                     (Quality:       0       0       0       0       0       0)
0x00146680 LinkSound::~LinkSound()                                     (Quality:       0       0       0       0       0       0)
0x001466a0 LinkRendition::~LinkRendition()                             (Quality:       0       0       0       0       0       0)
0x00146710 LinkRendition::~LinkRendition()                             (Quality:       0       0       0       0       0       0)
0x00146730 LinkDest::LinkDest(Array*)                                  (Quality:       0       0       0       0       0       0)
0x00147020 LinkDest::LinkDest(LinkDest*)                               (Quality:       0       0       0       0       0       0)
0x001470a0 LinkGoTo::LinkGoTo(Object*)                                 (Quality:       0       0       0       0       0       0)
0x00147190 LinkAction::parseDest(Object*)                              (Quality:       0       0       0       0       0       0)
0x001471e0 LinkGoToR::LinkGoToR(Object*, Object*)                      (Quality:       0       0       0       0       0       0)
0x00147360 LinkLaunch::LinkLaunch(Object*)                             (Quality:       0       0       0       0       0       0)
0x001475c0 LinkURI::LinkURI(Object*, GooString*)                       (Quality:       0       0       0       0       0       0)
0x00147750 LinkNamed::LinkNamed(Object*)                               (Quality:       0       0       0       0       0       0)
0x001477a0 LinkMovie::LinkMovie(Object*)                               (Quality:       0       0       0       0       0       0)
0x00147a00 LinkSound::LinkSound(Object*)                               (Quality:       0       0       0       0       0       0)
0x00147ca0 LinkRendition::LinkRendition(Object*)                       (Quality:       0       0       0       0       0       0)
0x00148020 LinkJavaScript::LinkJavaScript(Object*)                     (Quality:       0       0       0       0       0       0)
0x001480b0 LinkOCGState::StateList::~StateList()                       (Quality:       0       0       0       0       0       0)
0x00148110 LinkOCGState::LinkOCGState(Object*)                         (Quality:       0       0       0       0       0       0)
0x001484a0 LinkOCGState::~LinkOCGState()                               (Quality:       0       0       0       0       0       0)
0x00148530 LinkOCGState::~LinkOCGState()                               (Quality:       0       0       0       0       0       0)
0x00148550 LinkUnknown::LinkUnknown(char*)                             (Quality:       0       0       0       0       0       0)
0x00148590 LinkAction::parseAction(Object*, GooString*)                (Quality:       0       0       0       0       0       0)
0x00148a10 Links::Links(Annots*)                                       (Quality:       0       0       0       0       0       0)
0x00148ad0 Links::~Links()                                             (Quality:       0       0       0       0       0       0)
0x00148b10 Links::find(double, double) const                           (Quality:       0       0       0       0       0       0)
0x00148ba0 Links::onLink(double, double) const                         (Quality:       0       0       0       0       0       0)
0x00148c10 LinkGoTo::isOk()                                            (Quality:       0       0       0       0       0       0)
0x00148c30 LinkGoTo::getKind()                                         (Quality:       0       0       0       0       0       0)
0x00148c40 LinkGoToR::isOk()                                           (Quality:       0       0       0       0       0       0)
0x00148c70 LinkGoToR::getKind()                                        (Quality:       0       0       0       0       0       0)
0x00148c80 LinkLaunch::isOk()                                          (Quality:       0       0       0       0       0       0)
0x00148c90 LinkLaunch::getKind()                                       (Quality:       0       0       0       0       0       0)
0x00148ca0 LinkURI::isOk()                                             (Quality:       0       0       0       0       0       0)
0x00148cb0 LinkURI::getKind()                                          (Quality:       0       0       0       0       0       0)
0x00148cc0 LinkNamed::isOk()                                           (Quality:       0       0       0       0       0       0)
0x00148cd0 LinkNamed::getKind()                                        (Quality:       0       0       0       0       0       0)
0x00148ce0 LinkMovie::isOk()                                           (Quality:       0       0       0       0       0       0)
0x00148d00 LinkMovie::getKind()                                        (Quality:       0       0       0       0       0       0)
0x00148d10 LinkRendition::isOk()                                       (Quality:       0       0       0       0       0       0)
0x00148d20 LinkRendition::getKind()                                    (Quality:       0       0       0       0       0       0)
0x00148d30 LinkSound::isOk()                                           (Quality:       0       0       0       0       0       0)
0x00148d40 LinkSound::getKind()                                        (Quality:       0       0       0       0       0       0)
0x00148d50 LinkJavaScript::isOk()                                      (Quality:       0       0       0       0       0       0)
0x00148d60 LinkJavaScript::getKind()                                   (Quality:       0       0       0       0       0       0)
0x00148d70 LinkOCGState::isOk()                                        (Quality:       0       0       0       0       0       0)
0x00148d80 LinkOCGState::getKind()                                     (Quality:       0       0       0       0       0       0)
0x00148d90 LinkUnknown::isOk()                                         (Quality:       0       0       0       0       0       0)
0x00148da0 LinkUnknown::getKind()                                      (Quality:       0       0       0       0       0       0)
0x00148db0 LocalPDFDocBuilder::buildPDFDoc(GooString const&, GooString*, GooString*, void*) (Quality:       0       0       0       1       1       1)
0x00148e50 LocalPDFDocBuilder::supports(GooString const&)              (Quality:       0       0       0       1       1       1)
0x00148e90 LocalPDFDocBuilder::~LocalPDFDocBuilder()                   (Quality:       0       0       0       0       0       0)
0x00148ea0 LocalPDFDocBuilder::~LocalPDFDocBuilder()                   (Quality:       0       0       0       1       1       1)
0x00148eb0 MovieActivationParameters::MovieActivationParameters()      (Quality:       0       0       0       0       0       0)
0x00148f20 MovieActivationParameters::~MovieActivationParameters()     (Quality:       0       0       0       0       0       0)
0x00148f30 MovieActivationParameters::parseMovieActivation(Object*)    (Quality:       0       0       0       0       0       0)
0x001496d0 Movie::parseMovie(Object*)                                  (Quality:       0       0       0       0       0       0)
0x00149ad0 Movie::~Movie()                                             (Quality:       0       0       0       0       0       0)
0x00149b10 Movie::Movie(Object*)                                       (Quality:       0       0       0       0       0       0)
0x00149b70 Movie::Movie(Object*, Object*)                              (Quality:       0       0       0       0       0       0)
0x00149be0 Movie::getFloatingWindowSize(int*, int*)                    (Quality:       0       0       0       0       0       0)
0x00149c40 Movie::copy()                                               (Quality:       0       0       0       0       0       0)
0x00149d20 NameToCharCode::NameToCharCode()                            (Quality:       0       0       0       3       3       3)
0x00149d80 NameToCharCode::~NameToCharCode()                           (Quality:       0       0       0       3       3       3)
0x000b4900 GooHash::find(char const*, int*)@plt                        (Quality:       0       0       0       0       0       0)
0x001c45d0 void std::__adjust_heap<SplashIntersect*, long, SplashIntersect, __gnu_cxx::__ops::_Iter_comp_iter<cmpIntersectFunctor> >(SplashIntersect*, long, long, SplashIntersect, __gnu_cxx::__ops::_Iter_comp_iter<cmpIntersectFunctor>) (Quality:       0       0       0       0       0       0)
0x000b48f0 AnnotPolygon::~AnnotPolygon()@plt                           (Quality:       0       0       0       0       0       0)
0x000b48e0 FoFiType1C::convertToType0(char*, int*, int, void (*)(void*, char const*, int), void*)@plt (Quality:       0       0       0       0       0       0)
0x000b48d0 PDFDoc::writeDictionnary(Dict*, OutStream*, XRef*, unsigned int, unsigned char*, CryptAlgorithm, int, int, int)@plt (Quality:       0       0       0       0       0       0)
0x000b48c0 JBIG2Bitmap::duplicateRow(int, int)@plt                     (Quality:       0       0       0       0       0       0)
0x000b48a0 FormFieldSignature::FormFieldSignature(PDFDoc*, Object*, Ref const&, FormField*, std::set<int, std::less<int>, std::allocator<int> >*)@plt (Quality:       0       0       0       0       0       0)
0x0014a0a0 Object::copy(Object*)                                       (Quality:       0       0       0  100000  100000  100000)
0x0014a160 Object::fetch(XRef*, Object*, int)                          (Quality:       0       0       0  100000  100000  100000)
0x0014a190 Object::free()                                              (Quality:       0       0       0  100000  100000  100000)
0x0014a290 Object::getTypeName()                                       (Quality:       0       0       0       0       0       0)
0x0014a2a0 Object::print(_IO_FILE*)                                    (Quality:       0       0       0       0       0       0)
0x0014a630 Object::memCheck(_IO_FILE*)                                 (Quality:       0       0       0       1       1       1)
0x0014a640 Object::getArray() [clone .isra.12]                         (Quality:       0       0       0       0       0       0)
0x0014a680 OCGs::hasOCGs()                                             (Quality:       0       0       0       0       0       0)
0x0014a690 OptionalContentGroup::OptionalContentGroup(Dict*)           (Quality:       0       0       0       0       0       0)
0x0014a900 OptionalContentGroup::OptionalContentGroup(GooString*)      (Quality:       0       0       0       0       0       0)
0x0014a910 OptionalContentGroup::getName() const                       (Quality:       0       0       0       0       0       0)
0x0014a920 OptionalContentGroup::setRef(Ref)                           (Quality:       0       0       0       0       0       0)
0x0014a930 OptionalContentGroup::getRef() const                        (Quality:       0       0       0       0       0       0)
0x0014a940 OCGs::findOcgByRef(Ref const&)                              (Quality:       0       0       0       0       0       0)
0x0014a9c0 OCGs::OCGs(Object*, XRef*)                                  (Quality:       0       0       0       0       0       0)
0x0014af50 OCGs::evalOCVisibilityExpr(Object*, int)                    (Quality:       0       0       0       0       0       0)
0x0014b2a0 OCGs::allOn(Array*)                                         (Quality:       0       0       0       0       0       0)
0x0014b350 OCGs::allOff(Array*)                                        (Quality:       0       0       0       0       0       0)
0x0014b400 OCGs::anyOn(Array*)                                         (Quality:       0       0       0       0       0       0)
0x0014b4a0 OCGs::anyOff(Array*)                                        (Quality:       0       0       0       0       0       0)
0x0014b540 OCGs::optContentIsVisible(Object*)                          (Quality:       0       0       0       0       0       0)
0x0014b920 OptionalContentGroup::~OptionalContentGroup()               (Quality:       0       0       0       0       0       0)
0x0014b950 OCDisplayNode::OCDisplayNode()                              (Quality:       0       0       0       0       0       0)
0x0014b970 OCDisplayNode::OCDisplayNode(GooString*)                    (Quality:       0       0       0       0       0       0)
0x0014b9b0 OCDisplayNode::OCDisplayNode(OptionalContentGroup*)         (Quality:       0       0       0       0       0       0)
0x0014ba10 OCDisplayNode::addChild(OCDisplayNode*)                     (Quality:       0       0       0       0       0       0)
0x0014ba60 OCDisplayNode::addChildren(GooList*)                        (Quality:       0       0       0       0       0       0)
0x0014bac0 OCDisplayNode::takeChildren()                               (Quality:       0       0       0       0       0       0)
0x0014bad0 OCDisplayNode::~OCDisplayNode()                             (Quality:       0       0       0       0       0       0)
0x0014bb60 OCGs::~OCGs()                                               (Quality:       0       0       0       0       0       0)
0x0014bbf0 OCDisplayNode::getNumChildren()                             (Quality:       0       0       0       0       0       0)
0x0014bc10 OCDisplayNode::getChild(int)                                (Quality:       0       0       0       0       0       0)
0x0014bc20 OCDisplayNode::parse(Object*, OCGs*, XRef*, int)            (Quality:       0       0       0       0       0       0)
0x0014bf20 OCGs::getDisplayRoot()                                      (Quality:       0       0       0       0       0       0)
0x0014bf60 OutlineItem::OutlineItem(Dict*, XRef*)                      (Quality:       0       0       0       0       0       0)
0x0014c1e0 OutlineItem::readItemList(Object*, Object*, XRef*)          (Quality:       0       0       0       0       0       0)
0x0014c3f0 Outline::Outline(Object*, XRef*)                            (Quality:       0       0       0       0       0       0)
0x0014c4d0 OutlineItem::open()                                         (Quality:       0       0       0       0       0       0)
0x0014c500 OutlineItem::close()                                        (Quality:       0       0       0       0       0       0)
0x0014c580 OutlineItem::~OutlineItem()                                 (Quality:       0       0       0       0       0       0)
0x0014c5d0 Outline::~Outline()                                         (Quality:       0       0       0       0       0       0)
0x000b4890 JBIG2CodeTable::~JBIG2CodeTable()@plt                       (Quality:       0       0       0       0       0       0)
0x0014c720 OutputDev::cvtDevToUser(double, double, double*, double*)   (Quality:       0       0       0       0       0       0)
0x0014c760 OutputDev::cvtUserToDev(double, double, int*, int*)         (Quality:       0       0       0       0       0       0)
0x0014c7b0 OutputDev::beginType3Char(GfxState*, double, double, double, double, unsigned int, unsigned int*, int) (Quality:       0       0       0       0       0       0)
0x0014c7c0 OutputDev::unsetSoftMaskFromImageMask(GfxState*, double*)   (Quality:       0       0       0       0       0       0)
0x0014c7d0 OutputDev::endMarkedContent(GfxState*)                      (Quality:       0       0       0       0       0       0)
0x0014c7e0 OutputDev::beginMarkedContent(char*, Dict*)                 (Quality:       0       0       0       0       0       0)
0x0014c7f0 OutputDev::markPoint(char*)                                 (Quality:       0       0       0       0       0       0)
0x0014c800 OutputDev::markPoint(char*, Dict*)                          (Quality:       0       0       0       0       0       0)
0x0014c810 OutputDev::opiBegin(GfxState*, Dict*)                       (Quality:       0       0       0       0       0       0)
0x0014c820 OutputDev::opiEnd(GfxState*, Dict*)                         (Quality:       0       0       0       0       0       0)
0x0014c830 OutputDev::endProfile()                                     (Quality:       0       0       0       0       0       0)
0x0014c840 OutputDev::startProfile()                                   (Quality:       0       0       0       0       0       0)
0x0014c890 OutputDev::drawImageMask(GfxState*, Object*, Stream*, int, int, bool, bool, bool) [clone .part.0] (Quality:       0       0       0       0       0       0)
0x0014c8f0 OutputDev::drawImageMask(GfxState*, Object*, Stream*, int, int, bool, bool, bool) (Quality:       0       0       0       0       0       0)
0x0014c910 OutputDev::drawImage(GfxState*, Object*, Stream*, int, int, GfxImageColorMap*, bool, int*, bool) [clone .part.3] (Quality:       0       0       0       0       0       0)
0x0014c990 OutputDev::drawImage(GfxState*, Object*, Stream*, int, int, GfxImageColorMap*, bool, int*, bool) (Quality:       0       0       0       0       0       0)
0x0014c9c0 OutputDev::drawSoftMaskedImage(GfxState*, Object*, Stream*, int, int, GfxImageColorMap*, bool, Stream*, int, int, GfxImageColorMap*, bool) (Quality:       0       0       0       0       0       0)
0x0014ca00 OutputDev::drawMaskedImage(GfxState*, Object*, Stream*, int, int, GfxImageColorMap*, bool, Stream*, int, int, bool, bool) (Quality:       0       0       0       0       0       0)
0x0014ca40 OutputDev::setSoftMaskFromImageMask(GfxState*, Object*, Stream*, int, int, bool, bool, double*) (Quality:       0       0       0       0       0       0)
0x000b4880 ExponentialFunction::ExponentialFunction(ExponentialFunction const*)@plt (Quality:       0       0       0       0       0       0)
0x0014cd30 OutputDev::getIccColorSpaceCache()                          (Quality:       0       0       0       0       0       0)
0x0014cd40 OutputDev::checkTransparencyGroup(GfxState*, bool)          (Quality:       0       0       0       0       0       0)
0x000b4870 OptionalContentGroup::~OptionalContentGroup()@plt           (Quality:       0       0       0       0       0       0)
0x000b4860 FoFiType1C::readTopDict()@plt                               (Quality:       0       0       0       0       0       0)
0x000b4850 CMYKGrayEncoder::fillBuf()@plt                              (Quality:       0       0       0       0       0       0)
0x000b4840 FoFiType1C::buildEncoding()@plt                             (Quality:       0       0       0       0       0       0)
0x000b4830 PSOutputDev::writeTrailer()@plt                             (Quality:       0       0       0       1       1       1)
0x000b4820 GfxRadialShading::GfxRadialShading(GfxRadialShading*)@plt   (Quality:       0       0       0       0       0       0)
0x000b4810 SplashFTFontEngine::loadType1CFont(SplashFontFileID*, SplashFontSrc*, char const**)@plt (Quality:       0       0       0       0       0       0)
0x000b4800 Annot::Annot(PDFDoc*, Dict*, Object*)@plt                   (Quality:       0       0       0       0       0       0)
0x0014dda0 Page::getResourceDictCopy(XRef*)                            (Quality:       0       0       0       0       0       0)
0x0014de10 Page::replaceXRef(XRef*)                                    (Quality:       0       0       0       0       0       0)
0x000b47f0 TextWord::~TextWord()@plt                                   (Quality:       0       0       0       0       0       0)
0x0014e080 Page::addAnnot(Annot*)                                      (Quality:       0       0       0       0       0       0)
0x0014e260 Page::removeAnnot(Annot*)                                   (Quality:       0       0       0       0       0       0)
0x0014e470 Page::getLinks()                                            (Quality:       0       0       0       0       0       0)
0x0014e4b0 Page::getFormWidgets()                                      (Quality:       0       0       0       0       0       0)
0x0014e510 Page::display(Gfx*)                                         (Quality:       0       0       0       0       0       0)
0x0014e580 Page::loadThumb(unsigned char**, int*, int*, int*)          (Quality:       0       0       0       0       0       0)
0x000b47e0 SplashFont::SplashFont(SplashFontFile*, double*, double*, bool)@plt (Quality:       0       0       0       0       0       0)
0x000b47d0 PDFDoc::writeXRefStreamTrailer(Dict*, XRef*, Ref*, long long, OutStream*, XRef*)@plt (Quality:       0       0       0       0       0       0)
0x000b47c0 SplashFontFile::~SplashFontFile()@plt                       (Quality:       0       0       0       0       0       0)
0x000b47b0 PostScriptFunction::PostScriptFunction(PostScriptFunction const*)@plt (Quality:       0       0       0       0       0       0)
0x0014f380 Page::processLinks(OutputDev*)                              (Quality:       0       0       0       0       0       0)
0x0014f3e0 Page::getDefaultCTM(double*, double, double, int, bool, bool) (Quality:       0       0       0       0       0       0)
0x0014f4a0 Page::getAdditionalAction(Page::PageAdditionalActionsType)  (Quality:       0       0       0       0       0       0)
0x0014f5b0 PageTransition::PageTransition(Object*)                     (Quality:       0       0       0       0       0       0)
0x0014faf0 PageTransition::~PageTransition()                           (Quality:       0       0       0       0       0       0)
0x000b47a0 XRef::unlock()@plt                                          (Quality:       0       0       0       0       0       0)
0x000b4790 UnicodeMap::decRefCnt()@plt                                 (Quality:       0       0       0       0       0       0)
0x0014fba0 Parser::shift(int)                                          (Quality:       0       0       0  100000  100000  100000)
0x000b4780 opj_set_event_mgr@plt                                       (Quality:       0       0       0       0       0       0)
0x000b4770 PSOutputDev::doImageL3(Object*, GfxImageColorMap*, bool, bool, Stream*, int, int, int, int*, Stream*, int, int, bool)@plt (Quality:       0       0       0       0       0       0)
0x00150110 Parser::getObj(Object*, bool, unsigned char*, CryptAlgorithm, int, int, int, int, bool) (Quality:       0       0       0  100000  100000  100000)
0x000b4760 Gfx::opSetMiterLimit(Object*, int)@plt                      (Quality:       0       0       0       0       0       0)
0x001507a0 get_id(GooString*, GooString*)                              (Quality:       0       0       0       0       0       0)
0x00150850 Object::getRef() [clone .isra.22]                           (Quality:       0       0       0       0       0       0)
0x00150890 PDFDoc::init()                                              (Quality:       0       0       0       1       1       1)
0x00150930 PDFDoc::PDFDoc()                                            (Quality:       0       0       0       0       0       0)
0x00150940 PDFDoc::checkFooter()                                       (Quality:       0       0       0       0       0       0)
0x00150a70 PDFDoc::checkHeader()                                       (Quality:       0       0       0       1       1       1)
0x00150b80 PDFDoc::checkEncryption(GooString*, GooString*)             (Quality:       0       0       0       1       1       1)
0x000b4750 Splash::setMatrix(double*)@plt                              (Quality:       0       0       0       0       0       0)
0x000b4740 Gfx::doRadialShFill(GfxRadialShading*)@plt                  (Quality:       0       0       0       0       0       0)
0x00150dd0 PDFDoc::getID(GooString*, GooString*)                       (Quality:       0       0       0       0       0       0)
0x00150f80 PDFDoc::getHints()                                          (Quality:       0       0       0       0       0       0)
0x00151000 PDFDoc::saveWithoutChangesAs(OutStream*)                    (Quality:       0       0       0       0       0       0)
0x00151060 PDFDoc::saveWithoutChangesAs(GooString*)                    (Quality:       0       0       0       0       0       0)
0x001510f0 PDFDoc::writeStream(Stream*, OutStream*)                    (Quality:       0       0       0       0       0       0)
0x00151160 PDFDoc::writeRawStream(Stream*, OutStream*)                 (Quality:       0       0       0       0       0       0)
0x001512d0 PDFDoc::writeString(GooString*, OutStream*, unsigned char*, CryptAlgorithm, int, int, int) (Quality:       0       0       0       0       0       0)
0x00151550 PDFDoc::writeObjectHeader(Ref*, OutStream*)                 (Quality:       0       0       0       0       0       0)
0x00151590 PDFDoc::writeObject(Object*, OutStream*, XRef*, unsigned int, unsigned char*, CryptAlgorithm, int, int, int) (Quality:       0       0       0       0       0       0)
0x00152030 PDFDoc::writeDictionnary(Dict*, OutStream*, XRef*, unsigned int, unsigned char*, CryptAlgorithm, int, int, int) (Quality:       0       0       0       0       0       0)
0x00152170 PDFDoc::writeObjectFooter(OutStream*)                       (Quality:       0       0       0       0       0       0)
0x00152190 PDFDoc::createTrailerDict(int, bool, long long, Ref*, XRef*, char const*, long long) (Quality:       0       0       0       0       0       0)
0x001526b0 PDFDoc::writeXRefTableTrailer(Dict*, XRef*, bool, long long, OutStream*, XRef*) (Quality:       0       0       0       0       0       0)
0x00152760 PDFDoc::writeXRefStreamTrailer(Dict*, XRef*, Ref*, long long, OutStream*, XRef*) (Quality:       0       0       0       0       0       0)
0x001528a0 PDFDoc::writeHeader(OutStream*, int, int)                   (Quality:       0       0       0       0       0       0)
0x001528d0 PDFDoc::replacePageDict(int, int, PDFRectangle*, PDFRectangle*) (Quality:       0       0       0       0       0       0)
0x00152cd0 PDFDoc::markAnnotations(Object*, XRef*, XRef*, unsigned int, int, int) (Quality:       0       0       0       0       0       0)
0x00153360 PDFDoc::markDictionnary(Dict*, XRef*, XRef*, unsigned int, int, int) (Quality:       0       0       0       0       0       0)
0x001534a0 PDFDoc::markObject(Object*, XRef*, XRef*, unsigned int, int, int) (Quality:       0       0       0       0       0       0)
0x001537e0 PDFDoc::markPageObjects(Dict*, XRef*, XRef*, unsigned int, int, int) (Quality:       0       0       0       0       0       0)
0x00153960 PDFDoc::markAcroForm(Object*, XRef*, XRef*, unsigned int, int, int) (Quality:       0       0       0       0       0       0)
0x00153cb0 PDFDoc::writePageObjects(OutStream*, XRef*, unsigned int, bool) (Quality:       0       0       0       0       0       0)
0x00153e80 PDFDoc::getOutline()                                        (Quality:       0       0       0       0       0       0)
0x00153ef0 PDFDoc::ErrorPDFDoc(int, GooString*)                        (Quality:       0       0       0       0       0       0)
0x00153f20 PDFDoc::strToLongLong(char*)                                (Quality:       0       0       0       1       1       1)
0x00153fb0 PDFDoc::getStartXRef(bool)                                  (Quality:       0       0       0       1       1       1)
0x00154280 PDFDoc::saveIncrementalUpdate(OutStream*)                   (Quality:       0       0       0       0       0       0)
0x00154620 PDFDoc::writeXRefTableTrailer(long long, XRef*, bool, int, OutStream*, bool) (Quality:       0       0       0       0       0       0)
0x00154730 PDFDoc::saveCompleteRewrite(OutStream*)                     (Quality:       0       0       0       0       0       0)
0x00154a60 PDFDoc::saveAs(OutStream*, PDFWriteMode)                    (Quality:       0       0       0       0       0       0)
0x00154b00 PDFDoc::saveAs(GooString*, PDFWriteMode)                    (Quality:       0       0       0       0       0       0)
0x00154bb0 PDFDoc::getMainXRefEntriesOffset(bool)                      (Quality:       0       0       0       1       1       1)
0x00154be0 PDFDoc::setup(GooString*, GooString*)                       (Quality:       0       0       0       1       1       1)
0x00154e70 PDFDoc::PDFDoc(GooString*, GooString*, GooString*, void*)   (Quality:       0       0       0       1       1       1)
0x00154f70 PDFDoc::PDFDoc(BaseStream*, GooString*, GooString*, void*)  (Quality:       0       0       0       0       0       0)
0x000b4730 CharCodeToUnicode::parseUnicodeToUnicode(GooString*)@plt    (Quality:       0       0       0       0       0       0)
0x00155070 PDFDoc::~PDFDoc()                                           (Quality:       0       0       0       1       1       1)
0x001551c0 PDFDoc::savePageAs(GooString*, int)                         (Quality:       0       0       0       0       0       0)
0x00155d50 PDFDoc::parsePage(int)                                      (Quality:       0       0       0       0       0       0)
0x000b4720 AnnotAppearanceBBox::AnnotAppearanceBBox(PDFRectangle*)@plt (Quality:       0       0       0       0       0       0)
0x000b4710 GfxState::setTransfer(Function**)@plt                       (Quality:       0       0       0       0       0       0)
0x00156180 PDFDoc::displayPages(OutputDev*, int, int, double, double, int, bool, bool, bool, bool (*)(void*), void*, bool (*)(Annot*, void*), void*) (Quality:       0       0       0       0       0       0)
0x00156250 PDFDoc::displayPageSlice(OutputDev*, int, double, double, int, bool, bool, bool, int, int, int, int, bool (*)(void*), void*, bool (*)(Annot*, void*), void*, bool) (Quality:       0       0       0       0       0       0)
0x001563b0 PDFDoc::getLinks(int)                                       (Quality:       0       0       0       0       0       0)
0x001563f0 PDFDoc::processLinks(OutputDev*, int)                       (Quality:       0       0       0       0       0       0)
0x00156430 BaseStream::getFileName()                                   (Quality:       0       0       0       0       0       0)
0x00156440 BaseStream::getLength()                                     (Quality:       0       0       0       0       0       0)
0x00156450 PDFDocFactory::PDFDocFactory(GooList*)                      (Quality:       0       0       0       1       1       1)
0x001564e0 PDFDocFactory::~PDFDocFactory()                             (Quality:       0       0       0       1       1       1)
0x00156540 PDFDocFactory::createPDFDoc(GooString const&, GooString*, GooString*, void*) (Quality:       0       0       0       1       1       1)
0x00156630 PDFDocFactory::registerPDFDocBuilder(PDFDocBuilder*)        (Quality:       0       0       0       0       0       0)
0x00156640 PopplerCacheItem::~PopplerCacheItem()                       (Quality:       0       0       0       0       0       0)
0x00156650 PopplerCacheItem::~PopplerCacheItem()                       (Quality:       0       0       0       0       0       0)
0x00156670 PopplerCacheKey::~PopplerCacheKey()                         (Quality:       0       0       0       0       0       0)
0x00156680 PopplerCacheKey::~PopplerCacheKey()                         (Quality:       0       0       0       0       0       0)
0x000b4700 NameTree::lookup(GooString*, Object*)@plt                   (Quality:       0       0       0       0       0       0)
0x000b46f0 AnnotGeometry::initialize(PDFDoc*, Dict*)@plt               (Quality:       0       0       0       0       0       0)
0x00156780 PopplerCache::lookup(PopplerCacheKey const&)                (Quality:       0       0       0       0       0       0)
0x001568d0 PopplerCache::put(PopplerCacheKey*, PopplerCacheItem*)      (Quality:       0       0       0       0       0       0)
0x00156990 PopplerCache::size()                                        (Quality:       0       0       0       0       0       0)
0x001569a0 PopplerCache::numberOfItems()                               (Quality:       0       0       0       0       0       0)
0x001569b0 PopplerCache::item(int)                                     (Quality:       0       0       0       0       0       0)
0x001569c0 PopplerCache::key(int)                                      (Quality:       0       0       0       0       0       0)
0x000b46e0 GlobalParams::getMinLineWidth()@plt                         (Quality:       0       0       0       0       0       0)
0x000b46c0 Gfx::popMarkedContent()@plt                                 (Quality:       0       0       0       0       0       0)
0x00156a40 PopplerObjectCache::put(Ref const&)                         (Quality:       0       0       0       0       0       0)
0x00156b00 PopplerObjectCache::lookup(Ref const&, Object*)             (Quality:       0       0       0       0       0       0)
0x00156b80 ObjectKey::operator==(PopplerCacheKey const&) const         (Quality:       0       0       0       0       0       0)
0x00156b90 ObjectItem::~ObjectItem()                                   (Quality:       0       0       0       0       0       0)
0x00156bc0 ObjectItem::~ObjectItem()                                   (Quality:       0       0       0       0       0       0)
0x00156bf0 ObjectKey::~ObjectKey()                                     (Quality:       0       0       0       0       0       0)
0x00156c10 ObjectKey::~ObjectKey()                                     (Quality:       0       0       0       0       0       0)
0x00156c30 ProfileData::ProfileData()                                  (Quality:       0       0       0       0       0       0)
0x00156c50 ProfileData::addElement(double)                             (Quality:       0       0       0       0       0       0)
0x000b46b0 FormFieldButton::setNumSiblings(int)@plt                    (Quality:       0       0       0       0       0       0)
0x000b46a0 PDFDoc::init()@plt                                          (Quality:       0       0       0       1       1       1)
0x00156cd0 PreScanOutputDev::functionShadedFill(GfxState*, GfxFunctionShading*) (Quality:       0       0       0       0       0       0)
0x00156d60 PreScanOutputDev::axialShadedFill(GfxState*, GfxAxialShading*, double, double) (Quality:       0       0       0       0       0       0)
0x00156df0 PreScanOutputDev::radialShadedFill(GfxState*, GfxRadialShading*, double, double) (Quality:       0       0       0       0       0       0)
0x00156e80 PreScanOutputDev::clip(GfxState*)                           (Quality:       0       0       0       4       4       4)
0x00156e90 PreScanOutputDev::eoClip(GfxState*)                         (Quality:       0       0       0       0       0       0)
0x000b4690 AnnotAppearanceCharacs::~AnnotAppearanceCharacs()@plt       (Quality:       0       0       0       0       0       0)
0x00156eb0 PreScanOutputDev::beginType3Char(GfxState*, double, double, double, double, unsigned int, unsigned int*, int) (Quality:       0       0       0       0       0       0)
0x00156ec0 PreScanOutputDev::endType3Char(GfxState*)                   (Quality:       0       0       0       0       0       0)
0x00156ed0 PreScanOutputDev::drawImage(GfxState*, Object*, Stream*, int, int, GfxImageColorMap*, bool, int*, bool) (Quality:       0       0       0       1       1       1)
0x00157060 PreScanOutputDev::drawMaskedImage(GfxState*, Object*, Stream*, int, int, GfxImageColorMap*, bool, Stream*, int, int, bool, bool) (Quality:       0       0       0       0       0       0)
0x00157120 PreScanOutputDev::drawSoftMaskedImage(GfxState*, Object*, Stream*, int, int, GfxImageColorMap*, bool, Stream*, int, int, GfxImageColorMap*, bool) (Quality:       0       0       0       0       0       0)
0x001571a0 PreScanOutputDev::beginTransparencyGroup(GfxState*, double*, GfxColorSpace*, bool, bool, bool) (Quality:       0       0       0       0       0       0)
0x001571b0 PreScanOutputDev::setSoftMask(GfxState*, double*, bool, Function*, GfxColor*) (Quality:       0       0       0       0       0       0)
0x000b4680 PostScriptFunction::PostScriptFunction(Object*, Dict*)@plt  (Quality:       0       0       0       0       0       0)
0x000b4660 SplashFontEngine::SplashFontEngine(bool, bool, bool, bool)@plt (Quality:       0       0       0       0       0       0)
0x000b4650 AnnotMarkup::~AnnotMarkup()@plt                             (Quality:       0       0       0       0       0       0)
0x001572f0 PreScanOutputDev::stroke(GfxState*)                         (Quality:       0       0       0       0       0       0)
0x00157340 PreScanOutputDev::fill(GfxState*)                           (Quality:       0       0       0       0       0       0)
0x000b4640 AnnotLine::AnnotLine(PDFDoc*, Dict*, Object*)@plt           (Quality:       0       0       0       0       0       0)
0x00157380 PreScanOutputDev::tilingPatternFill(GfxState*, Gfx*, Catalog*, Object*, double*, int, int, Dict*, double*, double*, int, int, int, int, double, double) (Quality:       0       0       0       0       0       0)
0x000b4630 Gfx::doPatternStroke()@plt                                  (Quality:       0       0       0       0       0       0)
0x001575a0 PreScanOutputDev::drawImageMask(GfxState*, Object*, Stream*, int, int, bool, bool, bool) (Quality:       0       0       0       1       1       1)
0x001576a0 PreScanOutputDev::paintTransparencyGroup(GfxState*, double*) (Quality:       0       0       0       0       0       0)
0x000b4620 SplashOutputDev::univariateShadedFill(GfxState*, SplashUnivariatePattern*, double, double)@plt (Quality:       0       0       0       0       0       0)
0x000b4600 ASCIIHexEncoder::~ASCIIHexEncoder()@plt                     (Quality:       0       0       0       0       0       0)
0x000b45f0 void std::__adjust_heap<SplashScreenPoint*, long, SplashScreenPoint, __gnu_cxx::__ops::_Iter_comp_iter<cmpDistancesFunctor> >(SplashScreenPoint*, long, long, SplashScreenPoint, __gnu_cxx::__ops::_Iter_comp_iter<cmpDistancesFunctor>)@plt (Quality:       0       0       0       0       0       0)
0x00157770 PreScanOutputDev::useDrawChar()                             (Quality:       0       0       0  100000  100000  100000)
0x00157780 PreScanOutputDev::useTilingPatternFill()                    (Quality:       0       0       0       0       0       0)
0x00157790 PreScanOutputDev::useShadedFills(int)                       (Quality:       0       0       0       0       0       0)
0x001577a0 PreScanOutputDev::interpretType3Chars()                     (Quality:       0       0       0       0       0       0)
0x000b45e0 void std::__heap_select<DictEntry*, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(DictEntry const&, DictEntry const&)> >(DictEntry*, DictEntry*, DictEntry*, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(DictEntry const&, DictEntry const&)>)@plt (Quality:       0       0       0       0       0       0)
0x000b45c0 GlobalParams::getScreenWhiteThreshold()@plt                 (Quality:       0       0       0       0       0       0)
0x001577d0 PSTokenizer::lookChar()                                     (Quality:       0       0       0  100000  100000  100000)
0x001577f0 PSTokenizer::consumeChar()                                  (Quality:       0       0       0  100000  100000  100000)
0x000b45b0 GfxPath::close()@plt                                        (Quality:       0       0       0       8       8       8)
0x000b4590 JBIG2PatternDict::~JBIG2PatternDict()@plt                   (Quality:       0       0       0       0       0       0)
0x00157a20 MediaWindowParameters::MediaWindowParameters()              (Quality:       0       0       0       0       0       0)
0x00157a60 MediaWindowParameters::~MediaWindowParameters()             (Quality:       0       0       0       0       0       0)
0x00157a70 MediaWindowParameters::parseFWParams(Object*)               (Quality:       0       0       0       0       0       0)
0x00157ed0 MediaParameters::MediaParameters()                          (Quality:       0       0       0       0       0       0)
0x00157f10 MediaParameters::~MediaParameters()                         (Quality:       0       0       0       0       0       0)
0x00157f20 MediaParameters::parseMediaPlayParameters(Object*)          (Quality:       0       0       0       0       0       0)
0x00158400 MediaParameters::parseMediaScreenParameters(Object*)        (Quality:       0       0       0       0       0       0)
0x001587e0 MediaRendition::~MediaRendition()                           (Quality:       0       0       0       0       0       0)
0x00158860 MediaRendition::MediaRendition(Object*)                     (Quality:       0       0       0       0       0       0)
0x00158e40 MediaRendition::outputToFile(_IO_FILE*)                     (Quality:       0       0       0       0       0       0)
0x00158eb0 MediaRendition::copy()                                      (Quality:       0       0       0       0       0       0)
0x00158f50 StdinCacheLoader::load(std::vector<_ByteRange, std::allocator<_ByteRange> > const&, CachedFileWriter*) (Quality:       0       0       0       0       0       0)
0x00158f60 StdinCacheLoader::init(GooString*, CachedFile*)             (Quality:       0       0       0       0       0       0)
0x00158fe0 StdinCacheLoader::~StdinCacheLoader()                       (Quality:       0       0       0       0       0       0)
0x00158ff0 StdinCacheLoader::~StdinCacheLoader()                       (Quality:       0       0       0       0       0       0)
0x00159000 StdinPDFDocBuilder::buildPDFDoc(GooString const&, GooString*, GooString*, void*) (Quality:       0       0       0       0       0       0)
0x001590b0 StdinPDFDocBuilder::supports(GooString const&)              (Quality:       0       0       0       1       1       1)
0x001590e0 StdinPDFDocBuilder::~StdinPDFDocBuilder()                   (Quality:       0       0       0       0       0       0)
0x001590f0 StdinPDFDocBuilder::~StdinPDFDocBuilder()                   (Quality:       0       0       0       1       1       1)
0x00159100 Stream::close()                                             (Quality:       0       0       0       0       0       0)
0x00159110 Stream::getLine(char*, int)                                 (Quality:       0       0       0       0       0       0)
0x001591c0 FileOutStream::close()                                      (Quality:       0       0       0       0       0       0)
0x000b4580 OCGs::OCGs(Object*, XRef*)@plt                              (Quality:       0       0       0       0       0       0)
0x000b4570 AnnotInk::AnnotInk(PDFDoc*, Dict*, Object*)@plt             (Quality:       0       0       0       0       0       0)
0x000b4560 AnnotFileAttachment::initialize(PDFDoc*, Dict*)@plt         (Quality:       0       0       0       0       0       0)
0x00159240 FileStream::moveStart(long long)                            (Quality:       0       0       0       1       1       1)
0x00159270 CachedFileStream::moveStart(long long)                      (Quality:       0       0       0       0       0       0)
0x001592a0 MemStream::reset()                                          (Quality:       0       0       0       0       0       0)
0x001592b0 MemStream::close()                                          (Quality:       0       0       0       0       0       0)
0x001592c0 MemStream::setPos(long long, int)                           (Quality:       0       0       0       0       0       0)
0x00159310 MemStream::moveStart(long long)                             (Quality:       0       0       0       0       0       0)
0x00159330 EmbedStream::getChar()                                      (Quality:       0       0       0       0       0       0)
0x00159360 EmbedStream::lookChar()                                     (Quality:       0       0       0       0       0       0)
0x00159390 ASCIIHexStream::reset()                                     (Quality:       0       0       0       0       0       0)
0x001593b0 ASCIIHexStream::isBinary(bool)                              (Quality:       0       0       0       0       0       0)
0x001593c0 ASCII85Stream::reset()                                      (Quality:       0       0       0       0       0       0)
0x001593f0 ASCII85Stream::isBinary(bool)                               (Quality:       0       0       0       0       0       0)
0x00159400 LZWStream::isBinary(bool)                                   (Quality:       0       0       0       0       0       0)
0x00159420 RunLengthStream::reset()                                    (Quality:       0       0       0       0       0       0)
0x00159450 RunLengthStream::isBinary(bool)                             (Quality:       0       0       0       0       0       0)
0x00159470 CCITTFaxStream::isBinary(bool)                              (Quality:       0       0       0       1       1       1)
0x00159490 FlateStream::isBinary(bool)                                 (Quality:       0       0       0       0       0       0)
0x001594b0 BufStream::reset()                                          (Quality:       0       0       0       0       0       0)
0x00159510 BufStream::getChar()                                        (Quality:       0       0       0       0       0       0)
0x00159560 BufStream::lookChar()                                       (Quality:       0       0       0       0       0       0)
0x00159570 BufStream::isBinary(bool)                                   (Quality:       0       0       0       0       0       0)
0x00159590 FixedLengthEncoder::reset()                                 (Quality:       0       0       0       0       0       0)
0x001595b0 FixedLengthEncoder::getChar()                               (Quality:       0       0       0       0       0       0)
0x001595e0 FixedLengthEncoder::lookChar()                              (Quality:       0       0       0       0       0       0)
0x00159610 FixedLengthEncoder::isBinary(bool)                          (Quality:       0       0       0       0       0       0)
0x00159630 ASCIIHexEncoder::reset()                                    (Quality:       0       0       0       0       0       0)
0x00159660 ASCII85Encoder::reset()                                     (Quality:       0       0       0       2       2       2)
0x00159690 RunLengthEncoder::reset()                                   (Quality:       0       0       0       0       0       0)
0x001596c0 CMYKGrayEncoder::reset()                                    (Quality:       0       0       0       0       0       0)
0x001596e0 RGBGrayEncoder::reset()                                     (Quality:       0       0       0       0       0       0)
0x00159700 Stream::getRawChar()                                        (Quality:       0       0       0       0       0       0)
0x00159730 Stream::getChars(int, unsigned char*)                       (Quality:       0       0       0       0       0       0)
0x00159760 Stream::getRawChars(int, int*)                              (Quality:       0       0       0       0       0       0)
0x00159780 FilterStream::setPos(long long, int)                        (Quality:       0       0       0       0       0       0)
0x001597a0 EmbedStream::copy()                                         (Quality:       0       0       0       0       0       0)
0x001597d0 EmbedStream::makeSubStream(long long, bool, long long, Object*) (Quality:       0       0       0       0       0       0)
0x00159800 EmbedStream::setPos(long long, int)                         (Quality:       0       0       0       0       0       0)
0x00159820 EmbedStream::getStart()                                     (Quality:       0       0       0       0       0       0)
0x00159850 EmbedStream::moveStart(long long)                           (Quality:       0       0       0       0       0       0)
0x00159870 Stream::getPSFilter(int, char const*)                       (Quality:       0       0       0       2       2       2)
0x00159890 FileOutStream::getPos()                                     (Quality:       0       0       0       0       0       0)
0x001598a0 FileOutStream::put(char)                                    (Quality:       0       0       0       0       0       0)
0x001598b0 FileOutStream::printf(char const*, ...)                     (Quality:       0       0       0       0       0       0)
0x00159950 MemStream::getChars(int, unsigned char*)                    (Quality:       0       0       0       0       0       0)
0x000b4550 GfxImageColorMap::getColor(unsigned char*, GfxColor*)@plt   (Quality:       0       0       0       0       0       0)
0x00159a10 CachedFileStream::reset()                                   (Quality:       0       0       0       0       0       0)
0x00159a60 CachedFileStream::setPos(long long, int)                    (Quality:       0       0       0       0       0       0)
0x00159af0 ASCIIHexStream::getPSFilter(int, char const*)               (Quality:       0       0       0       0       0       0)
0x00159b50 ASCII85Stream::getPSFilter(int, char const*)                (Quality:       0       0       0       0       0       0)
0x00159bb0 RunLengthStream::getPSFilter(int, char const*)              (Quality:       0       0       0       0       0       0)
0x00159c10 ASCII85Stream::lookChar()                                   (Quality:       0       0       0       0       0       0)
0x00159db0 CCITTFaxStream::getPSFilter(int, char const*)               (Quality:       0       0       0       1       1       1)
0x00159f70 CachedFileStream::close()                                   (Quality:       0       0       0       0       0       0)
0x00159fa0 LZWStream::getPSFilter(int, char const*)                    (Quality:       0       0       0       0       0       0)
0x0015a040 FlateStream::getPSFilter(int, char const*)                  (Quality:       0       0       0       0       0       0)
0x0015a0b0 Object::getBool() [clone .isra.12]                          (Quality:       0       0       0       0       0       0)
0x0015a0f0 Object::dictLookup(char const*, Object*, int) [clone .isra.20] (Quality:       0       0       0       0       0       0)
0x0015a140 EmbedStream::getChars(int, unsigned char*)                  (Quality:       0       0       0       0       0       0)
0x0015a220 ASCIIHexStream::lookChar()                                  (Quality:       0       0       0       0       0       0)
0x000b4540 __ctype_tolower_loc@plt                                     (Quality:       0       0       0       0       0       0)
0x000b4520 jpeg_simple_progression@plt                                 (Quality:       0       0       0       0       0       0)
0x0015a480 Stream::~Stream()                                           (Quality:       0       0       0       0       0       0)
0x000b4500 GfxCalRGBColorSpace::getXYZ(GfxColor*, double*, double*, double*)@plt (Quality:       0       0       0       0       0       0)
0x000b44f0 FoFiType1C::getFontMatrix(double*)@plt                      (Quality:       0       0       0       0       0       0)
0x0015a500 OutStream::OutStream()                                      (Quality:       0       0       0       0       0       0)
0x0015a520 OutStream::~OutStream()                                     (Quality:       0       0       0       0       0       0)
0x0015a530 FileOutStream::~FileOutStream()                             (Quality:       0       0       0       0       0       0)
0x0015a550 FileOutStream::~FileOutStream()                             (Quality:       0       0       0       0       0       0)
0x0015a570 OutStream::~OutStream()                                     (Quality:       0       0       0       0       0       0)
0x0015a590 FileOutStream::FileOutStream(_IO_FILE*, long long)          (Quality:       0       0       0       0       0       0)
0x000b44e0 GfxState::ReusablePathIterator::reset()@plt                 (Quality:       0       0       0       0       0       0)
0x000b44d0 GfxRadialShading::parse(GfxResources*, Dict*, OutputDev*, GfxState*)@plt (Quality:       0       0       0       0       0       0)
0x000b44b0 ungetc@plt                                                  (Quality:       0       0       0       0       0       0)
0x000b44a0 RGBGrayEncoder::~RGBGrayEncoder()@plt                       (Quality:       0       0       0       0       0       0)
0x0015a680 CachedFileStream::~CachedFileStream()                       (Quality:       0       0       0       0       0       0)
0x0015a6b0 CachedFileStream::~CachedFileStream()                       (Quality:       0       0       0       0       0       0)
0x0015a6d0 MemStream::~MemStream()                                     (Quality:       0       0       0       0       0       0)
0x0015a700 MemStream::~MemStream()                                     (Quality:       0       0       0       0       0       0)
0x0015a720 EmbedStream::~EmbedStream()                                 (Quality:       0       0       0       0       0       0)
0x0015a740 EmbedStream::~EmbedStream()                                 (Quality:       0       0       0       0       0       0)
0x0015a760 BaseStream::~BaseStream()                                   (Quality:       0       0       0       0       0       0)
0x000b4490 Gfx::doPatternImageMask(Object*, Stream*, int, int, bool, bool)@plt (Quality:       0       0       0       0       0       0)
0x000b4480 Array::add(Object*)@plt                                     (Quality:       0       0       0  100000  100000  100000)
0x0015a7d0 ASCIIHexStream::~ASCIIHexStream()                           (Quality:       0       0       0       0       0       0)
0x0015a800 ASCIIHexStream::~ASCIIHexStream()                           (Quality:       0       0       0       0       0       0)
0x0015a820 ASCII85Stream::~ASCII85Stream()                             (Quality:       0       0       0       0       0       0)
0x0015a850 ASCII85Stream::~ASCII85Stream()                             (Quality:       0       0       0       0       0       0)
0x0015a870 RunLengthStream::~RunLengthStream()                         (Quality:       0       0       0       0       0       0)
0x0015a8a0 RunLengthStream::~RunLengthStream()                         (Quality:       0       0       0       0       0       0)
0x0015a8c0 CCITTFaxStream::~CCITTFaxStream()                           (Quality:       0       0       0       3       3       3)
0x0015a900 CCITTFaxStream::~CCITTFaxStream()                           (Quality:       0       0       0       3       3       3)
0x0015a920 EOFStream::~EOFStream()                                     (Quality:       0       0       0       0       0       0)
0x0015a950 EOFStream::~EOFStream()                                     (Quality:       0       0       0       0       0       0)
0x0015a970 BufStream::~BufStream()                                     (Quality:       0       0       0       0       0       0)
0x0015a9b0 BufStream::~BufStream()                                     (Quality:       0       0       0       0       0       0)
0x0015a9d0 FixedLengthEncoder::~FixedLengthEncoder()                   (Quality:       0       0       0       0       0       0)
0x0015aa10 FixedLengthEncoder::~FixedLengthEncoder()                   (Quality:       0       0       0       0       0       0)
0x0015aa30 ASCIIHexEncoder::~ASCIIHexEncoder()                         (Quality:       0       0       0       0       0       0)
0x0015aa70 ASCIIHexEncoder::~ASCIIHexEncoder()                         (Quality:       0       0       0       0       0       0)
0x0015aa90 ASCII85Encoder::~ASCII85Encoder()                           (Quality:       0       0       0       2       2       2)
0x0015aad0 ASCII85Encoder::~ASCII85Encoder()                           (Quality:       0       0       0       2       2       2)
0x0015aaf0 RunLengthEncoder::~RunLengthEncoder()                       (Quality:       0       0       0       0       0       0)
0x0015ab30 RunLengthEncoder::~RunLengthEncoder()                       (Quality:       0       0       0       0       0       0)
0x0015ab50 CMYKGrayEncoder::~CMYKGrayEncoder()                         (Quality:       0       0       0       0       0       0)
0x0015ab90 CMYKGrayEncoder::~CMYKGrayEncoder()                         (Quality:       0       0       0       0       0       0)
0x0015abb0 RGBGrayEncoder::~RGBGrayEncoder()                           (Quality:       0       0       0       0       0       0)
0x0015abf0 RGBGrayEncoder::~RGBGrayEncoder()                           (Quality:       0       0       0       0       0       0)
0x0015ac10 FilterStream::~FilterStream()                               (Quality:       0       0       0       0       0       0)
0x0015ac30 ImageStream::ImageStream(Stream*, int, int, int)            (Quality:       0       0       0       0       0       0)
0x0015acf0 ImageStream::~ImageStream()                                 (Quality:       0       0       0       0       0       0)
0x0015ad30 ImageStream::reset()                                        (Quality:       0       0       0       0       0       0)
0x0015ad40 ImageStream::close()                                        (Quality:       0       0       0       0       0       0)
0x0015ad50 ImageStream::getLine()                                      (Quality:       0       0       0       0       0       0)
0x0015afa0 ImageStream::getPixel(unsigned char*)                       (Quality:       0       0       0       0       0       0)
0x0015b020 ImageStream::skipLine()                                     (Quality:       0       0       0       0       0       0)
0x0015b0a0 StreamPredictor::StreamPredictor(Stream*, int, int, int, int) (Quality:       0       0       0       0       0       0)
0x0015b160 StreamPredictor::~StreamPredictor()                         (Quality:       0       0       0       0       0       0)
0x0015b170 LZWStream::~LZWStream()                                     (Quality:       0       0       0       0       0       0)
0x0015b1c0 LZWStream::~LZWStream()                                     (Quality:       0       0       0       0       0       0)
0x000b4470 LinkGoToR::LinkGoToR(Object*, Object*)@plt                  (Quality:       0       0       0       0       0       0)
0x000b4460 PageLabelInfo::parse(Object*)@plt                           (Quality:       0       0       0       0       0       0)
0x0015b280 StreamPredictor::getNextLine()                              (Quality:       0       0       0       0       0       0)
0x0015b6b0 StreamPredictor::lookChar()                                 (Quality:       0       0       0       0       0       0)
0x0015b6f0 StreamPredictor::getChar()                                  (Quality:       0       0       0       0       0       0)
0x0015b730 StreamPredictor::getChars(int, unsigned char*)              (Quality:       0       0       0       0       0       0)
0x000b4450 TextBlock::isBeforeByRule2(TextBlock*)@plt                  (Quality:       0       0       0       0       0       0)
0x0015b840 FileStream::copy()                                          (Quality:       0       0       0       0       0       0)
0x000b4440 UnicodeMapCache::~UnicodeMapCache()@plt                     (Quality:       0       0       0       1       1       1)
0x000b4430 FoFiTrueType::charToTag(char const*)@plt                    (Quality:       0       0       0       0       0       0)
0x0015b990 CachedFileStream::CachedFileStream(CachedFile*, long long, bool, long long, Object*) (Quality:       0       0       0       0       0       0)
0x0015ba10 CachedFileStream::copy()                                    (Quality:       0       0       0       0       0       0)
0x0015ba60 CachedFileStream::makeSubStream(long long, bool, long long, Object*) (Quality:       0       0       0       0       0       0)
0x0015bac0 CachedFileStream::fillBuf()                                 (Quality:       0       0       0       0       0       0)
0x0015bb60 MemStream::MemStream(char*, long long, long long, Object*)  (Quality:       0       0       0       0       0       0)
0x0015bbc0 MemStream::copy()                                           (Quality:       0       0       0       0       0       0)
0x0015bc00 MemStream::makeSubStream(long long, bool, long long, Object*) (Quality:       0       0       0       0       0       0)
0x0015bc80 EmbedStream::EmbedStream(Stream*, Object*, bool, long long) (Quality:       0       0       0       0       0       0)
0x0015bcd0 ASCIIHexStream::ASCIIHexStream(Stream*)                     (Quality:       0       0       0       0       0       0)
0x0015bd00 ASCII85Stream::ASCII85Stream(Stream*)                       (Quality:       0       0       0       0       0       0)
0x0015bd30 LZWStream::clearTable()                                     (Quality:       0       0       0       0       0       0)
0x0015bd60 LZWStream::LZWStream(Stream*, int, int, int, int, int)      (Quality:       0       0       0       0       0       0)
0x0015be20 LZWStream::reset()                                          (Quality:       0       0       0       0       0       0)
0x0015be50 LZWStream::getCode()                                        (Quality:       0       0       0       0       0       0)
0x0015bec0 LZWStream::processNextCode()                                (Quality:       0       0       0       0       0       0)
0x0015c130 LZWStream::getChar()                                        (Quality:       0       0       0       0       0       0)
0x0015c1a0 LZWStream::lookChar()                                       (Quality:       0       0       0       0       0       0)
0x0015c210 LZWStream::getRawChar()                                     (Quality:       0       0       0       0       0       0)
0x0015c270 LZWStream::getChars(int, unsigned char*)                    (Quality:       0       0       0       0       0       0)
0x0015c340 LZWStream::getRawChars(int, int*)                           (Quality:       0       0       0       0       0       0)
0x0015c3d0 RunLengthStream::RunLengthStream(Stream*)                   (Quality:       0       0       0       0       0       0)
0x0015c410 RunLengthStream::fillBuf()                                  (Quality:       0       0       0       0       0       0)
0x0015c500 RunLengthStream::getChars(int, unsigned char*)              (Quality:       0       0       0       0       0       0)
0x0015c5b0 CCITTFaxStream::CCITTFaxStream(Stream*, int, bool, bool, int, int, bool, bool) (Quality:       0       0       0       3       3       3)
0x0015c6e0 CCITTFaxStream::ccittReset(bool)                            (Quality:       0       0       0       0       0       0)
0x0015c730 CCITTFaxStream::unfilteredReset()                           (Quality:       0       0       0       0       0       0)
0x0015c740 CCITTFaxStream::lookBits(int)                               (Quality:       0       0       0       0       0       0)
0x0015c7d0 CCITTFaxStream::reset()                                     (Quality:       0       0       0       0       0       0)
0x0015c890 CCITTFaxStream::getTwoDimCode()                             (Quality:       0       0       0       0       0       0)
0x0015ca00 CCITTFaxStream::getWhiteCode()                              (Quality:       0       0       0       0       0       0)
0x0015cc10 CCITTFaxStream::getBlackCode()                              (Quality:       0       0       0       0       0       0)
0x0015ced0 CCITTFaxStream::lookChar()                                  (Quality:       0       0       0       0       0       0)
0x000b4420 XRef::copy()@plt                                            (Quality:       0       0       0       0       0       0)
0x000b4410 Linearization::Linearization(BaseStream*)@plt               (Quality:       0       0       0       1       1       1)
0x0015e510 FlateStream::unfilteredReset()                              (Quality:       0       0       0       0       0       0)
0x000b4400 SplashFontEngine::getFont(SplashFontFile*, double*, double*)@plt (Quality:       0       0       0       0       0       0)
0x000b43e0 SplashXPath::~SplashXPath()@plt                             (Quality:       0       0       0       0       0       0)
0x000b43d0 __ctype_toupper_loc@plt                                     (Quality:       0       0       0       0       0       0)
0x0015e810 FlateStream::getHuffmanCodeWord(FlateHuffmanTab*)           (Quality:       0       0       0  100000  100000  100000)
0x0015e8d0 FlateStream::getCodeWord(int)                               (Quality:       0       0       0  100000  100000  100000)
0x000b43c0 CharCodeToUnicode::parseCIDToUnicode(GooString*, GooString*)@plt (Quality:       0       0       0       0       0       0)
0x000b43b0 SecurityHandler::checkEncryption(GooString*, GooString*)@plt (Quality:       0       0       0       0       0       0)
0x0015ee80 FlateStream::readSome()                                     (Quality:       0       0       0  100000  100000  100000)
0x0015f0d0 FlateStream::getChar()                                      (Quality:       0       0       0  100000  100000  100000)
0x000b43a0 MarkedContentOutputDev::MarkedContentOutputDev(int)@plt     (Quality:       0       0       0       0       0       0)
0x0015f1a0 FlateStream::getRawChar()                                   (Quality:       0       0       0       0       0       0)
0x0015f210 FlateStream::getRawChars(int, int*)                         (Quality:       0       0       0       0       0       0)
0x000b4390 SplashRadialPattern::SplashRadialPattern(SplashColorMode, GfxState*, GfxRadialShading*)@plt (Quality:       0       0       0       0       0       0)
0x0015f380 EOFStream::EOFStream(Stream*)                               (Quality:       0       0       0       0       0       0)
0x000b4380 GfxCIDFont::getCollection()@plt                             (Quality:       0       0       0       0       0       0)
0x000b4370 FT_Set_Pixel_Sizes@plt                                      (Quality:       0       0       0       0       0       0)
0x00160150 BufStream::BufStream(Stream*, int)                          (Quality:       0       0       0       0       0       0)
0x00160190 BufStream::lookChar(int)                                    (Quality:       0       0       0       0       0       0)
0x001601a0 FixedLengthEncoder::FixedLengthEncoder(Stream*, int)        (Quality:       0       0       0       0       0       0)
0x001601d0 ASCIIHexEncoder::ASCIIHexEncoder(Stream*)                   (Quality:       0       0       0       0       0       0)
0x00160200 ASCIIHexEncoder::fillBuf()                                  (Quality:       0       0       0       0       0       0)
0x001602b0 ASCII85Encoder::ASCII85Encoder(Stream*)                     (Quality:       0       0       0       2       2       2)
0x001c4310 SplashXPathScanner::SplashXPathScanner(SplashXPath*, bool, int, int) (Quality:       0       0       0       0       0       0)
0x00160530 RunLengthEncoder::RunLengthEncoder(Stream*)                 (Quality:       0       0       0       0       0       0)
0x00160570 RunLengthEncoder::fillBuf()                                 (Quality:       0       0       0       0       0       0)
0x00160800 CMYKGrayEncoder::CMYKGrayEncoder(Stream*)                   (Quality:       0       0       0       0       0       0)
0x00160830 CMYKGrayEncoder::fillBuf()                                  (Quality:       0       0       0       0       0       0)
0x001608f0 RGBGrayEncoder::RGBGrayEncoder(Stream*)                     (Quality:       0       0       0       0       0       0)
0x00160920 RGBGrayEncoder::fillBuf()                                   (Quality:       0       0       0       0       0       0)
0x001609e0 Stream::getNextStream()                                     (Quality:       0       0       0       0       0       0)
0x001609f0 BaseStream::isBinary(bool)                                  (Quality:       0       0       0       2       2       2)
0x000b4350 TextPool::addWord(TextWord*)@plt                            (Quality:       0       0       0       0       0       0)
0x00160a10 BaseStream::getUndecodedStream()                            (Quality:       0       0       0       2       2       2)
0x00160a20 FileStream::getKind()                                       (Quality:       0       0       0       0       0       0)
0x000b4330 void std::__introsort_loop<SplashScreenPoint*, long, __gnu_cxx::__ops::_Iter_comp_iter<cmpDistancesFunctor> >(SplashScreenPoint*, SplashScreenPoint*, long, __gnu_cxx::__ops::_Iter_comp_iter<cmpDistancesFunctor>)@plt (Quality:       0       0       0       0       0       0)
0x00160a50 FileStream::getStart()                                      (Quality:       0       0       0       2       2       2)
0x00160a60 FileStream::hasGetChars()                                   (Quality:       0       0       0       0       0       0)
0x00160a70 CachedFileStream::getKind()                                 (Quality:       0       0       0       0       0       0)
0x00160a80 CachedFileStream::getPos()                                  (Quality:       0       0       0       0       0       0)
0x00160aa0 CachedFileStream::getStart()                                (Quality:       0       0       0       0       0       0)
0x00160ab0 CachedFileStream::unfilteredReset()                         (Quality:       0       0       0       0       0       0)
0x00160ac0 MemStream::getKind()                                        (Quality:       0       0       0       0       0       0)
0x00160ad0 MemStream::getChar()                                        (Quality:       0       0       0       0       0       0)
0x00160b00 MemStream::lookChar()                                       (Quality:       0       0       0       0       0       0)
0x00160b20 MemStream::getPos()                                         (Quality:       0       0       0       0       0       0)
0x00160b30 MemStream::getStart()                                       (Quality:       0       0       0       0       0       0)
0x00160b40 MemStream::hasGetChars()                                    (Quality:       0       0       0       0       0       0)
0x00160b50 EmbedStream::getKind()                                      (Quality:       0       0       0       0       0       0)
0x00160b60 EmbedStream::reset()                                        (Quality:       0       0       0       0       0       0)
0x00160b70 EmbedStream::getPos()                                       (Quality:       0       0       0       0       0       0)
0x00160b80 EmbedStream::getUnfilteredChar()                            (Quality:       0       0       0       0       0       0)
0x00160b90 EmbedStream::unfilteredReset()                              (Quality:       0       0       0       0       0       0)
0x00160ba0 EmbedStream::hasGetChars()                                  (Quality:       0       0       0       0       0       0)
0x00160bb0 ASCIIHexStream::getKind()                                   (Quality:       0       0       0       0       0       0)
0x00160bc0 ASCIIHexStream::getChar()                                   (Quality:       0       0       0       0       0       0)
0x00160be0 ASCII85Stream::getKind()                                    (Quality:       0       0       0       0       0       0)
0x00160bf0 ASCII85Stream::getChar()                                    (Quality:       0       0       0       0       0       0)
0x00160c00 LZWStream::getKind()                                        (Quality:       0       0       0       0       0       0)
0x00160c10 LZWStream::hasGetChars()                                    (Quality:       0       0       0       0       0       0)
0x00160c20 RunLengthStream::getKind()                                  (Quality:       0       0       0       0       0       0)
0x00160c30 RunLengthStream::hasGetChars()                              (Quality:       0       0       0       0       0       0)
0x00160c40 CCITTFaxStream::getKind()                                   (Quality:       0       0       0       0       0       0)
0x00160c50 CCITTFaxStream::getChar()                                   (Quality:       0       0       0       0       0       0)
0x00160c70 FlateStream::getKind()                                      (Quality:       0       0       0       0       0       0)
0x000b4320 Annot::drawCircleTopLeft(double, double, double)@plt        (Quality:       0       0       0       0       0       0)
0x00160c90 EOFStream::getKind()                                        (Quality:       0       0       0       0       0       0)
0x00160ca0 EOFStream::reset()                                          (Quality:       0       0       0       0       0       0)
0x00160cb0 EOFStream::getChar()                                        (Quality:       0       0       0       0       0       0)
0x00160cc0 EOFStream::lookChar()                                       (Quality:       0       0       0       0       0       0)
0x00160cd0 EOFStream::getPSFilter(int, char const*)                    (Quality:       0       0       0       0       0       0)
0x00160ce0 EOFStream::isBinary(bool)                                   (Quality:       0       0       0       0       0       0)
0x00160cf0 BufStream::getKind()                                        (Quality:       0       0       0       0       0       0)
0x00160d00 BufStream::getPSFilter(int, char const*)                    (Quality:       0       0       0       0       0       0)
0x00160d10 FixedLengthEncoder::getKind()                               (Quality:       0       0       0       0       0       0)
0x00160d20 FixedLengthEncoder::getPSFilter(int, char const*)           (Quality:       0       0       0       0       0       0)
0x00160d30 FixedLengthEncoder::isEncoder()                             (Quality:       0       0       0       0       0       0)
0x00160d40 ASCIIHexEncoder::getKind()                                  (Quality:       0       0       0       0       0       0)
0x00160d50 ASCIIHexEncoder::getPSFilter(int, char const*)              (Quality:       0       0       0       0       0       0)
0x00160d60 ASCIIHexEncoder::isBinary(bool)                             (Quality:       0       0       0       0       0       0)
0x00160d70 ASCIIHexEncoder::isEncoder()                                (Quality:       0       0       0       0       0       0)
0x00160d80 ASCII85Encoder::getKind()                                   (Quality:       0       0       0       0       0       0)
0x00160d90 ASCII85Encoder::getPSFilter(int, char const*)               (Quality:       0       0       0       0       0       0)
0x00160da0 ASCII85Encoder::isBinary(bool)                              (Quality:       0       0       0       0       0       0)
0x00160db0 ASCII85Encoder::isEncoder()                                 (Quality:       0       0       0       0       0       0)
0x00160dc0 RunLengthEncoder::getKind()                                 (Quality:       0       0       0       0       0       0)
0x00160dd0 RunLengthEncoder::getPSFilter(int, char const*)             (Quality:       0       0       0       0       0       0)
0x00160de0 RunLengthEncoder::isBinary(bool)                            (Quality:       0       0       0       0       0       0)
0x00160df0 RunLengthEncoder::isEncoder()                               (Quality:       0       0       0       0       0       0)
0x00160e00 CMYKGrayEncoder::getKind()                                  (Quality:       0       0       0       0       0       0)
0x00160e10 CMYKGrayEncoder::getPSFilter(int, char const*)              (Quality:       0       0       0       0       0       0)
0x00160e20 CMYKGrayEncoder::isBinary(bool)                             (Quality:       0       0       0       0       0       0)
0x00160e30 CMYKGrayEncoder::isEncoder()                                (Quality:       0       0       0       0       0       0)
0x00160e40 RGBGrayEncoder::getKind()                                   (Quality:       0       0       0       0       0       0)
0x00160e50 RGBGrayEncoder::getPSFilter(int, char const*)               (Quality:       0       0       0       0       0       0)
0x00160e60 RGBGrayEncoder::isBinary(bool)                              (Quality:       0       0       0       0       0       0)
0x00160e70 RGBGrayEncoder::isEncoder()                                 (Quality:       0       0       0       0       0       0)
0x00160e80 MemStream::unfilteredReset()                                (Quality:       0       0       0       0       0       0)
0x00160eb0 FileStream::unfilteredReset()                               (Quality:       0       0       0       0       0       0)
0x00160f10 MemStream::getUnfilteredChar()                              (Quality:       0       0       0       0       0       0)
0x00160f50 BaseStream::getDict()                                       (Quality:       0       0       0      23      23      23)
0x00160f90 FileStream::lookChar()                                      (Quality:       0       0       0       0       0       0)
0x00160fd0 FileStream::getChar()                                       (Quality:       0       0       0  100000  100000  100000)
0x00161020 FileStream::getChars(int, unsigned char*)                   (Quality:       0       0       0       0       0       0)
0x001610d0 FileStream::getUnfilteredChar()                             (Quality:       0       0       0       0       0       0)
0x00161130 CachedFileStream::lookChar()                                (Quality:       0       0       0       0       0       0)
0x00161170 CachedFileStream::getChar()                                 (Quality:       0       0       0       0       0       0)
0x001611c0 CachedFileStream::getUnfilteredChar()                       (Quality:       0       0       0       0       0       0)
0x00161220 RunLengthStream::lookChar()                                 (Quality:       0       0       0       0       0       0)
0x00161260 RunLengthStream::getChar()                                  (Quality:       0       0       0       0       0       0)
0x001612b0 ASCIIHexEncoder::lookChar()                                 (Quality:       0       0       0       0       0       0)
0x001612f0 ASCIIHexEncoder::getChar()                                  (Quality:       0       0       0       0       0       0)
0x00161330 ASCII85Encoder::lookChar()                                  (Quality:       0       0       0       0       0       0)
0x000b4310 TextPage::~TextPage()@plt                                   (Quality:       0       0       0       0       0       0)
0x001613b0 RunLengthEncoder::lookChar()                                (Quality:       0       0       0       0       0       0)
0x001613f0 RunLengthEncoder::getChar()                                 (Quality:       0       0       0       0       0       0)
0x00161440 CMYKGrayEncoder::lookChar()                                 (Quality:       0       0       0       0       0       0)
0x00161480 CMYKGrayEncoder::getChar()                                  (Quality:       0       0       0       0       0       0)
0x001614c0 RGBGrayEncoder::lookChar()                                  (Quality:       0       0       0       0       0       0)
0x00161500 RGBGrayEncoder::getChar()                                   (Quality:       0       0       0       0       0       0)
0x00161540 StructTreeRoot::~StructTreeRoot()                           (Quality:       0       0       0       0       0       0)
0x00161600 StructTreeRoot::parentTreeAdd(Ref const&, StructElement*)   (Quality:       0       0       0       0       0       0)
0x00161660 StructTreeRoot::parse(Dict*)                                (Quality:       0       0       0       0       0       0)
0x001621f0 StructTreeRoot::StructTreeRoot(PDFDoc*, Dict*)              (Quality:       0       0       0       0       0       0)
0x001622a0 std::vector<StructElement*, std::allocator<StructElement*> >::_M_insert_aux(__gnu_cxx::__normal_iterator<StructElement**, std::vector<StructElement*, std::allocator<StructElement*> > >, StructElement* const&) (Quality:       0       0       0       0       0       0)
0x00162430 std::vector<StructTreeRoot::Parent, std::allocator<StructTreeRoot::Parent> >::_M_fill_insert(__gnu_cxx::__normal_iterator<StructTreeRoot::Parent*, std::vector<StructTreeRoot::Parent, std::allocator<StructTreeRoot::Parent> > >, unsigned long, StructTreeRoot::Parent const&) (Quality:       0       0       0       0       0       0)
0x001627a0 std::vector<StructTreeRoot::Parent, std::allocator<StructTreeRoot::Parent> >::operator=(std::vector<StructTreeRoot::Parent, std::allocator<StructTreeRoot::Parent> > const&) (Quality:       0       0       0       0       0       0)
0x00162960 std::vector<std::vector<StructTreeRoot::Parent, std::allocator<StructTreeRoot::Parent> >, std::allocator<std::vector<StructTreeRoot::Parent, std::allocator<StructTreeRoot::Parent> > > >::_M_fill_insert(__gnu_cxx::__normal_iterator<std::vector<StructTreeRoot::Parent, std::allocator<StructTreeRoot::Parent> >*, std::vector<std::vector<StructTreeRoot::Parent, std::allocator<StructTreeRoot::Parent> >, std::allocator<std::vector<StructTreeRoot::Parent, std::allocator<StructTreeRoot::Parent> > > > >, unsigned long, std::vector<StructTreeRoot::Parent, std::allocator<StructTreeRoot::Parent> > const&) (Quality:       0       0       0       0       0       0)
0x00163260 isNumber(Object*)                                           (Quality:       0       0       0       0       0       0)
0x00163280 isTextString(Object*)                                       (Quality:       0       0       0       0       0       0)
0x00163290 isBorderStyleName(Object*)                                  (Quality:       0       0       0       0       0       0)
0x00163390 isTableScopeName(Object*)                                   (Quality:       0       0       0       0       0       0)
0x001633f0 isFieldCheckedName(Object*)                                 (Quality:       0       0       0       0       0       0)
0x00163450 isFieldRoleName(Object*)                                    (Quality:       0       0       0       0       0       0)
0x001634d0 isListNumberingName(Object*)                                (Quality:       0       0       0       0       0       0)
0x001635b0 isRubyAlignName(Object*)                                    (Quality:       0       0       0       0       0       0)
0x00163640 isRubyPositionName(Object*)                                 (Quality:       0       0       0       0       0       0)
0x001636c0 isGlyphOrientationName(Object*)                             (Quality:       0       0       0       0       0       0)
0x00163770 isTextDecorationName(Object*)                               (Quality:       0       0       0       0       0       0)
0x001637f0 isLineHeight(Object*)                                       (Quality:       0       0       0       0       0       0)
0x00163850 isInlineAlignName(Object*)                                  (Quality:       0       0       0       0       0       0)
0x001638b0 isBlockAlignName(Object*)                                   (Quality:       0       0       0       0       0       0)
0x00163930 isNumberOrAuto(Object*)                                     (Quality:       0       0       0       0       0       0)
0x00163970 isTextAlignName(Object*)                                    (Quality:       0       0       0       0       0       0)
0x001639f0 isWritingModeName(Object*)                                  (Quality:       0       0       0       0       0       0)
0x00163a50 isPlacementName(Object*)                                    (Quality:       0       0       0       0       0       0)
0x00163ae0 Object::getDict() [clone .isra.22]                          (Quality:       0       0       0       0       0       0)
0x00163b20 isNatural(Object*)                                          (Quality:       0       0       0       0       0       0)
0x00163b50 isPositive(Object*)                                         (Quality:       0       0       0       0       0       0)
0x00163bf0 isTableHeaders(Object*)                                     (Quality:       0       0       0       0       0       0)
0x00163ca0 isNumberOrArrayN(Object*)                                   (Quality:       0       0       0       0       0       0)
0x00163d70 isPositiveOrArray4(Object*)                                 (Quality:       0       0       0       0       0       0)
0x00163e40 isPositiveOrOptionalArray4(Object*)                         (Quality:       0       0       0       0       0       0)
0x00163f00 isNumberArray4(Object*)                                     (Quality:       0       0       0       0       0       0)
0x00163fd0 isBorderStyle(Object*)                                      (Quality:       0       0       0       0       0       0)
0x00164090 isRGBColor(Object*)                                         (Quality:       0       0       0       0       0       0)
0x00164200 isRGBColorOrOptionalArray4(Object*)                         (Quality:       0       0       0       0       0       0)
0x001642c0 Attribute::Attribute(char const*, int, Object*)             (Quality:       0       0       0       0       0       0)
0x00164340 Attribute::~Attribute()                                     (Quality:       0       0       0       0       0       0)
0x00164380 Attribute::getTypeName() const                              (Quality:       0       0       0       0       0       0)
0x00164400 Attribute::getOwnerName() const                             (Quality:       0       0       0       0       0       0)
0x00164440 Attribute::getDefaultValue(Attribute::Type)                 (Quality:       0       0       0       0       0       0)
0x001644c0 Attribute::setFormattedValue(char const*)                   (Quality:       0       0       0       0       0       0)
0x00164550 Attribute::checkType(StructElement*)                        (Quality:       0       0       0       0       0       0)
0x00164610 Attribute::Attribute(Attribute::Type, Object*)              (Quality:       0       0       0       0       0       0)
0x001646a0 Attribute::getTypeForName(char const*, StructElement*)      (Quality:       0       0       0       0       0       0)
0x00164760 Attribute::parseUserProperty(Dict*)                         (Quality:       0       0       0       0       0       0)
0x001649d0 StructElement::StructData::StructData()                     (Quality:       0       0       0       0       0       0)
0x00164a50 StructElement::StructElement(int, StructTreeRoot*, StructElement*) (Quality:       0       0       0       0       0       0)
0x00164ae0 StructElement::StructElement(Ref const&, StructTreeRoot*, StructElement*) (Quality:       0       0       0       0       0       0)
0x00164b80 StructElement::~StructElement()                             (Quality:       0       0       0       0       0       0)
0x00164bd0 StructElement::StructData::~StructData()                    (Quality:       0       0       0       0       0       0)
0x00164d00 StructElement::isBlock() const                              (Quality:       0       0       0       0       0       0)
0x00164d40 StructElement::isInline() const                             (Quality:       0       0       0       0       0       0)
0x00164d80 StructElement::isGrouping() const                           (Quality:       0       0       0       0       0       0)
0x00164dc0 StructElement::hasPageRef() const                           (Quality:       0       0       0       0       0       0)
0x00164de0 StructElement::getPageRef(Ref&) const                       (Quality:       0       0       0       0       0       0)
0x00164e10 StructElement::getTypeName() const                          (Quality:       0       0       0       0       0       0)
0x00164e70 StructElement::findAttribute(Attribute::Type, bool, Attribute::Owner) const (Quality:       0       0       0       0       0       0)
0x00165170 StructElement::getTextSpansInternal(MarkedContentOutputDev&) const (Quality:       0       0       0       0       0       0)
0x00165250 StructElement::parseAttributes(Dict*, bool)                 (Quality:       0       0       0       0       0       0)
0x00165800 StructElement::parse(Dict*)                                 (Quality:       0       0       0       0       0       0)
0x00166260 StructElement::parseChild(Object*, Object*, std::set<int, std::less<int>, std::allocator<int> >&) (Quality:       0       0       0       0       0       0)
0x00166790 StructElement::parseChildren(Dict*, std::set<int, std::less<int>, std::allocator<int> >&) (Quality:       0       0       0       0       0       0)
0x00166930 StructElement::StructElement(Dict*, StructTreeRoot*, StructElement*, std::set<int, std::less<int>, std::allocator<int> >&) (Quality:       0       0       0       0       0       0)
0x001669f0 StructElement::appendSubTreeText(GooString*, bool) const    (Quality:       0       0       0       0       0       0)
0x00166b80 std::vector<Attribute*, std::allocator<Attribute*> >::_M_insert_aux(__gnu_cxx::__normal_iterator<Attribute**, std::vector<Attribute*, std::allocator<Attribute*> > >, Attribute* const&) (Quality:       0       0       0       0       0       0)
0x00166d10 UnicodeMap::UnicodeMap(GooString*)                          (Quality:       0       0       0       0       0       0)
0x00166d80 UnicodeMap::parse(GooString*)                               (Quality:       0       0       0       0       0       0)
0x001670e0 UnicodeMap::UnicodeMap(char const*, bool, UnicodeMapRange*, int) (Quality:       0       0       0       4       4       4)
0x00167180 UnicodeMap::UnicodeMap(char const*, bool, int (*)(unsigned int, char*, int)) (Quality:       0       0       0       2       2       2)
0x00167210 UnicodeMap::~UnicodeMap()                                   (Quality:       0       0       0       6       6       6)
0x00167270 UnicodeMap::incRefCnt()                                     (Quality:       0       0       0       0       0       0)
0x001672a0 UnicodeMap::decRefCnt()                                     (Quality:       0       0       0       0       0       0)
0x001672f0 UnicodeMap::match(GooString*)                               (Quality:       0       0       0       0       0       0)
0x00167310 UnicodeMap::mapUnicode(unsigned int, char*, int)            (Quality:       0       0       0       0       0       0)
0x00167460 UnicodeMapCache::UnicodeMapCache()                          (Quality:       0       0       0       1       1       1)
0x00167480 UnicodeMapCache::~UnicodeMapCache()                         (Quality:       0       0       0       1       1       1)
0x001674b0 UnicodeMapCache::getUnicodeMap(GooString*)                  (Quality:       0       0       0       0       0       0)
0x001675a0 decomp_compat(unsigned int, unsigned int*)                  (Quality:       0       0       0       0       0       0)
0x00167650 unicodeTypeL(unsigned int)                                  (Quality:       0       0       0       0       0       0)
0x00167690 unicodeTypeR(unsigned int)                                  (Quality:       0       0       0       0       0       0)
0x001676d0 unicodeTypeNum(unsigned int)                                (Quality:       0       0       0       0       0       0)
0x00167710 unicodeTypeAlphaNum(unsigned int)                           (Quality:       0       0       0       0       0       0)
0x00167780 unicodeIsAlphabeticPresentationForm(unsigned int)           (Quality:       0       0       0  100000  100000  100000)
0x00167790 unicodeToUpper(unsigned int)                                (Quality:       0       0       0       0       0       0)
0x001677c0 unicodeNormalizeNFKC(unsigned int*, int, int*, int**)       (Quality:       0       0       0       0       0       0)
0x00167fa0 UnicodeIsValid(unsigned int)                                (Quality:       0       0       0  100000  100000  100000)
0x00167fe0 UTF16toUCS4(unsigned int const*, int, unsigned int**)       (Quality:       0       0       0       0       0       0)
0x00168190 TextStringToUCS4(GooString*, unsigned int**)                (Quality:       0       0       0       0       0       0)
0x00168280 ViewerPreferences::~ViewerPreferences()                     (Quality:       0       0       0       0       0       0)
0x00168290 ViewerPreferences::init()                                   (Quality:       0       0       0       0       0       0)
0x001682d0 ViewerPreferences::ViewerPreferences(Dict*)                 (Quality:       0       0       0       0       0       0)
0x00168780 XRef::XRefTableWriter::startSection(int, int)               (Quality:       0       0       0       0       0       0)
0x001687a0 XRef::XRefTableWriter::writeEntry(long long, int, XRefEntryType) (Quality:       0       0       0       0       0       0)
0x001687d0 XRef::XRefPreScanWriter::startSection(int, int)             (Quality:       0       0       0       0       0       0)
0x001687e0 XRef::XRefPreScanWriter::writeEntry(long long, int, XRefEntryType) (Quality:       0       0       0       0       0       0)
0x001687f0 XRef::XRefStreamWriter::writeEntry(long long, int, XRefEntryType) (Quality:       0       0       0       0       0       0)
0x000b4300 PSOutputDev::setupEmbeddedCIDType0Font(GfxFont*, Ref*, GooString*)@plt (Quality:       0       0       0       0       0       0)
0x00168890 Object::getInt64() [clone .isra.21]                         (Quality:       0       0       0       0       0       0)
0x001688d0 XRef::XRefStreamWriter::startSection(int, int)              (Quality:       0       0       0       0       0       0)
0x00168960 ObjectStream::~ObjectStream()                               (Quality:       0       0       0       0       0       0)
0x001689c0 ObjectStream::getObject(int, int, Object*)                  (Quality:       0       0       0       0       0       0)
0x00168a10 XRef::init()                                                (Quality:       0       0       0       1       1       1)
0x00168ae0 XRef::XRef()                                                (Quality:       0       0       0       0       0       0)
0x00168b00 XRef::XRef(Object*)                                         (Quality:       0       0       0       0       0       0)
0x00168b50 XRef::~XRef()                                               (Quality:       0       0       0       1       1       1)
0x00168bf0 XRef::reserve(int)                                          (Quality:       0       0       0       1       1       1)
0x00168c70 XRef::copy()                                                (Quality:       0       0       0       0       0       0)
0x00168e50 XRef::resize(int)                                           (Quality:       0       0       0       1       1       1)
0x00168f40 XRef::readXRefStreamSection(Stream*, int*, int, int)        (Quality:       0       0       0       0       0       0)
0x00169170 XRef::readXRefStream(Stream*, long long*)                   (Quality:       0       0       0       0       0       0)
0x00169560 XRef::constructXRef(bool*, bool)                            (Quality:       0       0       0       0       0       0)
0x00169b10 XRef::setEncryption(int, bool, unsigned char*, int, int, int, CryptAlgorithm) (Quality:       0       0       0       0       0       0)
0x00169b70 XRef::getEncryptionParameters(unsigned char**, CryptAlgorithm*, int*) (Quality:       0       0       0       0       0       0)
0x00169bb0 XRef::okToPrint(bool)                                       (Quality:       0       0       0       0       0       0)
0x00169bd0 XRef::okToPrintHighRes(bool)                                (Quality:       0       0       0       0       0       0)
0x00169c30 XRef::okToChange(bool)                                      (Quality:       0       0       0       0       0       0)
0x00169c50 XRef::okToCopy(bool)                                        (Quality:       0       0       0       0       0       0)
0x00169c70 XRef::okToAddNotes(bool)                                    (Quality:       0       0       0       0       0       0)
0x00169c90 XRef::okToFillForm(bool)                                    (Quality:       0       0       0       0       0       0)
0x00169cb0 XRef::okToAccessibility(bool)                               (Quality:       0       0       0       0       0       0)
0x00169cd0 XRef::okToAssemble(bool)                                    (Quality:       0       0       0       0       0       0)
0x00169cf0 XRef::lock()                                                (Quality:       0       0       0       0       0       0)
0x00169d00 XRef::unlock()                                              (Quality:       0       0       0       0       0       0)
0x00169d10 XRef::getDocInfo(Object*)                                   (Quality:       0       0       0       1       1       1)
0x00169d60 XRef::getDocInfoNF(Object*)                                 (Quality:       0       0       0       0       0       0)
0x000b42f0 atan2@plt                                                   (Quality:       0       0       0       0       0       0)
0x00169e10 XRef::XRefTableWriter::XRefTableWriter(OutStream*)          (Quality:       0       0       0       0       0       0)
0x00169e30 XRef::XRefStreamWriter::XRefStreamWriter(Object*, GooString*, int) (Quality:       0       0       0       0       0       0)
0x00169e50 XRef::XRefPreScanWriter::XRefPreScanWriter()                (Quality:       0       0       0       0       0       0)
0x00169e70 XRef::parseEntry(long long, XRefEntry*)                     (Quality:       0       0       0       0       0       0)
0x0016a0f0 XRef::readXRefTable(Parser*, long long*, std::vector<long long, std::allocator<long long> >*, std::vector<int, std::allocator<int> >*) (Quality:       0       0       0       1       1       1)
0x0016a6c0 XRef::readXRef(long long*, std::vector<long long, std::allocator<long long> >*, std::vector<int, std::allocator<int> >*) (Quality:       0       0       0       1       1       1)
0x0016a960 XRef::XRef(BaseStream*, long long, long long, bool*, bool)  (Quality:       0       0       0       1       1       1)
0x0016ac20 XRef::readXRefUntil(int, std::vector<int, std::allocator<int> >*) (Quality:       0       0       0       0       0       0)
0x000b42e0 SplashFontFile::decRefCnt()@plt                             (Quality:       0       0       0       0       0       0)
0x000b42d0 jpeg_std_error@plt                                          (Quality:       0       0       0       3       3       3)
0x0016b590 ObjectStream::ObjectStream(XRef*, int, int)                 (Quality:       0       0       0       0       0       0)
0x000b42c0 AnnotBorder::~AnnotBorder()@plt                             (Quality:       0       0       0       0       0       0)
0x0016bc70 XRef::getNumEntry(long long)                                (Quality:       0       0       0       0       0       0)
0x0016bd00 XRef::add(int, int, long long, bool)                        (Quality:       0       0       0       0       0       0)
0x0016be40 XRef::setModifiedObject(Object*, Ref)                       (Quality:       0       0       0       0       0       0)
0x0016bed0 XRef::addIndirectObject(Object*)                            (Quality:       0       0       0       0       0       0)
0x0016bf80 XRef::removeIndirectObject(Ref)                             (Quality:       0       0       0       0       0       0)
0x0016c020 XRef::writeXRef(XRef::XRefWriter*, bool)                    (Quality:       0       0       0       0       0       0)
0x0016c210 XRef::writeTableToFile(OutStream*, bool)                    (Quality:       0       0       0       0       0       0)
0x0016c260 XRef::writeStreamToBuffer(GooString*, Dict*, XRef*)         (Quality:       0       0       0       0       0       0)
0x0016c430 XRef::markUnencrypted(Object*)                              (Quality:       0       0       0       0       0       0)
0x0016c580 XRef::markUnencrypted()                                     (Quality:       0       0       0       0       0       0)
0x0016c620 XRef::scanSpecialFlags()                                    (Quality:       0       0       0       0       0       0)
0x0016c800 ObjectStreamKey::operator==(PopplerCacheKey const&) const   (Quality:       0       0       0       0       0       0)
0x0016c810 XRef::XRefPreScanWriter::~XRefPreScanWriter()               (Quality:       0       0       0       0       0       0)
0x0016c820 XRef::XRefStreamWriter::~XRefStreamWriter()                 (Quality:       0       0       0       0       0       0)
0x0016c830 XRef::XRefTableWriter::~XRefTableWriter()                   (Quality:       0       0       0       0       0       0)
0x0016c840 XRef::XRefTableWriter::~XRefTableWriter()                   (Quality:       0       0       0       0       0       0)
0x0016c850 XRef::XRefStreamWriter::~XRefStreamWriter()                 (Quality:       0       0       0       0       0       0)
0x0016c860 XRef::XRefPreScanWriter::~XRefPreScanWriter()               (Quality:       0       0       0       0       0       0)
0x0016c870 ObjectStreamKey::~ObjectStreamKey()                         (Quality:       0       0       0       0       0       0)
0x0016c890 ObjectStreamKey::~ObjectStreamKey()                         (Quality:       0       0       0       0       0       0)
0x0016c8b0 ObjectStreamItem::~ObjectStreamItem()                       (Quality:       0       0       0       0       0       0)
0x0016c8f0 ObjectStreamItem::~ObjectStreamItem()                       (Quality:       0       0       0       0       0       0)
0x0016c940 std::vector<long long, std::allocator<long long> >::_M_insert_aux(__gnu_cxx::__normal_iterator<long long*, std::vector<long long, std::allocator<long long> > >, long long const&) (Quality:       0       0       0       0       0       0)
0x000b42b0 SplashClip::grow(int)@plt                                   (Quality:       0       0       0       0       0       0)
0x0016cae0 DeviceNRecoder::~DeviceNRecoder()                           (Quality:       0       0       0       0       0       0)
0x0016cb40 DeviceNRecoder::~DeviceNRecoder()                           (Quality:       0       0       0       0       0       0)
0x0016cb60 DeviceNRecoder::reset()                                     (Quality:       0       0       0       0       0       0)
0x0016cbc0 outputToFile(void*, char const*, int)                       (Quality:       0       0       0  100000  100000  100000)
0x0016cbe0 DeviceNRecoder::fillBuf() [clone .part.158]                 (Quality:       0       0       0       0       0       0)
0x0016cd10 PSOutCustomColor::PSOutCustomColor(double, double, double, double, GooString*) (Quality:       0       0       0       0       0       0)
0x0016cd30 PSOutCustomColor::~PSOutCustomColor()                       (Quality:       0       0       0       0       0       0)
0x0016cd60 DeviceNRecoder::DeviceNRecoder(Stream*, int, int, GfxImageColorMap*) (Quality:       0       0       0       0       0       0)
0x0016ce00 DeviceNRecoder::fillBuf()                                   (Quality:       0       0       0       0       0       0)
0x0016ce20 PSOutputDev::addProcessColor(double, double, double, double) (Quality:       0       0       0       0       0       0)
0x0016ce60 PSOutputDev::addCustomColor(GfxSeparationColorSpace*)       (Quality:       0       0       0       0       0       0)
0x0016d050 PSOutputDev::opiTransform(GfxState*, double, double, double*, double*) (Quality:       0       0       0       0       0       0)
0x0016d150 PSOutputDev::writePSChar(char)                              (Quality:       0       0       0  100000  100000  100000)
0x0016d1a0 PSOutputDev::psXObject(Stream*, Stream*)                    (Quality:       0       0       0       0       0       0)
0x0016d200 PSOutputDev::writePS(char const*)                           (Quality:       0       0       0  100000  100000  100000)
0x0016d250 PSOutputDev::writePageTrailer()                             (Quality:       1       1       0      75      74      76)
0x000b42a0 FormFieldChoice::deselectAll()@plt                          (Quality:       0       0       0       0       0       0)
0x000b4290 AnnotFileAttachment::~AnnotFileAttachment()@plt             (Quality:       0       0       0       0       0       0)
0x0016d2b0 PSOutputDev::saveTextPos(GfxState*)                         (Quality:       0       0       0       0       0       0)
0x0016d2c0 PSOutputDev::restoreTextPos(GfxState*)                      (Quality:       0       0       0       0       0       0)
0x000b4280 AnnotPolygon::initialize(PDFDoc*, Dict*)@plt                (Quality:       0       0       0       0       0       0)
0x0016d300 PSOutputDev::unsetSoftMaskFromImageMask(GfxState*, double*) (Quality:       0       0       0       0       0       0)
0x0016d320 PSOutputDev::opiEnd(GfxState*, Dict*)                       (Quality:       0       0       0       0       0       0)
0x0016d430 PSOutputDev::type3D1(GfxState*, double, double, double, double, double, double) (Quality:       0       0       0       0       0       0)
0x000b4270 StructTreeRoot::~StructTreeRoot()@plt                       (Quality:       0       0       0       0       0       0)
0x0016d590 PSOutputDev::writePSBuf(char const*, int)                   (Quality:       0       0       0      18      18      18)
0x0016d5f0 PSOutputDev::writePSFmt(char const*, ...)                   (Quality:       0       0       0  100000  100000  100000)
0x0016d6e0 PSOutputDev::writeXpdfProcset()                             (Quality:       0       0       0       1       1       1)
0x0016d930 PSOutputDev::setupEmbeddedType1Font(Ref*, GooString*)       (Quality:       0       0       0       9       9       9)
0x0016dfe0 PSOutputDev::setupExternalType1Font(GooString*, GooString*) (Quality:       0       0       0       0       0       0)
0x0016e2c0 PSOutputDev::setupEmbeddedType1CFont(GfxFont*, Ref*, GooString*) (Quality:       0       0       0       0       0       0)
0x0016e4a0 PSOutputDev::setupEmbeddedOpenTypeT1CFont(GfxFont*, Ref*, GooString*) (Quality:       0       0       0       0       0       0)
0x0016e690 PSOutputDev::setupEmbeddedTrueTypeFont(GfxFont*, Ref*, GooString*) (Quality:       0       0       0       0       0       0)
0x0016e820 PSOutputDev::setupExternalTrueTypeFont(GfxFont*, GooString*, GooString*) (Quality:       0       0       0       0       0       0)
0x0016e980 PSOutputDev::setupExternalCIDTrueTypeFont(GfxFont*, GooString*, GooString*, bool) (Quality:       0       0       0       0       0       0)
0x0016ebb0 PSOutputDev::setupEmbeddedCIDType0Font(GfxFont*, Ref*, GooString*) (Quality:       0       0       0       0       0       0)
0x0016eda0 PSOutputDev::setupEmbeddedCIDTrueTypeFont(GfxFont*, Ref*, GooString*, bool) (Quality:       0       0       0       0       0       0)
0x0016ef00 PSOutputDev::setupEmbeddedOpenTypeCFFFont(GfxFont*, Ref*, GooString*) (Quality:       0       0       0       0       0       0)
0x0016f100 PSOutputDev::setupImage(Ref, Stream*, bool)                 (Quality:       0       0       0       0       0       0)
0x000b4260 XRef::reserve(int)@plt                                      (Quality:       0       0       0       1       1       1)
0x0016fb70 PSOutputDev::setupForm(Ref, Object*)                        (Quality:       0       0       0       0       0       0)
0x000b4250 std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_insert_unique(int const&)@plt (Quality:       0       0       0       2       2       2)
0x000b4230 strcspn@plt                                                 (Quality:       0       0       0       0       0       0)
0x00171a30 PSOutputDev::updateCTM(GfxState*, double, double, double, double, double, double) (Quality:       0       0       0       2       2       2)
0x000b4220 TextLine::cmpYX(TextLine*)@plt                              (Quality:       0       0       0       0       0       0)
0x000b4210 GfxShadingBitBuf::flushBits()@plt                           (Quality:       0       0       0       0       0       0)
0x000b4200 GfxUnivariateShading::GfxUnivariateShading(int, double, double, Function**, int, bool, bool)@plt (Quality:       0       0       0       0       0       0)
0x000b41f0 void std::__heap_select<GfxFontCIDWidthExcep*, __gnu_cxx::__ops::_Iter_comp_iter<cmpWidthExcepFunctor> >(GfxFontCIDWidthExcep*, GfxFontCIDWidthExcep*, GfxFontCIDWidthExcep*, __gnu_cxx::__ops::_Iter_comp_iter<cmpWidthExcepFunctor>)@plt (Quality:       0       0       0       0       0       0)
0x000b41e0 MovieActivationParameters::~MovieActivationParameters()@plt (Quality:       0       0       0       0       0       0)
0x000b41d0 Dict::remove(char const*)@plt                               (Quality:       0       0       0       0       0       0)
0x000b41c0 GfxSubpath::close()@plt                                     (Quality:       0       0       0       8       8       8)
0x000b41b0 Splash::shadedFill(SplashPath*, bool, SplashPattern*)@plt   (Quality:       0       0       0       0       0       0)
0x000b41a0 ViewerPreferences::~ViewerPreferences()@plt                 (Quality:       0       0       0       0       0       0)
0x000b4190 PSOutputDev::opiBegin13(GfxState*, Dict*)@plt               (Quality:       0       0       0       0       0       0)
0x001721b0 PSOutputDev::updateOverprintMode(GfxState*)                 (Quality:       0       0       0       0       0       0)
0x000b4180 JBIG2HuffmanDecoder::decodeInt(int*, JBIG2HuffmanTable*)@plt (Quality:       0       0       0       0       0       0)
0x000b4170 GooTimer::getElapsed()@plt                                  (Quality:       0       0       0       0       0       0)
0x000b4160 LinkURI::~LinkURI()@plt                                     (Quality:       0       0       0       0       0       0)
0x00172310 PSOutputDev::updateRender(GfxState*)                        (Quality:       0       0       0       2       2       2)
0x00172350 PSOutputDev::updateRise(GfxState*)                          (Quality:       0       0       0       0       0       0)
0x00172370 PSOutputDev::updateWordSpace(GfxState*)                     (Quality:       0       0       0       0       0       0)
0x00172390 PSOutputDev::updateHorizScaling(GfxState*)                  (Quality:       0       0       0       0       0       0)
0x000b4150 GfxResources::lookupShading(char*, OutputDev*, GfxState*)@plt (Quality:       0       0       0       0       0       0)
0x000b4140 Splash::drawPixel(SplashPipe*, int, int, bool)@plt          (Quality:       0       0       0       0       0       0)
0x00172460 PSOutputDev::tilingPatternFillL1(GfxState*, Catalog*, Object*, double*, int, int, Dict*, double*, double*, int, int, int, int, double, double) (Quality:       0       0       0       0       0       0)
0x001728b0 PSOutputDev::tilingPatternFillL2(GfxState*, Catalog*, Object*, double*, int, int, Dict*, double*, double*, int, int, int, int, double, double) (Quality:       0       0       0       0       0       0)
0x00172b60 PSOutputDev::tilingPatternFill(GfxState*, Gfx*, Catalog*, Object*, double*, int, int, Dict*, double*, double*, int, int, int, int, double, double) (Quality:       0       0       0       0       0       0)
0x000b4130 GfxRadialShading::~GfxRadialShading()@plt                   (Quality:       0       0       0       0       0       0)
0x00173050 PSOutputDev::stroke(GfxState*)                              (Quality:       0       0       0       0       0       0)
0x001730a0 PSOutputDev::fill(GfxState*)                                (Quality:       0       0       0       0       0       0)
0x000b4120 UnicodeIsValid(unsigned int)@plt                            (Quality:       0       0       0  100000  100000  100000)
0x001730e0 PSOutputDev::clip(GfxState*)                                (Quality:       0       0       0       4       4       4)
0x00173100 PSOutputDev::eoClip(GfxState*)                              (Quality:       0       0       0       0       0       0)
0x00173120 PSOutputDev::clipToStrokePath(GfxState*)                    (Quality:       0       0       0       0       0       0)
0x00173140 PSOutputDev::maskToClippingPath(Stream*, int, int, bool)    (Quality:       0       0       0       0       0       0)
0x001737f0 PSOutputDev::setSoftMaskFromImageMask(GfxState*, Object*, Stream*, int, int, bool, bool, double*) (Quality:       0       0       0       0       0       0)
0x00173820 PSOutputDev::doImageL1(Object*, GfxImageColorMap*, bool, bool, Stream*, int, int, int, int*, Stream*, int, int, bool) (Quality:       0       0       0       0       0       0)
0x00173ea0 PSOutputDev::doImageL1Sep(Object*, GfxImageColorMap*, bool, bool, Stream*, int, int, int, int*, Stream*, int, int, bool) (Quality:       0       0       0       0       0       0)
0x00174400 PSOutputDev::type3D0(GfxState*, double, double)             (Quality:       0       0       0       0       0       0)
0x00174430 PSOutputDev::drawForm(Ref)                                  (Quality:       0       0       0       0       0       0)
0x00174450 PSOutputDev::cvtFunction(Function*, bool)                   (Quality:       0       0       0       0       0       0)
0x000b4110 SplashState::setScreen(SplashScreen*)@plt                   (Quality:       0       0       0       0       0       0)
0x00174f00 PSOutputDev::functionShadedFill(GfxState*, GfxFunctionShading*) (Quality:       0       0       0       0       0       0)
0x00175130 PSOutputDev::axialShadedFill(GfxState*, GfxAxialShading*, double, double) (Quality:       0       0       0       0       0       0)
0x001756d0 PSOutputDev::radialShadedFill(GfxState*, GfxRadialShading*, double, double) (Quality:       0       0       0       0       0       0)
0x000b4100 AnnotPath::AnnotPath()@plt                                  (Quality:       0       0       0       0       0       0)
0x00176620 PSOutputDev::writeTrailer()                                 (Quality:       0       0       0       1       1       1)
0x000b40f0 GooHash::remove(GooString*)@plt                             (Quality:       0       0       0       0       0       0)
0x000b40e0 FcFontSetDestroy@plt                                        (Quality:       0       0       0       0       0       0)
0x000b40d0 StructElement::appendSubTreeText(GooString*, bool) const@plt (Quality:       0       0       0       0       0       0)
0x000b40c0 PageLabelInfo::indexToLabel(int, GooString*)@plt            (Quality:       0       0       0       0       0       0)
0x00177c70 PSOutputDev::doImageL2(Object*, GfxImageColorMap*, bool, bool, Stream*, int, int, int, int*, Stream*, int, int, bool) (Quality:       0       0       0       2       2       2)
0x00179150 PSOutputDev::doImageL3(Object*, GfxImageColorMap*, bool, bool, Stream*, int, int, int, int*, Stream*, int, int, bool) (Quality:       0       0       0       0       0       0)
0x0017a3d0 PSOutputDev::drawImageMask(GfxState*, Object*, Stream*, int, int, bool, bool, bool) (Quality:       0       0       0       1       1       1)
0x0017a4b0 PSOutputDev::drawImage(GfxState*, Object*, Stream*, int, int, GfxImageColorMap*, bool, int*, bool) (Quality:       0       0       0       1       1       1)
0x0017a5e0 PSOutputDev::drawMaskedImage(GfxState*, Object*, Stream*, int, int, GfxImageColorMap*, bool, Stream*, int, int, bool, bool) (Quality:       0       0       0       0       0       0)
0x0017a730 PSOutputDev::opiBegin20(GfxState*, Dict*)                   (Quality:       0       0       0       0       0       0)
0x0017b040 PSOutputDev::opiBegin13(GfxState*, Dict*)                   (Quality:       0       0       0       0       0       0)
0x0017c500 PSOutputDev::opiBegin(GfxState*, Dict*)                     (Quality:       0       0       0       0       0       0)
0x001c3c90 SplashXPathScanner::computeIntersections()                  (Quality:       0       0       0       0       0       0)
0x0017c660 PSOutputDev::filterPSName(GooString*)                       (Quality:       0       0       0       0       0       0)
0x0017c770 PSOutputDev::makePSFontName(GfxFont*, Ref*)                 (Quality:       0       0       0       0       0       0)
0x000b40b0 SecurityHandler::~SecurityHandler()@plt                     (Quality:       0       0       0       0       0       0)
0x0017ca90 PSOutputDev::writePSTextLine(GooString*)                    (Quality:       0       0       0       1       1       1)
0x0017cba0 PSOutputDev::writeHeader(std::vector<int, std::allocator<int> > const&, PDFRectangle*, PDFRectangle*, int, char*) (Quality:       0       0       0       1       1       1)
0x0017d220 PSOutputDev::~PSOutputDev()                                 (Quality:       0       0       0       1       1       1)
0x0017d520 PSOutputDev::~PSOutputDev()                                 (Quality:       0       0       0       1       1       1)
0x000b40a0 Linearization::getHintsOffset2()@plt                        (Quality:       0       0       0       0       0       0)
0x0017db20 PSOutputDev::writeDocSetup(PDFDoc*, Catalog*, std::vector<int, std::allocator<int> > const&, bool) (Quality:       0       0       0       1       1       1)
0x0017df10 PSOutputDev::setupType3Font(GfxFont*, GooString*, Dict*)    (Quality:       0       0       0       0       0       0)
0x000b4060 jpeg_CreateCompress@plt                                     (Quality:       0       0       0       0       0       0)
0x000b4050 FoFiBase::getS32BE(int, bool*)@plt                          (Quality:       0       0       0       0       0       0)
0x0017eeb0 PSOutputDev::init(void (*)(void*, char const*, int), void*, PSFileType, char*, PDFDoc*, std::vector<int, std::allocator<int> > const&, PSOutMode, int, int, int, int, bool, int, int, bool, bool) (Quality:       0       0       0       1       1       1)
0x0017f830 PSOutputDev::PSOutputDev(char const*, PDFDoc*, char*, std::vector<int, std::allocator<int> > const&, PSOutMode, int, int, bool, bool, int, int, int, int, bool, bool, GooString* (*)(PSOutputDev*, PSOutCustomCodeLocation, int, void*), void*) (Quality:       0       0       0       1       1       1)
0x0017fbb0 PSOutputDev::PSOutputDev(void (*)(void*, char const*, int), void*, char*, PDFDoc*, std::vector<int, std::allocator<int> > const&, PSOutMode, int, int, bool, bool, int, int, int, int, bool, bool, GooString* (*)(PSOutputDev*, PSOutCustomCodeLocation, int, void*), void*) (Quality:       0       0       0       0       0       0)
0x000b4040 FilterStream::~FilterStream()@plt                           (Quality:       0       0       0       0       0       0)
0x00180d60 PSOutputDev::isOk()                                         (Quality:       0       0       0       1       1       1)
0x000b4030 printf@plt                                                  (Quality:       0       0       0       0       0       0)
0x00180d80 PSOutputDev::useDrawChar()                                  (Quality:       0       0       0  100000  100000  100000)
0x00180d90 PSOutputDev::useTilingPatternFill()                         (Quality:       0       0       0       0       0       0)
0x00180da0 PSOutputDev::useShadedFills(int)                            (Quality:       0       0       0       0       0       0)
0x00180dc0 PSOutputDev::useDrawForm()                                  (Quality:       0       0       0       0       0       0)
0x00180dd0 PSOutputDev::interpretType3Chars()                          (Quality:       0       0       0       0       0       0)
0x000b4020 CMap::parse(CMapCache*, GooString*, Stream*)@plt            (Quality:       0       0       0       0       0       0)
0x00180df0 DeviceNRecoder::getKind()                                   (Quality:       0       0       0       0       0       0)
0x00180e00 DeviceNRecoder::getPSFilter(int, char const*)               (Quality:       0       0       0       0       0       0)
0x00180e10 DeviceNRecoder::isBinary(bool)                              (Quality:       0       0       0       0       0       0)
0x00180e20 DeviceNRecoder::isEncoder()                                 (Quality:       0       0       0       0       0       0)
0x00180e30 DeviceNRecoder::getChar()                                   (Quality:       0       0       0       0       0       0)
0x00180e80 DeviceNRecoder::lookChar()                                  (Quality:       0       0       0       0       0       0)
0x00180ec0 std::vector<int, std::allocator<int> >::operator=(std::vector<int, std::allocator<int> > const&) (Quality:       0       0       0       1       1       1)
0x000b4010 AnnotWidget::AnnotWidget(PDFDoc*, Dict*, Object*)@plt       (Quality:       0       0       0       0       0       0)
0x000b4000 __errno_location@plt                                        (Quality:       0       0       0       0       0       0)
0x000b3ff0 StitchingFunction::StitchingFunction(Object*, Dict*, std::set<int, std::less<int>, std::allocator<int> >*)@plt (Quality:       0       0       0       0       0       0)
0x00181150 std::_Rb_tree<int, std::pair<int const, int>, std::_Select1st<std::pair<int const, int> >, std::less<int>, std::allocator<std::pair<int const, int> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<int const, int> >, int const&) (Quality:       0       0       0       0       0       0)
0x00181250 TextWord::cmpYX(void const*, void const*)                   (Quality:       0       0       0       0       0       0)
0x001812a0 TextLineFrag::cmpYXPrimaryRot(void const*, void const*)     (Quality:       0       0       0       0       0       0)
0x00181400 TextLineFrag::cmpYXLineRot(void const*, void const*)        (Quality:       0       0       0       0       0       0)
0x00181500 TextLineFrag::cmpXYLineRot(void const*, void const*)        (Quality:       0       0       0       0       0       0)
0x00181600 TextLineFrag::cmpXYColumnPrimaryRot(void const*, void const*) (Quality:       0       0       0       0       0       0)
0x001816e0 TextLineFrag::cmpXYColumnLineRot(void const*, void const*)  (Quality:       0       0       0       0       0       0)
0x001817c0 TextBlock::cmpXYPrimaryRot(void const*, void const*)        (Quality:       0       0       0       0       0       0)
0x001818c0 TextOutputDev::beginString(GfxState*, GooString*)           (Quality:       0       0       0       0       0       0)
0x001818d0 TextOutputDev::endString(GfxState*)                         (Quality:       0       0       0       0       0       0)
0x001818e0 TextSelectionDumper::visitWord(TextWord*, int, int, PDFRectangle*) (Quality:       0       0       0       0       0       0)
0x00181920 TextSelectionPainter::visitWord(TextWord*, int, int, PDFRectangle*) (Quality:       0       0       0       0       0       0)
0x00181960 TextSelectionDumper::~TextSelectionDumper()                 (Quality:       0       0       0       0       0       0)
0x00181a00 TextSelectionDumper::~TextSelectionDumper()                 (Quality:       0       0       0       0       0       0)
0x00181a20 TextSelectionSizer::visitLine(TextLine*, TextWord*, TextWord*, int, int, PDFRectangle*) (Quality:       0       0       0       0       0       0)
0x00181b30 TextSelectionPainter::~TextSelectionPainter()               (Quality:       0       0       0       0       0       0)
0x00181bc0 TextSelectionPainter::~TextSelectionPainter()               (Quality:       0       0       0       0       0       0)
0x00181be0 TextSelectionPainter::visitLine(TextLine*, TextWord*, TextWord*, int, int, PDFRectangle*) (Quality:       0       0       0       0       0       0)
0x00181e90 TextOutputDev_outputToFile(void*, char const*, int)         (Quality:       0       0       0       0       0       0)
0x00181eb0 TextOutputDev::eoFill(GfxState*)                            (Quality:       0       0       0       0       0       0)
0x00181ed0 TextFontInfo::TextFontInfo(GfxState*)                       (Quality:       0       0       0       0       0       0)
0x00181f60 TextFontInfo::~TextFontInfo()                               (Quality:       0       0       0       0       0       0)
0x00181fa0 TextFontInfo::matches(GfxState*)                            (Quality:       0       0       0       0       0       0)
0x00181fb0 TextFontInfo::matches(TextFontInfo*)                        (Quality:       0       0       0       0       0       0)
0x00181fc0 TextWord::TextWord(GfxState*, int, double)                  (Quality:       0       0       0       0       0       0)
0x001820c0 TextWord::~TextWord()                                       (Quality:       0       0       0       0       0       0)
0x00182100 TextWord::addChar(GfxState*, TextFontInfo*, double, double, double, double, int, int, unsigned int, unsigned int, Matrix) (Quality:       0       0       0       0       0       0)
0x00182770 TextWord::merge(TextWord*)                                  (Quality:       0       0       0       0       0       0)
0x00182990 TextWord::primaryDelta(TextWord*)                           (Quality:       0       0       0       0       0       0)
0x001829f0 TextWord::getText()                                         (Quality:       0       0       0       0       0       0)
0x00182a90 TextWord::getCharBBox(int, double*, double*, double*, double*) (Quality:       0       0       0       0       0       0)
0x00182b90 TextPool::TextPool()                                        (Quality:       0       0       0       0       0       0)
0x00182bc0 TextPool::~TextPool()                                       (Quality:       0       0       0       0       0       0)
0x00182c40 TextPool::getBaseIdx(double)                                (Quality:       0       0       0       0       0       0)
0x00182c60 TextPool::addWord(TextWord*)                                (Quality:       0       0       0       0       0       0)
0x00182fe0 TextLine::TextLine(TextBlock*, int, double)                 (Quality:       0       0       0       0       0       0)
0x00183070 TextLine::~TextLine()                                       (Quality:       0       0       0       0       0       0)
0x001830f0 TextLine::addWord(TextWord*)                                (Quality:       0       0       0       0       0       0)
0x001831a0 TextLine::primaryDelta(TextLine*)                           (Quality:       0       0       0       0       0       0)
0x00183200 TextLine::primaryCmp(TextLine*)                             (Quality:       0       0       0       0       0       0)
0x001832a0 TextLine::secondaryCmp(TextLine*)                           (Quality:       0       0       0       0       0       0)
0x001832f0 TextLine::cmpXY(void const*, void const*)                   (Quality:       0       0       0       0       0       0)
0x00183330 TextLine::cmpYX(TextLine*)                                  (Quality:       0       0       0       0       0       0)
0x00183370 TextLine::coalesce(UnicodeMap*)                             (Quality:       0       0       0       0       0       0)
0x00183770 TextLineFrag::init(TextLine*, int, int)                     (Quality:       0       0       0       0       0       0)
0x00183790 TextLineFrag::computeCoords(bool)                           (Quality:       0       0       0       0       0       0)
0x00183d20 TextBlock::TextBlock(TextPage*, int)                        (Quality:       0       0       0       0       0       0)
0x00183db0 TextBlock::~TextBlock()                                     (Quality:       0       0       0       0       0       0)
0x00183e00 TextBlock::addWord(TextWord*)                               (Quality:       0       0       0       0       0       0)
0x00183eb0 TextBlock::coalesce(UnicodeMap*, double)                    (Quality:       0       0       0       0       0       0)
0x00184ac0 TextBlock::updatePriMinMax(TextBlock*)                      (Quality:       0       0       0       0       0       0)
0x00184c00 TextBlock::cmpYXPrimaryRot(void const*, void const*)        (Quality:       0       0       0       0       0       0)
0x00184d00 TextBlock::primaryCmp(TextBlock*)                           (Quality:       0       0       0       0       0       0)
0x00184da0 TextBlock::secondaryDelta(TextBlock*)                       (Quality:       0       0       0       0       0       0)
0x00184e00 TextBlock::isBelow(TextBlock*)                              (Quality:       0       0       0       0       0       0)
0x00184ed0 TextBlock::isBeforeByRule1(TextBlock*)                      (Quality:       0       0       0       0       0       0)
0x00184fd0 TextBlock::isBeforeByRule2(TextBlock*)                      (Quality:       0       0       0       0       0       0)
0x00185080 TextBlock::visitDepthFirst(TextBlock*, int, TextBlock**, int, bool*) (Quality:       0       0       0       0       0       0)
0x00185260 TextFlow::TextFlow(TextPage*, TextBlock*)                   (Quality:       0       0       0       0       0       0)
0x001852b0 TextFlow::~TextFlow()                                       (Quality:       0       0       0       0       0       0)
0x00185300 TextFlow::addBlock(TextBlock*)                              (Quality:       0       0       0       0       0       0)
0x00185370 TextFlow::blockFits(TextBlock*, TextBlock*)                 (Quality:       0       0       0       0       0       0)
0x00185400 TextWordList::TextWordList(TextPage*, bool)                 (Quality:       0       0       0       0       0       0)
0x00185650 TextWordList::~TextWordList()                               (Quality:       0       0       0       0       0       0)
0x00185680 TextWordList::getLength()                                   (Quality:       0       0       0       0       0       0)
0x00185690 TextWordList::get(int)                                      (Quality:       0       0       0       0       0       0)
0x001856b0 TextPage::TextPage(bool)                                    (Quality:       0       0       0       0       0       0)
0x001857d0 TextPage::incRefCnt()                                       (Quality:       0       0       0       0       0       0)
0x001857e0 TextPage::clear()                                           (Quality:       0       0       0       0       0       0)
0x00185a90 TextPage::~TextPage()                                       (Quality:       0       0       0       0       0       0)
0x00185b90 TextPage::decRefCnt()                                       (Quality:       0       0       0       0       0       0)
0x00185bc0 TextPage::startPage(GfxState*)                              (Quality:       0       0       0       0       0       0)
0x00185c10 TextOutputDev::startPage(int, GfxState*, XRef*)             (Quality:       0       0       0       0       0       0)
0x00185c20 TextPage::updateFont(GfxState*)                             (Quality:       0       0       0       0       0       0)
0x00185eb0 TextOutputDev::restoreState(GfxState*)                      (Quality:       0       0       0       0       0       0)
0x00185ec0 TextOutputDev::updateFont(GfxState*)                        (Quality:       0       0       0       0       0       0)
0x00185ed0 TextPage::beginWord(GfxState*)                              (Quality:       0       0       0       0       0       0)
0x00186070 TextPage::incCharCount(int)                                 (Quality:       0       0       0       0       0       0)
0x00186080 TextOutputDev::incCharCount(int)                            (Quality:       0       0       0       0       0       0)
0x00186090 TextPage::addWord(TextWord*)                                (Quality:       0       0       0       0       0       0)
0x001860f0 TextPage::endWord()                                         (Quality:       0       0       0       0       0       0)
0x000b5d20 Splash::setTransfer(unsigned char*, unsigned char*, unsigned char*, unsigned char*)@plt (Quality:       0       0       0       0       0       0)
0x00186140 TextPage::addChar(GfxState*, double, double, double, double, unsigned int, int, unsigned int*, int) (Quality:       0       0       0       0       0       0)
0x00186950 TextPage::addUnderline(double, double, double, double)      (Quality:       0       0       0       0       0       0)
0x001869d0 TextOutputDev::stroke(GfxState*)                            (Quality:       0       0       0       0       0       0)
0x00186ac0 TextOutputDev::fill(GfxState*)                              (Quality:       0       0       0       0       0       0)
0x00186d00 TextPage::addLink(int, int, int, int, AnnotLink*)           (Quality:       0       0       0       0       0       0)
0x00186d60 TextOutputDev::processLink(AnnotLink*)                      (Quality:       0       0       0       0       0       0)
0x00186f40 TextPage::coalesce(bool, double, bool)                      (Quality:       0       0       0       0       0       0)
0x001894a0 TextPage::findText(unsigned int*, int, bool, bool, bool, bool, bool, bool, bool, double*, double*, double*, double*) (Quality:       0       0       0       0       0       0)
0x00189ff0 TextSelectionVisitor::TextSelectionVisitor(TextPage*)       (Quality:       0       0       0       0       0       0)
0x0018a010 TextSelectionDumper::TextSelectionDumper(TextPage*)         (Quality:       0       0       0       0       0       0)
0x0018a070 TextSelectionDumper::finishLine()                           (Quality:       0       0       0       0       0       0)
0x0018a100 TextSelectionDumper::startLine()                            (Quality:       0       0       0       0       0       0)
0x0018a130 TextSelectionDumper::visitLine(TextLine*, TextWord*, TextWord*, int, int, PDFRectangle*) (Quality:       0       0       0       0       0       0)
0x0018a1d0 TextSelectionDumper::endPage()                              (Quality:       0       0       0       0       0       0)
0x0018a1e0 TextSelectionDumper::takeWordList(int*)                     (Quality:       0       0       0       0       0       0)
0x0018a210 TextSelectionSizer::TextSelectionSizer(TextPage*, double)   (Quality:       0       0       0       0       0       0)
0x0018a260 TextSelectionPainter::TextSelectionPainter(TextPage*, double, int, OutputDev*, GfxColor*, GfxColor*) (Quality:       0       0       0       0       0       0)
0x0018a4a0 TextSelectionPainter::endPage()                             (Quality:       0       0       0       0       0       0)
0x0018a900 TextWord::visitSelection(TextSelectionVisitor*, PDFRectangle*, SelectionStyle) (Quality:       0       0       0       0       0       0)
0x0018a9b0 TextLine::visitSelection(TextSelectionVisitor*, PDFRectangle*, SelectionStyle) (Quality:       0       0       0       0       0       0)
0x0018ac60 TextBlock::visitSelection(TextSelectionVisitor*, PDFRectangle*, SelectionStyle) (Quality:       0       0       0       0       0       0)
0x0018b280 TextPage::visitSelection(TextSelectionVisitor*, PDFRectangle*, SelectionStyle) (Quality:       0       0       0       0       0       0)
0x0018b9d0 TextPage::drawSelection(OutputDev*, double, int, PDFRectangle*, SelectionStyle, GfxColor*, GfxColor*) (Quality:       0       0       0       0       0       0)
0x0018ba30 TextPage::getSelectionRegion(PDFRectangle*, SelectionStyle, double) (Quality:       0       0       0       0       0       0)
0x0018ba70 TextPage::getSelectionWords(PDFRectangle*, SelectionStyle, int*) (Quality:       0       0       0       0       0       0)
0x0018bae0 TextPage::findCharRange(int, int, double*, double*, double*, double*) (Quality:       0       0       0       0       0       0)
0x0018bdd0 TextPage::assignColumns(TextLineFrag*, int, bool)           (Quality:       0       0       0       0       0       0)
0x0018c270 TextPage::dumpFragment(unsigned int*, int, UnicodeMap*, GooString*) (Quality:       0       0       0       0       0       0)
0x0018c750 TextPage::getText(double, double, double, double)           (Quality:       0       0       0       0       0       0)
0x0018d370 TextSelectionDumper::getText()                              (Quality:       0       0       0       0       0       0)
0x0018d4e0 TextPage::getSelectionText(PDFRectangle*, SelectionStyle)   (Quality:       0       0       0       0       0       0)
0x0018d540 TextPage::dump(void*, void (*)(void*, char const*, int), bool) (Quality:       0       0       0       0       0       0)
0x0018dd40 TextOutputDev::endPage()                                    (Quality:       0       0       0       0       0       0)
0x0018ddb0 TextPage::makeWordList(bool)                                (Quality:       0       0       0       0       0       0)
0x0018dde0 ActualText::ActualText(TextPage*)                           (Quality:       0       0       0       0       0       0)
0x0018de10 ActualText::~ActualText()                                   (Quality:       0       0       0       0       0       0)
0x0018de50 TextOutputDev::~TextOutputDev()                             (Quality:       0       0       0       0       0       0)
0x0018ded0 TextOutputDev::~TextOutputDev()                             (Quality:       0       0       0       0       0       0)
0x0018def0 ActualText::addChar(GfxState*, double, double, double, double, unsigned int, int, unsigned int*, int) (Quality:       0       0       0       0       0       0)
0x0018df30 TextOutputDev::drawChar(GfxState*, double, double, double, double, double, double, unsigned int, int, unsigned int*, int) (Quality:       0       0       0       0       0       0)
0x0018df40 ActualText::begin(GfxState*, GooString*)                    (Quality:       0       0       0       0       0       0)
0x0018df90 TextOutputDev::beginActualText(GfxState*, GooString*)       (Quality:       0       0       0       0       0       0)
0x0018dfa0 ActualText::end(GfxState*)                                  (Quality:       0       0       0       0       0       0)
0x0018e040 TextOutputDev::endActualText(GfxState*)                     (Quality:       0       0       0       0       0       0)
0x0018e050 TextOutputDev::TextOutputDev(char*, bool, double, bool, bool) (Quality:       0       0       0       0       0       0)
0x0018e200 TextOutputDev::TextOutputDev(void (*)(void*, char const*, int), void*, bool, double, bool) (Quality:       0       0       0       0       0       0)
0x0018e2f0 TextOutputDev::findText(unsigned int*, int, bool, bool, bool, bool, bool, bool, bool, double*, double*, double*, double*) (Quality:       0       0       0       0       0       0)
0x0018e330 TextOutputDev::getText(double, double, double, double)      (Quality:       0       0       0       0       0       0)
0x0018e340 TextOutputDev::drawSelection(OutputDev*, double, int, PDFRectangle*, SelectionStyle, GfxColor*, GfxColor*) (Quality:       0       0       0       0       0       0)
0x0018e350 TextOutputDev::getSelectionRegion(PDFRectangle*, SelectionStyle, double) (Quality:       0       0       0       0       0       0)
0x0018e360 TextOutputDev::getSelectionText(PDFRectangle*, SelectionStyle) (Quality:       0       0       0       0       0       0)
0x0018e370 TextOutputDev::findCharRange(int, int, double*, double*, double*, double*) (Quality:       0       0       0       0       0       0)
0x0018e380 TextOutputDev::makeWordList()                               (Quality:       0       0       0       0       0       0)
0x0018e3a0 TextOutputDev::takeText()                                   (Quality:       0       0       0       0       0       0)
0x0018e3e0 TextOutputDev::isOk()                                       (Quality:       0       0       0       0       0       0)
0x0018e3f0 TextOutputDev::upsideDown()                                 (Quality:       0       0       0       0       0       0)
0x0018e400 TextOutputDev::useDrawChar()                                (Quality:       0       0       0       0       0       0)
0x0018e410 TextOutputDev::interpretType3Chars()                        (Quality:       0       0       0       0       0       0)
0x0018e420 TextOutputDev::needNonText()                                (Quality:       0       0       0       0       0       0)
0x0018e430 TextOutputDev::needCharCount()                              (Quality:       0       0       0       0       0       0)
0x0018e440 TextSelectionDumper::visitBlock(TextBlock*, TextLine*, TextLine*, PDFRectangle*) (Quality:       0       0       0       0       0       0)
0x001c39b0 SplashXPathScanner::clipAALine(SplashBitmap*, int*, int*, int) (Quality:       0       0       0       0       0       0)
0x0018e460 TextSelectionSizer::visitBlock(TextBlock*, TextLine*, TextLine*, PDFRectangle*) (Quality:       0       0       0       0       0       0)
0x0018e470 TextSelectionSizer::visitWord(TextWord*, int, int, PDFRectangle*) (Quality:       0       0       0       0       0       0)
0x0018e480 TextSelectionPainter::visitBlock(TextBlock*, TextLine*, TextLine*, PDFRectangle*) (Quality:       0       0       0       0       0       0)
0x0018e490 TextSelectionSizer::~TextSelectionSizer()                   (Quality:       0       0       0       0       0       0)
0x0018e4a0 MarkedContentOutputDev::startPage(int, GfxState*, XRef*)    (Quality:       0       0       0       0       0       0)
0x0018e4e0 MarkedContentOutputDev::endPage()                           (Quality:       0       0       0       0       0       0)
0x0018e500 MarkedContentOutputDev::~MarkedContentOutputDev()           (Quality:       0       0       0       0       0       0)
0x0018e600 MarkedContentOutputDev::~MarkedContentOutputDev()           (Quality:       0       0       0       0       0       0)
0x0018e620 MarkedContentOutputDev::MarkedContentOutputDev(int)         (Quality:       0       0       0       0       0       0)
0x0018e700 MarkedContentOutputDev::needFontChange(GfxFont*) const      (Quality:       0       0       0       0       0       0)
0x0018e750 MarkedContentOutputDev::getTextSpans() const                (Quality:       0       0       0       0       0       0)
0x0018e760 MarkedContentOutputDev::endSpan()                           (Quality:       0       0       0       0       0       0)
0x0018e870 MarkedContentOutputDev::endMarkedContent(GfxState*)         (Quality:       0       0       0       0       0       0)
0x0018e8c0 MarkedContentOutputDev::drawChar(GfxState*, double, double, double, double, double, double, unsigned int, int, unsigned int*, int) (Quality:       0       0       0       0       0       0)
0x0018ec30 MarkedContentOutputDev::beginMarkedContent(char*, Dict*)    (Quality:       0       0       0       0       0       0)
0x0018ece0 MarkedContentOutputDev::isOk()                              (Quality:       0       0       0       0       0       0)
0x0018ecf0 MarkedContentOutputDev::upsideDown()                        (Quality:       0       0       0       0       0       0)
0x0018ed00 MarkedContentOutputDev::useDrawChar()                       (Quality:       0       0       0       0       0       0)
0x0018ed10 MarkedContentOutputDev::interpretType3Chars()               (Quality:       0       0       0       0       0       0)
0x0018ed20 MarkedContentOutputDev::needNonText()                       (Quality:       0       0       0       0       0       0)
0x0018ed30 MarkedContentOutputDev::needCharCount()                     (Quality:       0       0       0       0       0       0)
0x0018ed40 std::vector<TextSpan, std::allocator<TextSpan> >::_M_insert_aux(__gnu_cxx::__normal_iterator<TextSpan*, std::vector<TextSpan, std::allocator<TextSpan> > >, TextSpan const&) (Quality:       0       0       0       0       0       0)
0x0018f030 toRoman(int, GooString*, bool)                              (Quality:       0       0       0       0       0       0)
0x0018f180 PageLabelInfo::Interval::Interval(Object*, int)             (Quality:       0       0       0       0       0       0)
0x0018f3e0 PageLabelInfo::Interval::~Interval()                        (Quality:       0       0       0       0       0       0)
0x0018f410 PageLabelInfo::~PageLabelInfo()                             (Quality:       0       0       0       0       0       0)
0x0018f470 PageLabelInfo::parse(Object*)                               (Quality:       0       0       0       0       0       0)
0x0018f6c0 PageLabelInfo::PageLabelInfo(Object*, int)                  (Quality:       0       0       0       0       0       0)
0x0018f740 PageLabelInfo::labelToIndex(GooString*, int*)               (Quality:       0       0       0       0       0       0)
0x0018f9f0 PageLabelInfo::indexToLabel(int, GooString*)                (Quality:       0       0       0       0       0       0)
0x0018fc30 StandardSecurityHandler::isUnencrypted()                    (Quality:       0       0       0       0       0       0)
0x0018fc50 StandardSecurityHandler::getAuthData()                      (Quality:       0       0       0       0       0       0)
0x0018fc60 StandardSecurityHandler::makeAuthData(GooString*, GooString*) (Quality:       0       0       0       0       0       0)
0x0018fcc0 StandardSecurityHandler::authorize(void*)                   (Quality:       0       0       0       0       0       0)
0x0018fd30 Object::getName() [clone .isra.14]                          (Quality:       0       0       0       0       0       0)
0x0018fd70 Object::dictLookup(char const*, Object*, int) [clone .isra.17] [clone .constprop.23] (Quality:       0       0       0       0       0       0)
0x0018fdc0 StandardSecurityHandler::freeAuthData(void*)                (Quality:       0       0       0       0       0       0)
0x0018fe20 SecurityHandler::SecurityHandler(PDFDoc*)                   (Quality:       0       0       0       0       0       0)
0x0018fe40 SecurityHandler::~SecurityHandler()                         (Quality:       0       0       0       0       0       0)
0x0018fe50 StandardSecurityHandler::~StandardSecurityHandler()         (Quality:       0       0       0       0       0       0)
0x0018ff10 StandardSecurityHandler::~StandardSecurityHandler()         (Quality:       0       0       0       0       0       0)
0x0018ff30 SecurityHandler::~SecurityHandler()                         (Quality:       0       0       0       0       0       0)
0x0018ff50 SecurityHandler::checkEncryption(GooString*, GooString*)    (Quality:       0       0       0       0       0       0)
0x001900e0 StandardSecurityHandler::StandardSecurityHandler(PDFDoc*, Object*) (Quality:       0       0       0       0       0       0)
0x00190ca0 SecurityHandler::make(PDFDoc*, Object*)                     (Quality:       0       0       0       0       0       0)
0x00190da0 SecurityHandler::isUnencrypted()                            (Quality:       0       0       0       0       0       0)
0x00190db0 StandardSecurityHandler::getPermissionFlags()               (Quality:       0       0       0       0       0       0)
0x00190dc0 StandardSecurityHandler::getOwnerPasswordOk()               (Quality:       0       0       0       0       0       0)
0x00190dd0 StandardSecurityHandler::getFileKey()                       (Quality:       0       0       0       0       0       0)
0x00190de0 StandardSecurityHandler::getFileKeyLength()                 (Quality:       0       0       0       0       0       0)
0x00190df0 StandardSecurityHandler::getEncVersion()                    (Quality:       0       0       0       0       0       0)
0x00190e00 StandardSecurityHandler::getEncRevision()                   (Quality:       0       0       0       0       0       0)
0x00190e10 StandardSecurityHandler::getEncAlgorithm()                  (Quality:       0       0       0       0       0       0)
0x00190e20 Sound::Sound(Object*, bool)                                 (Quality:       0       0       0       0       0       0)
0x00191180 Sound::parseSound(Object*)                                  (Quality:       0       0       0       0       0       0)
0x00191220 Sound::~Sound()                                             (Quality:       0       0       0       0       0       0)
0x00191260 Sound::getStream()                                          (Quality:       0       0       0       0       0       0)
0x001912a0 Sound::copy()                                               (Quality:       0       0       0       0       0       0)
0x00191320 getCurrentDir()                                             (Quality:       0       0       0       0       0       0)
0x00191380 appendToPath(GooString*, char const*)                       (Quality:       0       0       0       0       0       0)
0x00191490 grabPath(char*)                                             (Quality:       0       0       0       0       0       0)
0x001914f0 isAbsolutePath(char*)                                       (Quality:       0       0       0       0       0       0)
0x00191500 getModTime(char*)                                           (Quality:       0       0       0       0       0       0)
0x00191530 openTempFile(GooString**, _IO_FILE**, char const*)          (Quality:       0       0       0       0       0       0)
0x00191620 openFile(char const*, char const*)                          (Quality:       0       0       0       0       0       0)
0x00191630 getLine(char*, int, _IO_FILE*)                              (Quality:       0       0       0       0       0       0)
0x001916d0 Gfseek(_IO_FILE*, long long, int)                           (Quality:       0       0       0       0       0       0)
0x001916e0 Gftell(_IO_FILE*)                                           (Quality:       0       0       0       0       0       0)
0x001916f0 GoffsetMax()                                                (Quality:       0       0       0       0       0       0)
0x000b3fe0 JBIG2SymbolDict::JBIG2SymbolDict(unsigned int, unsigned int)@plt (Quality:       0       0       0       0       0       0)
0x00191720 GooFile::size() const                                       (Quality:       0       0       0       3       3       3)
0x00191730 GooFile::open(GooString const*)                             (Quality:       0       0       0       1       1       1)
0x00191760 GDirEntry::GDirEntry(char*, char*, bool)                    (Quality:       0       0       0       0       0       0)
0x00191820 GDirEntry::~GDirEntry()                                     (Quality:       0       0       0       0       0       0)
0x00191870 GDir::GDir(char*, bool)                                     (Quality:       0       0       0       4       4       4)
0x001918c0 GDir::~GDir()                                               (Quality:       0       0       0       4       4       4)
0x00191900 GDir::getNextEntry()                                        (Quality:       0       0       0       4       4       4)
0x001919a0 GDir::rewind()                                              (Quality:       0       0       0       0       0       0)
0x001919c0 GooHash::GooHash(bool)                                      (Quality:       0       0       0       9       9       9)
0x00191a20 GooHash::~GooHash()                                         (Quality:       0       0       0       9       9       9)
0x000b3fd0 AnnotAppearance::~AnnotAppearance()@plt                     (Quality:       0       0       0       0       0       0)
0x000b3fc0 MediaWindowParameters::~MediaWindowParameters()@plt         (Quality:       0       0       0       0       0       0)
0x00191ba0 GooHash::getNext(GooHashIter**, GooString**, int*)          (Quality:       0       0       0       0       0       0)
0x00191c50 GooHash::killIter(GooHashIter**)                            (Quality:       0       0       0       0       0       0)
0x00191c70 GooHash::hash(GooString*)                                   (Quality:       0       0       0      60      60      60)
0x00191cb0 GooHash::expand()                                           (Quality:       0       0       0       2       2       2)
0x00191d70 GooHash::add(GooString*, void*)                             (Quality:       0       0       0       6       6       6)
0x00191de0 GooHash::add(GooString*, int)                               (Quality:       0       0       0      23      23      23)
0x00191e50 GooHash::find(GooString*, int*)                             (Quality:       0       0       0       9       9       9)
0x00191eb0 GooHash::replace(GooString*, void*)                         (Quality:       0       0       0       0       0       0)
0x00191f10 GooHash::replace(GooString*, int)                           (Quality:       0       0       0       0       0       0)
0x00191f70 GooHash::lookup(GooString*)                                 (Quality:       0       0       0       0       0       0)
0x00191fa0 GooHash::lookupInt(GooString*)                              (Quality:       0       0       0       9       9       9)
0x00191fd0 GooHash::remove(GooString*)                                 (Quality:       0       0       0       0       0       0)
0x00192060 GooHash::removeInt(GooString*)                              (Quality:       0       0       0       0       0       0)
0x00192100 GooHash::hash(char const*)                                  (Quality:       0       0       0       0       0       0)
0x00192130 GooHash::find(char const*, int*)                            (Quality:       0       0       0       0       0       0)
0x00192190 GooHash::lookup(char const*)                                (Quality:       0       0       0       0       0       0)
0x001921c0 GooHash::lookupInt(char const*)                             (Quality:       0       0       0       0       0       0)
0x001921f0 GooHash::remove(char const*)                                (Quality:       0       0       0       0       0       0)
0x00192280 GooHash::removeInt(char const*)                             (Quality:       0       0       0       0       0       0)
0x00192320 GooList::GooList()                                          (Quality:       0       0       0       8       8       8)
0x00192350 GooList::GooList(int)                                       (Quality:       0       0       0       0       0       0)
0x00192380 GooList::~GooList()                                         (Quality:       0       0       0       8       8       8)
0x00192390 GooList::copy()                                             (Quality:       0       0       0       0       0       0)
0x001923e0 GooList::sort(int (*)(void const*, void const*))            (Quality:       0       0       0       0       0       0)
0x00192400 GooList::reverse()                                          (Quality:       0       0       0       0       0       0)
0x00192460 GooList::expand()                                           (Quality:       0       0       0       0       0       0)
0x00192490 GooList::append(void*)                                      (Quality:       0       0       0       1       1       1)
0x001924d0 GooList::append(GooList*)                                   (Quality:       0       0       0       0       0       0)
0x00192540 GooList::insert(int, void*)                                 (Quality:       0       0       0       2       2       2)
0x001925d0 GooList::shrink()                                           (Quality:       0       0       0       0       0       0)
0x00192600 GooList::del(int)                                           (Quality:       0       0       0       0       0       0)
0x000b3fb0 SplashFTFontEngine::~SplashFTFontEngine()@plt               (Quality:       0       0       0       0       0       0)
0x000b3fa0 JArithmeticDecoderStats::JArithmeticDecoderStats(int)@plt   (Quality:       0       0       0       0       0       0)
0x001926b0 GooTimer::stop()                                            (Quality:       0       0       0       0       0       0)
0x001926d0 GooTimer::getElapsed()                                      (Quality:       0       0       0       0       0       0)
0x00192750 GooString::Set(char const*, int, char const*, int)          (Quality:       0       0       0  100000  100000  100000)
0x00192a20 GooString::GooString()                                      (Quality:       0       0       0  100000  100000  100000)
0x000b3f90 AnnotSound::initialize(PDFDoc*, Dict*)@plt                  (Quality:       0       0       0       0       0       0)
0x00192a70 GooString::GooString(char const*, int)                      (Quality:       0       0       0  100000  100000  100000)
0x00192a90 GooString::GooString(GooString*, int, int)                  (Quality:       0       0       0       0       0       0)
0x00192af0 GooString::GooString(GooString const*)                      (Quality:       0       0       0  100000  100000  100000)
0x00192b20 GooString::GooString(GooString*, GooString*)                (Quality:       0       0       0       0       0       0)
0x00192b50 GooString::~GooString()                                     (Quality:       0       0       0  100000  100000  100000)
0x00192b70 GooString::clear()                                          (Quality:       0       0       0       0       0       0)
0x00192c30 GooString::append(char const*, int)                         (Quality:       0       0       0  100000  100000  100000)
0x00192e30 GooString::append(char)                                     (Quality:       0       0       0  100000  100000  100000)
0x00192e50 GooString::append(GooString*)                               (Quality:       0       0       0       0       0       0)
0x000b3f80 png_write_image@plt                                         (Quality:       0       0       0       0       0       0)
0x00192f70 GooString::fromInt(int)                                     (Quality:       0       0       0       0       0       0)
0x00192fd0 GooString::formatUInt(unsigned long long, char*, int, bool, int, int, char**, int*, bool) (Quality:       0       0       0       0       0       0)
0x001930b0 GooString::formatDouble(double, char*, int, int, bool, char**, int*) (Quality:       0       0       0  100000  100000  100000)
0x00193310 GooString::formatDoubleSmallAware(double, char*, int, int, bool, char**, int*) (Quality:       0       0       0      12      12      12)
0x00193360 GooString::appendfv(char const*, __va_list_tag*)            (Quality:       0       0       0  100000  100000  100000)
0x00193ca0 GooString::format(char const*, ...)                         (Quality:       0       0       0       0       0       0)
0x00193d60 GooString::formatv(char const*, __va_list_tag*)             (Quality:       0       0       0  100000  100000  100000)
0x00193da0 GooString::appendf(char const*, ...)                        (Quality:       0       0       0       0       0       0)
0x00193e40 GooString::insert(int, char const*, int)                    (Quality:       0       0       0       0       0       0)
0x00194090 GooString::insert(int, char)                                (Quality:       0       0       0       0       0       0)
0x001940b0 GooString::insert(int, GooString*)                          (Quality:       0       0       0       0       0       0)
0x001940c0 GooString::del(int, int)                                    (Quality:       0       0       0       0       0       0)
0x001942c0 GooString::upperCase()                                      (Quality:       0       0       0       0       0       0)
0x00194320 GooString::lowerCase()                                      (Quality:       0       0       0       0       0       0)
0x000b3f70 BaseCryptStream::BaseCryptStream(Stream*, unsigned char*, CryptAlgorithm, int, int, int)@plt (Quality:       0       0       0       0       0       0)
0x001943f0 GooString::cmpN(GooString*, int) const                      (Quality:       0       0       0       0       0       0)
0x000b3f40 StructElement::getTextSpansInternal(MarkedContentOutputDev&) const@plt (Quality:       0       0       0       0       0       0)
0x001944f0 GooString::cmpN(char const*, int) const                     (Quality:       0       0       0       3       3       3)
0x000b3f30 GfxUnivariateShading::GfxUnivariateShading(GfxUnivariateShading*)@plt (Quality:       0       0       0       0       0       0)
0x001945d0 GooString::hasUnicodeMarker()                               (Quality:       0       0       0       0       0       0)
0x001945f0 GooString::sanitizedName(bool)                              (Quality:       0       0       0       0       0       0)
0x001946e0 gmalloc                                                     (Quality:       0       0       0  100000  100000  100000)
0x00194740 gmalloc_checkoverflow                                       (Quality:       0       0       0       0       0       0)
0x000b3f20 AnnotCalloutLine::AnnotCalloutLine(double, double, double, double)@plt (Quality:       0       0       0       0       0       0)
0x00194810 grealloc_checkoverflow(void*, unsigned long)                (Quality:       0       0       0       0       0       0)
0x000b3f10 GfxPatternColorSpace::GfxPatternColorSpace(GfxColorSpace*)@plt (Quality:       0       0       0       0       0       0)
0x00194930 gmallocn_checkoverflow                                      (Quality:       0       0       0       6       6       6)
0x001949d0 gmallocn3                                                   (Quality:       0       0       0       0       0       0)
0x00194a80 gmallocn3_checkoverflow                                     (Quality:       0       0       0       0       0       0)
0x00194b30 gfree                                                       (Quality:       0       0       0  100000  100000  100000)
0x00194b50 greallocn_checkoverflow                                     (Quality:       0       0       0       1       1       1)
0x000b3f00 Dict::lookupInt(char const*, char const*, int*)@plt         (Quality:       0       0       0       0       0       0)
0x00194d10 copyString                                                  (Quality:       0       0       0  100000  100000  100000)
0x00194d30 gstrndup                                                    (Quality:       0       0       0       0       0       0)
0x00194d60 NetPBMWriter::writePointers(unsigned char**, int)           (Quality:       0       0       0       0       0       0)
0x00194db0 NetPBMWriter::close()                                       (Quality:       0       0       0       0       0       0)
0x00194dc0 NetPBMWriter::init(_IO_FILE*, int, int, int, int)           (Quality:       0       0       0       0       0       0)
0x00194e60 NetPBMWriter::writeRow(unsigned char**)                     (Quality:       0       0       0       0       0       0)
0x00194ef0 NetPBMWriter::NetPBMWriter(NetPBMWriter::Format)            (Quality:       0       0       0       0       0       0)
0x00194f10 ImgWriter::supportCMYK()                                    (Quality:       0       0       0       0       0       0)
0x00194f20 NetPBMWriter::~NetPBMWriter()                               (Quality:       0       0       0       0       0       0)
0x00194f40 NetPBMWriter::~NetPBMWriter()                               (Quality:       0       0       0       0       0       0)
0x00194f60 PNGWriter::~PNGWriter()                                     (Quality:       0       0       0       0       0       0)
0x00194fc0 PNGWriter::~PNGWriter()                                     (Quality:       0       0       0       0       0       0)
0x00194fe0 PNGWriter::init(_IO_FILE*, int, int, int, int)              (Quality:       0       0       0       0       0       0)
0x001952d0 PNGWriter::writePointers(unsigned char**, int)              (Quality:       0       0       0       0       0       0)
0x00195330 PNGWriter::writeRow(unsigned char**)                        (Quality:       0       0       0       0       0       0)
0x001953a0 PNGWriter::close()                                          (Quality:       0       0       0       0       0       0)
0x00195410 PNGWriter::PNGWriter(PNGWriter::Format)                     (Quality:       0       0       0       0       0       0)
0x00195460 PNGWriter::setICCProfile(char const*, unsigned char*, int)  (Quality:       0       0       0       0       0       0)
0x001954c0 PNGWriter::setSRGBProfile()                                 (Quality:       0       0       0       0       0       0)
0x001954d0 JpegWriter::supportCMYK()                                   (Quality:       0       0       0       0       0       0)
0x001954e0 outputMessage(jpeg_common_struct*)                          (Quality:       0       0       0       0       0       0)
0x00195520 JpegWriter::~JpegWriter()                                   (Quality:       0       0       0       0       0       0)
0x00195560 JpegWriter::~JpegWriter()                                   (Quality:       0       0       0       0       0       0)
0x00195580 JpegWriter::init(_IO_FILE*, int, int, int, int)             (Quality:       0       0       0       0       0       0)
0x00195740 JpegWriter::writePointers(unsigned char**, int)             (Quality:       0       0       0       0       0       0)
0x001957b0 JpegWriter::writeRow(unsigned char**)                       (Quality:       0       0       0       0       0       0)
0x00195810 JpegWriter::close()                                         (Quality:       0       0       0       0       0       0)
0x00195830 JpegWriter::JpegWriter(int, bool, JpegWriter::Format)       (Quality:       0       0       0       0       0       0)
0x00195880 JpegWriter::JpegWriter(JpegWriter::Format)                  (Quality:       0       0       0       0       0       0)
0x001958c0 TiffWriter::~TiffWriter()                                   (Quality:       0       0       0       0       0       0)
0x001958f0 TiffWriter::~TiffWriter()                                   (Quality:       0       0       0       0       0       0)
0x00195910 TiffWriter::init(_IO_FILE*, int, int, int, int)             (Quality:       0       0       0       0       0       0)
0x00195d20 TiffWriter::writePointers(unsigned char**, int)             (Quality:       0       0       0       0       0       0)
0x00195db0 TiffWriter::close()                                         (Quality:       0       0       0       0       0       0)
0x00195dd0 TiffWriter::writeRow(unsigned char**)                       (Quality:       0       0       0       0       0       0)
0x00195e20 TiffWriter::TiffWriter(TiffWriter::Format)                  (Quality:       0       0       0       0       0       0)
0x00195e70 TiffWriter::setCompressionString(char const*)               (Quality:       0       0       0       0       0       0)
0x00195e80 TiffWriter::supportCMYK()                                   (Quality:       0       0       0       0       0       0)
0x00195e90 ImgWriter::~ImgWriter()                                     (Quality:       0       0       0       0       0       0)
0x00195ea0 ImgWriter::~ImgWriter()                                     (Quality:       0       0       0       0       0       0)
0x00195ec0 gstrtod                                                     (Quality:       0       0       0       0       0       0)
0x00196170 gatof                                                       (Quality:       0       0       0       0       0       0)
0x00196180 grandom_fill                                                (Quality:       0       0       0       0       0       0)
0x001961f0 grandom_double                                              (Quality:       0       0       0       0       0       0)
0x000b3ef0 PSOutputDev::writePSFmt(char const*, ...)@plt               (Quality:       0       0       0  100000  100000  100000)
0x00196270 FoFiBase::~FoFiBase()                                       (Quality:       0       0       0       0       0       0)
0x000b3ee0 GooString::formatDoubleSmallAware(double, char*, int, int, bool, char**, int*)@plt (Quality:       0       0       0      12      12      12)
0x001962b0 FoFiBase::readFile(char*, int*)                             (Quality:       0       0       0       0       0       0)
0x001963f0 FoFiBase::getS8(int, bool*)                                 (Quality:       0       0       0       0       0       0)
0x000b3ed0 Splash::blitImage(SplashBitmap*, bool, int, int, SplashClipResult)@plt (Quality:       0       0       0       0       0       0)
0x00196440 FoFiBase::getS16BE(int, bool*)                              (Quality:       0       0       0       0       0       0)
0x00196490 FoFiBase::getU16BE(int, bool*)                              (Quality:       0       0       0       0       0       0)
0x001964d0 FoFiBase::getS32BE(int, bool*)                              (Quality:       0       0       0       0       0       0)
0x00196520 FoFiBase::getU32BE(int, bool*)                              (Quality:       0       0       0       0       0       0)
0x00196570 FoFiBase::getU32LE(int, bool*)                              (Quality:       0       0       0       0       0       0)
0x001965c0 FoFiBase::getUVarBE(int, int, bool*)                        (Quality:       0       0       0       0       0       0)
0x00196610 FoFiBase::checkRegion(int, int)                             (Quality:       0       0       0       0       0       0)
0x00196630 FoFiTrueType::~FoFiTrueType()                               (Quality:       0       0       0       0       0       0)
0x00196680 FoFiTrueType::~FoFiTrueType()                               (Quality:       0       0       0       0       0       0)
0x001966a0 void std::__unguarded_linear_insert<TrueTypeLoca*, __gnu_cxx::__ops::_Val_comp_iter<cmpTrueTypeLocaOffsetFunctor> >(TrueTypeLoca*, __gnu_cxx::__ops::_Val_comp_iter<cmpTrueTypeLocaOffsetFunctor>) [clone .isra.11] (Quality:       0       0       0       0       0       0)
0x00196700 void std::__unguarded_linear_insert<TrueTypeLoca*, __gnu_cxx::__ops::_Val_comp_iter<cmpTrueTypeLocaIdxFunctor> >(TrueTypeLoca*, __gnu_cxx::__ops::_Val_comp_iter<cmpTrueTypeLocaIdxFunctor>) [clone .isra.15] (Quality:       0       0       0       0       0       0)
0x00196750 void std::__insertion_sort<TrueTypeLoca*, __gnu_cxx::__ops::_Iter_comp_iter<cmpTrueTypeLocaOffsetFunctor> >(TrueTypeLoca*, TrueTypeLoca*, __gnu_cxx::__ops::_Iter_comp_iter<cmpTrueTypeLocaOffsetFunctor>) [clone .isra.19] (Quality:       0       0       0       0       0       0)
0x00196820 void std::__insertion_sort<TrueTypeLoca*, __gnu_cxx::__ops::_Iter_comp_iter<cmpTrueTypeLocaIdxFunctor> >(TrueTypeLoca*, TrueTypeLoca*, __gnu_cxx::__ops::_Iter_comp_iter<cmpTrueTypeLocaIdxFunctor>) [clone .isra.21] (Quality:       0       0       0       0       0       0)
0x001968d0 FoFiTrueType::getNumCmaps()                                 (Quality:       0       0       0       0       0       0)
0x001968e0 FoFiTrueType::getCmapPlatform(int)                          (Quality:       0       0       0       0       0       0)
0x00196900 FoFiTrueType::getCmapEncoding(int)                          (Quality:       0       0       0       0       0       0)
0x00196920 FoFiTrueType::findCmap(int, int)                            (Quality:       0       0       0       0       0       0)
0x00196970 FoFiTrueType::mapCodeToGID(int, unsigned int)               (Quality:       0       0       0       0       0       0)
0x00196c90 FoFiTrueType::mapNameToGID(char*)                           (Quality:       0       0       0       0       0       0)
0x00196cb0 FoFiTrueType::cvtEncoding(char**, void (*)(void*, char const*, int), void*) (Quality:       0       0       0       0       0       0)
0x00196dc0 FoFiTrueType::cvtCharStrings(char**, int*, void (*)(void*, char const*, int), void*) (Quality:       0       0       0       0       0       0)
0x00196f40 FoFiTrueType::dumpString(unsigned char*, int, void (*)(void*, char const*, int), void*) (Quality:       0       0       0       0       0       0)
0x001970c0 FoFiTrueType::computeTableChecksum(unsigned char*, int)     (Quality:       0       0       0       0       0       0)
0x00197170 FoFiTrueType::seekTable(char const*)                        (Quality:       0       0       0       0       0       0)
0x001971e0 FoFiTrueType::getCFFBlock(char**, int*)                     (Quality:       0       0       0       0       0       0)
0x00197270 FoFiTrueType::getCIDToGIDMap(int*)                          (Quality:       0       0       0       0       0       0)
0x001972e0 FoFiTrueType::getFontMatrix(double*)                        (Quality:       0       0       0       0       0       0)
0x00197340 FoFiTrueType::convertToType1(char*, char const**, bool, void (*)(void*, char const*, int), void*) (Quality:       0       0       0       0       0       0)
0x001973d0 FoFiTrueType::convertToCIDType0(char*, int*, int, void (*)(void*, char const*, int), void*) (Quality:       0       0       0       0       0       0)
0x00197460 FoFiTrueType::convertToType0(char*, int*, int, void (*)(void*, char const*, int), void*) (Quality:       0       0       0       0       0       0)
0x001974f0 FoFiTrueType::getEmbeddingRights()                          (Quality:       0       0       0       0       0       0)
0x00197570 FoFiTrueType::readPostTable()                               (Quality:       0       0       0       0       0       0)
0x00197980 FoFiTrueType::parse()                                       (Quality:       0       0       0       0       0       0)
0x00197e60 FoFiTrueType::FoFiTrueType(char*, int, bool, int)           (Quality:       0       0       0       0       0       0)
0x00197ed0 FoFiTrueType::make(char*, int, int)                         (Quality:       0       0       0       0       0       0)
0x00197f60 FoFiTrueType::load(char*, int)                              (Quality:       0       0       0       0       0       0)
0x00198000 FoFiTrueType::charToTag(char const*)                        (Quality:       0       0       0       0       0       0)
0x00198070 FoFiTrueType::setupGSUB(char const*, char const*)           (Quality:       0       0       0       0       0       0)
0x001983d0 FoFiTrueType::setupGSUB(char const*)                        (Quality:       0       0       0       0       0       0)
0x001983e0 FoFiTrueType::checkGIDInCoverage(unsigned int, unsigned int) (Quality:       0       0       0       0       0       0)
0x00198500 FoFiTrueType::scanLookupSubTable(unsigned int, unsigned int) (Quality:       0       0       0       0       0       0)
0x001985d0 FoFiTrueType::scanLookupList(unsigned int, unsigned int)    (Quality:       0       0       0       0       0       0)
0x00198690 FoFiTrueType::doMapToVertGID(unsigned int)                  (Quality:       0       0       0       0       0       0)
0x00198720 FoFiTrueType::mapToVertGID(unsigned int)                    (Quality:       0       0       0       0       0       0)
0x00198740 FoFiTrueType::cvtSfnts(void (*)(void*, char const*, int), void*, GooString*, bool, int*) (Quality:       0       0       0       0       0       0)
0x001995a0 FoFiTrueType::convertToType42(char*, char**, int*, void (*)(void*, char const*, int), void*) (Quality:       0       0       0       0       0       0)
0x00199740 FoFiTrueType::convertToCIDType2(char*, int*, int, bool, void (*)(void*, char const*, int), void*) (Quality:       0       0       0       0       0       0)
0x00199e00 FoFiTrueType::convertToType0(char*, int*, int, bool, void (*)(void*, char const*, int), void*) (Quality:       0       0       0       0       0       0)
0x0019a3a0 void std::__adjust_heap<TrueTypeLoca*, long, TrueTypeLoca, __gnu_cxx::__ops::_Iter_comp_iter<cmpTrueTypeLocaOffsetFunctor> >(TrueTypeLoca*, long, long, TrueTypeLoca, __gnu_cxx::__ops::_Iter_comp_iter<cmpTrueTypeLocaOffsetFunctor>) (Quality:       0       0       0       0       0       0)
0x0019a560 void std::__heap_select<TrueTypeLoca*, __gnu_cxx::__ops::_Iter_comp_iter<cmpTrueTypeLocaOffsetFunctor> >(TrueTypeLoca*, TrueTypeLoca*, TrueTypeLoca*, __gnu_cxx::__ops::_Iter_comp_iter<cmpTrueTypeLocaOffsetFunctor>) (Quality:       0       0       0       0       0       0)
0x0019a660 void std::__introsort_loop<TrueTypeLoca*, long, __gnu_cxx::__ops::_Iter_comp_iter<cmpTrueTypeLocaOffsetFunctor> >(TrueTypeLoca*, TrueTypeLoca*, long, __gnu_cxx::__ops::_Iter_comp_iter<cmpTrueTypeLocaOffsetFunctor>) (Quality:       0       0       0       0       0       0)
0x0019a960 void std::__adjust_heap<TrueTypeLoca*, long, TrueTypeLoca, __gnu_cxx::__ops::_Iter_comp_iter<cmpTrueTypeLocaIdxFunctor> >(TrueTypeLoca*, long, long, TrueTypeLoca, __gnu_cxx::__ops::_Iter_comp_iter<cmpTrueTypeLocaIdxFunctor>) (Quality:       0       0       0       0       0       0)
0x0019aae0 void std::__heap_select<TrueTypeLoca*, __gnu_cxx::__ops::_Iter_comp_iter<cmpTrueTypeLocaIdxFunctor> >(TrueTypeLoca*, TrueTypeLoca*, TrueTypeLoca*, __gnu_cxx::__ops::_Iter_comp_iter<cmpTrueTypeLocaIdxFunctor>) (Quality:       0       0       0       0       0       0)
0x0019abd0 void std::__introsort_loop<TrueTypeLoca*, long, __gnu_cxx::__ops::_Iter_comp_iter<cmpTrueTypeLocaIdxFunctor> >(TrueTypeLoca*, TrueTypeLoca*, long, __gnu_cxx::__ops::_Iter_comp_iter<cmpTrueTypeLocaIdxFunctor>) (Quality:       0       0       0       0       0       0)
0x000b3ec0 GooString::format(char const*, ...)@plt                     (Quality:       0       0       0       0       0       0)
0x000b3ea0 JPXStream::init()@plt                                       (Quality:       0       0       0       0       0       0)
0x000b3e90 FT_New_Memory_Face@plt                                      (Quality:       0       0       0       0       0       0)
0x0019af00 FoFiType1::writeEncoded(char const**, void (*)(void*, char const*, int), void*) (Quality:       0       0       0       0       0       0)
0x000b3e80 Object::fetch(XRef*, Object*, int)@plt                      (Quality:       0       0       0  100000  100000  100000)
0x000b3e70 GooString::appendfv(char const*, __va_list_tag*)@plt        (Quality:       0       0       0  100000  100000  100000)
0x000b3e60 UnicodeMap::UnicodeMap(char const*, bool, UnicodeMapRange*, int)@plt (Quality:       0       0       0       4       4       4)
0x0019b810 FoFiType1::getFontMatrix(double*)                           (Quality:       0       0       0       0       0       0)
0x000b3e50 AnnotWidget::~AnnotWidget()@plt                             (Quality:       0       0       0       0       0       0)
0x000b3e30 Parser::getObj(Object*, bool, unsigned char*, CryptAlgorithm, int, int, int, int, bool)@plt (Quality:       0       0       0  100000  100000  100000)
0x000b3db8 _init                                                       (Quality:       0       0       0       1       1       1)
0x0019ba10 FoFiType1::load(char*)                                      (Quality:       0       0       0       0       0       0)
0x0019ba60 FoFiType1C::~FoFiType1C()                                   (Quality:       0       0       0       0       0       0)
0x0019bb40 FoFiType1C::~FoFiType1C()                                   (Quality:       0       0       0       0       0       0)
0x0019bb60 FoFiType1C::FoFiType1C(char*, int, bool)                    (Quality:       0       0       0       0       0       0)
0x0019bbc0 FoFiType1C::getName()                                       (Quality:       0       0       0       0       0       0)
0x0019bbe0 FoFiType1C::getEncoding()                                   (Quality:       0       0       0       0       0       0)
0x0019bbf0 FoFiType1C::getCIDToGIDMap(int*)                            (Quality:       0       0       0       0       0       0)
0x0019bd00 FoFiType1C::getFontMatrix(double*)                          (Quality:       0       0       0       0       0       0)
0x0019be60 FoFiType1C::cvtNum(double, bool, GooString*)                (Quality:       0       0       0       0       0       0)
0x0019bfe0 FoFiType1C::cvtGlyphWidth(bool, GooString*, Type1CPrivateDict*) (Quality:       0       0       0       0       0       0)
0x0019c0c0 FoFiType1C::eexecWrite(Type1CEexecBuf*, char const*)        (Quality:       0       0       0       0       0       0)
0x0019c1d0 FoFiType1C::eexecWriteCharstring(Type1CEexecBuf*, unsigned char*, int) (Quality:       0       0       0       0       0       0)
0x0019c2c0 FoFiType1C::writePSString(char*, void (*)(void*, char const*, int), void*) (Quality:       0       0       0       0       0       0)
0x0019c400 FoFiType1C::readFDSelect()                                  (Quality:       0       0       0       0       0       0)
0x0019c5e0 FoFiType1C::readCharset()                                   (Quality:       0       0       0       0       0       0)
0x0019c8d0 FoFiType1C::getOp(int, bool, bool*)                         (Quality:       0       0       0       0       0       0)
0x0019ccb0 FoFiType1C::getDeltaIntArray(int*, int)                     (Quality:       0       0       0       0       0       0)
0x0019ccf0 FoFiType1C::getDeltaFPArray(double*, int)                   (Quality:       0       0       0       0       0       0)
0x0019cd30 FoFiType1C::readPrivateDict(int, int, Type1CPrivateDict*)   (Quality:       0       0       0       0       0       0)
0x0019d210 FoFiType1C::readFD(int, int, Type1CPrivateDict*)            (Quality:       0       0       0       0       0       0)
0x0019d3e0 FoFiType1C::getIndex(int, Type1CIndex*, bool*)              (Quality:       0       0       0       0       0       0)
0x0019d4b0 FoFiType1C::getIndexVal(Type1CIndex*, int, Type1CIndexVal*, bool*) (Quality:       0       0       0       0       0       0)
0x0019d580 FoFiType1C::cvtGlyph(int, int, GooString*, Type1CIndex*, Type1CPrivateDict*, bool) (Quality:       0       0       0       0       0       0)
0x0019f2c0 FoFiType1C::eexecCvtGlyph(Type1CEexecBuf*, char const*, int, int, Type1CIndex*, Type1CPrivateDict*) (Quality:       0       0       0       0       0       0)
0x0019f3a0 FoFiType1C::convertToType0(char*, int*, int, void (*)(void*, char const*, int), void*) (Quality:       0       0       0       0       0       0)
0x001a08d0 FoFiType1C::readTopDict()                                   (Quality:       0       0       0       0       0       0)
0x001a0f00 FoFiType1C::getString(int, char*, bool*)                    (Quality:       0       0       0       0       0       0)
0x001a0fb0 FoFiType1C::getGlyphName(int)                               (Quality:       0       0       0       0       0       0)
0x001a1030 FoFiType1C::convertToType1(char*, char const**, bool, void (*)(void*, char const*, int), void*) (Quality:       0       0       0       0       0       0)
0x001a2230 FoFiType1C::convertToCIDType0(char*, int*, int, void (*)(void*, char const*, int), void*) (Quality:       0       0       0       0       0       0)
0x001a3810 FoFiType1C::buildEncoding()                                 (Quality:       0       0       0       0       0       0)
0x001a3c60 FoFiType1C::parse()                                         (Quality:       0       0       0       0       0       0)
0x001a3f90 FoFiType1C::make(char*, int)                                (Quality:       0       0       0       0       0       0)
0x001a4000 FoFiType1C::load(char*)                                     (Quality:       0       0       0       0       0       0)
0x001a4090 (anonymous namespace)::MemReader::~MemReader()              (Quality:       0       0       0       0       0       0)
0x001a40a0 (anonymous namespace)::MemReader::getByte(int)              (Quality:       0       0       0       0       0       0)
0x001a40c0 (anonymous namespace)::StreamReader::~StreamReader()        (Quality:       0       0       0       0       0       0)
0x001a40d0 (anonymous namespace)::MemReader::cmp(int, char const*)     (Quality:       0       0       0       0       0       0)
0x001a4130 (anonymous namespace)::MemReader::~MemReader()              (Quality:       0       0       0       0       0       0)
0x001a4140 (anonymous namespace)::StreamReader::~StreamReader()        (Quality:       0       0       0       0       0       0)
0x001a4150 (anonymous namespace)::FileReader::~FileReader()            (Quality:       0       0       0       0       0       0)
0x001a4170 (anonymous namespace)::FileReader::~FileReader()            (Quality:       0       0       0       0       0       0)
0x001a4190 (anonymous namespace)::MemReader::getU16BE(int, int*)       (Quality:       0       0       0       0       0       0)
0x001a41d0 (anonymous namespace)::MemReader::getU32BE(int, unsigned int*) (Quality:       0       0       0       0       0       0)
0x001a4220 (anonymous namespace)::MemReader::getU32LE(int, unsigned int*) (Quality:       0       0       0       0       0       0)
0x001a4270 (anonymous namespace)::MemReader::getUVarBE(int, int, unsigned int*) (Quality:       0       0       0       0       0       0)
0x001a42d0 identifyCFF((anonymous namespace)::Reader*, int)            (Quality:       0       0       0       0       0       0)
0x000b3e10 Attribute::~Attribute()@plt                                 (Quality:       0       0       0       0       0       0)
0x001a4900 (anonymous namespace)::FileReader::fillBuf(int, int)        (Quality:       0       0       0       0       0       0)
0x001a4990 (anonymous namespace)::FileReader::cmp(int, char const*)    (Quality:       0       0       0       0       0       0)
0x001a49f0 (anonymous namespace)::FileReader::getByte(int)             (Quality:       0       0       0       0       0       0)
0x001a4a30 (anonymous namespace)::FileReader::getUVarBE(int, int, unsigned int*) (Quality:       0       0       0       0       0       0)
0x001a4ac0 (anonymous namespace)::FileReader::getU32LE(int, unsigned int*) (Quality:       0       0       0       0       0       0)
0x001a4b30 (anonymous namespace)::FileReader::getU32BE(int, unsigned int*) (Quality:       0       0       0       0       0       0)
0x001a4ba0 (anonymous namespace)::FileReader::getU16BE(int, int*)      (Quality:       0       0       0       0       0       0)
0x000b3e00 JBIG2Stream::readProfilesSeg(unsigned int)@plt              (Quality:       0       0       0       0       0       0)
0x000b3df0 ftell@plt                                                   (Quality:       0       0       0       0       0       0)
0x001a4d90 (anonymous namespace)::StreamReader::getByte(int)           (Quality:       0       0       0       0       0       0)
0x001a4dd0 (anonymous namespace)::StreamReader::getUVarBE(int, int, unsigned int*) (Quality:       0       0       0       0       0       0)
0x001a4e60 (anonymous namespace)::StreamReader::getU32LE(int, unsigned int*) (Quality:       0       0       0       0       0       0)
0x001a4ed0 (anonymous namespace)::StreamReader::getU32BE(int, unsigned int*) (Quality:       0       0       0       0       0       0)
0x001a4f40 (anonymous namespace)::StreamReader::getU16BE(int, int*)    (Quality:       0       0       0       0       0       0)
0x001a4f90 FoFiIdentifier::identifyMem(char*, int)                     (Quality:       0       0       0       0       0       0)
0x001a4fd0 FoFiIdentifier::identifyFile(char*)                         (Quality:       0       0       0       0       0       0)
0x000b3de0 ftell@plt-0x10                                              (Quality:       0       0       0     396     396     396)
0x001a50a0 blendXor(unsigned char*, unsigned char*, unsigned char*, SplashColorMode) (Quality:       0       0       0       0       0       0)
0x001a50e0 Splash::pipeRunSimpleMono8(SplashPipe*)                     (Quality:       0       0       0       0       0       0)
0x001a5120 Splash::pipeRunSimpleRGB8(SplashPipe*)                      (Quality:       0       0       0       0       0       0)
0x001a51a0 Splash::pipeRunSimpleXBGR8(SplashPipe*)                     (Quality:       0       0       0       0       0       0)
0x001a5230 Splash::pipeRunSimpleBGR8(SplashPipe*)                      (Quality:       0       0       0       0       0       0)
0x001a52b0 Splash::pipeRunAAMono8(SplashPipe*)                         (Quality:       0       0       0       0       0       0)
0x001a5350 Splash::pipeRunAARGB8(SplashPipe*)                          (Quality:       0       0       0       0       0       0)
0x001a5480 Splash::pipeRunAAXBGR8(SplashPipe*)                         (Quality:       0       0       0       0       0       0)
0x001a55c0 Splash::pipeRunAABGR8(SplashPipe*)                          (Quality:       0       0       0       0       0       0)
0x001a56f0 expandRow(unsigned char*, unsigned char*, int, int, int)    (Quality:       0       0       0       0       0       0)
0x001a5820 splashFloor(double) [clone .part.0]                         (Quality:       0       0       0       0       0       0)
0x001a5840 Splash::pipeRunSimpleMono1(SplashPipe*)                     (Quality:       0       0       0       0       0       0)
0x001a5900 Splash::pipeRunAAMono1(SplashPipe*)                         (Quality:       0       0       0       0       0       0)
0x001a5a20 imgCoordMungeLowerC(double, bool)                           (Quality:       0       0       0       0       0       0)
0x001a5a70 imgCoordMungeUpperC(double, bool)                           (Quality:       0       0       0       0       0       0)
0x001a5ac0 Splash::pipeRun(SplashPipe*)                                (Quality:       0       0       0       0       0       0)
0x001a67c0 Splash::clearModRegion()                                    (Quality:       0       0       0       0       0       0)
0x001a67f0 Splash::Splash(SplashBitmap*, bool, SplashScreenParams*)    (Quality:       0       0       0       0       0       0)
0x001a6930 Splash::Splash(SplashBitmap*, bool, SplashScreen*)          (Quality:       0       0       0       0       0       0)
0x001a6a70 Splash::getMatrix()                                         (Quality:       0       0       0       0       0       0)
0x001a6a80 Splash::getStrokePattern()                                  (Quality:       0       0       0       0       0       0)
0x001a6a90 Splash::getFillPattern()                                    (Quality:       0       0       0       0       0       0)
0x001a6aa0 Splash::getScreen()                                         (Quality:       0       0       0       0       0       0)
0x001a6ab0 Splash::getBlendFunc()                                      (Quality:       0       0       0       0       0       0)
0x001a6ac0 Splash::getStrokeAlpha()                                    (Quality:       0       0       0       0       0       0)
0x001a6ad0 Splash::getFillAlpha()                                      (Quality:       0       0       0       0       0       0)
0x001a6ae0 Splash::getLineWidth()                                      (Quality:       0       0       0       0       0       0)
0x001a6af0 Splash::getLineCap()                                        (Quality:       0       0       0       0       0       0)
0x001a6b00 Splash::getLineJoin()                                       (Quality:       0       0       0       0       0       0)
0x001a6b10 Splash::getMiterLimit()                                     (Quality:       0       0       0       0       0       0)
0x001a6b20 Splash::getFlatness()                                       (Quality:       0       0       0       0       0       0)
0x001a6b30 Splash::getLineDash()                                       (Quality:       0       0       0       0       0       0)
0x001a6b40 Splash::getLineDashLength()                                 (Quality:       0       0       0       0       0       0)
0x001a6b50 Splash::getLineDashPhase()                                  (Quality:       0       0       0       0       0       0)
0x001a6b60 Splash::getStrokeAdjust()                                   (Quality:       0       0       0       0       0       0)
0x001a6b70 Splash::getClip()                                           (Quality:       0       0       0       0       0       0)
0x001a6b80 Splash::getSoftMask()                                       (Quality:       0       0       0       0       0       0)
0x001a6b90 Splash::getInNonIsolatedGroup()                             (Quality:       0       0       0       0       0       0)
0x001a6ba0 Splash::setMatrix(double*)                                  (Quality:       0       0       0       0       0       0)
0x001a6be0 Splash::setStrokePattern(SplashPattern*)                    (Quality:       0       0       0       0       0       0)
0x001a6bf0 Splash::setFillPattern(SplashPattern*)                      (Quality:       0       0       0       0       0       0)
0x001a6c00 Splash::setScreen(SplashScreen*)                            (Quality:       0       0       0       0       0       0)
0x001a6c10 Splash::setBlendFunc(void (*)(unsigned char*, unsigned char*, unsigned char*, SplashColorMode)) (Quality:       0       0       0       0       0       0)
0x001a6c20 Splash::setStrokeAlpha(double)                              (Quality:       0       0       0       0       0       0)
0x001a6c30 Splash::setFillAlpha(double)                                (Quality:       0       0       0       0       0       0)
0x001a6c40 Splash::setFillOverprint(bool)                              (Quality:       0       0       0       0       0       0)
0x001a6c50 Splash::setStrokeOverprint(bool)                            (Quality:       0       0       0       0       0       0)
0x001a6c60 Splash::setOverprintMode(int)                               (Quality:       0       0       0       0       0       0)
0x001a6c70 Splash::setLineWidth(double)                                (Quality:       0       0       0       0       0       0)
0x001a6c80 Splash::setLineCap(int)                                     (Quality:       0       0       0       0       0       0)
0x001a6c90 Splash::setLineJoin(int)                                    (Quality:       0       0       0       0       0       0)
0x001a6ca0 Splash::setMiterLimit(double)                               (Quality:       0       0       0       0       0       0)
0x001a6cb0 Splash::setFlatness(double)                                 (Quality:       0       0       0       0       0       0)
0x001a6ce0 Splash::setLineDash(double*, int, double)                   (Quality:       0       0       0       0       0       0)
0x001a6cf0 Splash::setStrokeAdjust(bool)                               (Quality:       0       0       0       0       0       0)
0x001a6d00 Splash::clipResetToRect(double, double, double, double)     (Quality:       0       0       0       0       0       0)
0x001a6d10 Splash::clipToRect(double, double, double, double)          (Quality:       0       0       0       0       0       0)
0x001a6d20 Splash::clipToPath(SplashPath*, bool)                       (Quality:       0       0       0       0       0       0)
0x001a6d40 Splash::setSoftMask(SplashBitmap*)                          (Quality:       0       0       0       0       0       0)
0x001a6d50 Splash::setInNonIsolatedGroup(SplashBitmap*, int, int)      (Quality:       0       0       0       0       0       0)
0x001a6d70 Splash::setTransfer(unsigned char*, unsigned char*, unsigned char*, unsigned char*) (Quality:       0       0       0       0       0       0)
0x001a6d80 Splash::setOverprintMask(unsigned int, bool)                (Quality:       0       0       0       0       0       0)
0x001a6da0 Splash::saveState()                                         (Quality:       0       0       0       0       0       0)
0x001a6de0 Splash::restoreState()                                      (Quality:       0       0       0       0       0       0)
0x001a6e10 Splash::~Splash()                                           (Quality:       0       0       0       0       0       0)
0x001a6e90 Splash::clear(unsigned char*, unsigned char)                (Quality:       0       0       0       0       0       0)
0x001a7210 Splash::strokeNarrow(SplashPath*)                           (Quality:       0       0       0       0       0       0)
0x001a81d0 Splash::flattenCurve(double, double, double, double, double, double, double, double, double*, double, SplashPath*) (Quality:       0       0       0       0       0       0)
0x001a85d0 Splash::flattenPath(SplashPath*, double*, double)           (Quality:       0       0       0       0       0       0)
0x001a8740 Splash::makeDashedPath(SplashPath*)                         (Quality:       0       0       0       0       0       0)
0x001a8cc0 Splash::pathAllOutside(SplashPath*)                         (Quality:       0       0       0       0       0       0)
0x001a9050 Splash::fillWithPattern(SplashPath*, bool, SplashPattern*, double) (Quality:       0       0       0       0       0       0)
0x001a9e60 Splash::xorFill(SplashPath*, bool)                          (Quality:       0       0       0       0       0       0)
0x001aa440 Splash::fillGlyph2(int, int, SplashGlyphBitmap*, bool)      (Quality:       0       0       0       0       0       0)
0x001ab3b0 Splash::fillChar(double, double, int, SplashFont*)          (Quality:       0       0       0       0       0       0)
0x001ab610 Splash::fillGlyph(double, double, SplashGlyphBitmap*)       (Quality:       0       0       0       0       0       0)
0x001ab720 Splash::scaleMaskYdXd(bool (*)(void*, unsigned char*), void*, int, int, int, int, SplashBitmap*) (Quality:       0       0       0       0       0       0)
0x001ab960 Splash::scaleMaskYdXu(bool (*)(void*, unsigned char*), void*, int, int, int, int, SplashBitmap*) (Quality:       0       0       0       0       0       0)
0x001abb60 Splash::scaleMaskYuXd(bool (*)(void*, unsigned char*), void*, int, int, int, int, SplashBitmap*) (Quality:       0       0       0       0       0       0)
0x001abd50 Splash::scaleMaskYuXu(bool (*)(void*, unsigned char*), void*, int, int, int, int, SplashBitmap*) (Quality:       0       0       0       0       0       0)
0x001abee0 Splash::scaleMask(bool (*)(void*, unsigned char*), void*, int, int, int, int) (Quality:       0       0       0       0       0       0)
0x001abff0 Splash::arbitraryTransformMask(bool (*)(void*, unsigned char*), void*, int, int, double*, bool) (Quality:       0       0       0       0       0       0)
0x001adeb0 Splash::blitMask(SplashBitmap*, int, int, SplashClipResult) (Quality:       0       0       0       0       0       0)
0x001ae890 Splash::scaleImageYdXd(bool (*)(void*, unsigned char*, unsigned char*), void*, SplashColorMode, int, bool, int, int, int, int, SplashBitmap*) (Quality:       0       0       0       0       0       0)
0x001aeda0 Splash::scaleImageYdXu(bool (*)(void*, unsigned char*, unsigned char*), void*, SplashColorMode, int, bool, int, int, int, int, SplashBitmap*) (Quality:       0       0       0       0       0       0)
0x001af260 Splash::scaleImageYuXd(bool (*)(void*, unsigned char*, unsigned char*), void*, SplashColorMode, int, bool, int, int, int, int, SplashBitmap*) (Quality:       0       0       0       0       0       0)
0x001af6d0 Splash::scaleImageYuXu(bool (*)(void*, unsigned char*, unsigned char*), void*, SplashColorMode, int, bool, int, int, int, int, SplashBitmap*) (Quality:       0       0       0       0       0       0)
0x001afb00 Splash::scaleImageYuXuBilinear(bool (*)(void*, unsigned char*, unsigned char*), void*, SplashColorMode, int, bool, int, int, int, int, SplashBitmap*) (Quality:       0       0       0       0       0       0)
0x001b0150 Splash::scaleImage(bool (*)(void*, unsigned char*, unsigned char*), void*, SplashColorMode, int, bool, int, int, int, int, bool, bool) (Quality:       0       0       0       0       0       0)
0x001b03e0 Splash::arbitraryTransformImage(bool (*)(void*, unsigned char*, unsigned char*), void*, SplashColorMode, int, bool, int, int, double*, bool, bool) (Quality:       0       0       0       0       0       0)
0x001b26c0 Splash::vertFlipImage(SplashBitmap*, int, int, int)         (Quality:       0       0       0       0       0       0)
0x001b27f0 Splash::fillImageMask(bool (*)(void*, unsigned char*), void*, int, int, double*, bool) (Quality:       0       0       0       0       0       0)
0x001b2c20 Splash::blitImageClipped(SplashBitmap*, bool, int, int, int, int, int, int) (Quality:       0       0       0       0       0       0)
0x001b3a50 Splash::blitImage(SplashBitmap*, bool, int, int, SplashClipResult) (Quality:       0       0       0       0       0       0)
0x001b3fe0 Splash::drawImage(bool (*)(void*, unsigned char*, unsigned char*), void*, SplashColorMode, bool, int, int, double*, bool, bool) (Quality:       0       0       0       0       0       0)
0x001b4830 Splash::blitImage(SplashBitmap*, bool, int, int)            (Quality:       0       0       0       0       0       0)
0x001b48a0 Splash::composite(SplashBitmap*, int, int, int, int, int, int, bool, bool, bool, double) (Quality:       0       0       0       0       0       0)
0x001b5470 Splash::compositeBackground(unsigned char*)                 (Quality:       0       0       0       0       0       0)
0x001b58a0 Splash::gouraudTriangleShadedFill(SplashGouraudColor*)      (Quality:       0       0       0       0       0       0)
0x001b6c20 Splash::blitTransparent(SplashBitmap*, int, int, int, int, int, int) (Quality:       0       0       0       0       0       0)
0x001b6fb0 Splash::makeStrokePath(SplashPath*, double, bool)           (Quality:       0       0       0       0       0       0)
0x001b8350 Splash::strokeWide(SplashPath*, double)                     (Quality:       0       0       0       0       0       0)
0x001b83b0 Splash::dumpPath(SplashPath*)                               (Quality:       0       0       0       0       0       0)
0x001b8470 Splash::stroke(SplashPath*)                                 (Quality:       0       0       0       0       0       0)
0x001b8690 Splash::fill(SplashPath*, bool)                             (Quality:       0       0       0       0       0       0)
0x001b86f0 Splash::dumpXPath(SplashXPath*)                             (Quality:       0       0       0       0       0       0)
0x001b87a0 Splash::shadedFill(SplashPath*, bool, SplashPattern*)       (Quality:       0       0       0       0       0       0)
0x001b9430 Splash::pipeInit(SplashPipe*, int, int, SplashPattern*, unsigned char*, unsigned char, bool, bool, bool, unsigned char) (Quality:       0       0       0       0       0       0)
0x001b9910 Splash::pipeSetXY(SplashPipe*, int, int)                    (Quality:       0       0       0       0       0       0)
0x001b9a50 Splash::drawPixel(SplashPipe*, int, int, bool)              (Quality:       0       0       0       0       0       0)
0x001b9d30 Splash::drawAAPixel(SplashPipe*, int, int)                  (Quality:       0       0       0       0       0       0)
0x001ba050 Splash::drawSpan(SplashPipe*, int, int, int, bool)          (Quality:       0       0       0       0       0       0)
0x001ba400 SplashBitmap::SplashBitmap(int, int, int, SplashColorMode, bool, bool, GooList*) (Quality:       0       0       0       0       0       0)
0x001ba5b0 SplashBitmap::copy(SplashBitmap*)                           (Quality:       0       0       0       0       0       0)
0x001ba690 SplashBitmap::~SplashBitmap()                               (Quality:       0       0       0       0       0       0)
0x001ba720 SplashBitmap::writePNMFile(_IO_FILE*)                       (Quality:       0       0       0       0       0       0)
0x001ba990 SplashBitmap::writePNMFile(char*)                           (Quality:       0       0       0       0       0       0)
0x001ba9e0 SplashBitmap::writeAlphaPGMFile(char*)                      (Quality:       0       0       0       0       0       0)
0x001baa60 SplashBitmap::getPixel(int, int, unsigned char*)            (Quality:       0       0       0       0       0       0)
0x001bab60 SplashBitmap::getAlpha(int, int)                            (Quality:       0       0       0       0       0       0)
0x001bab80 SplashBitmap::takeData()                                    (Quality:       0       0       0       0       0       0)
0x001bab90 SplashBitmap::getRGBLine(int, unsigned char*)               (Quality:       0       0       0       0       0       0)
0x001bafb0 SplashBitmap::getXBGRLine(int, unsigned char*)              (Quality:       0       0       0       0       0       0)
0x001bb3d0 SplashBitmap::convertToXBGR()                               (Quality:       0       0       0       0       0       0)
0x001bb490 SplashBitmap::writeImgFile(ImgWriter*, _IO_FILE*, int, int) (Quality:       0       0       0       0       0       0)
0x001bb8f0 SplashBitmap::writeImgFile(SplashImageFileFormat, _IO_FILE*, int, int, char const*) (Quality:       0       0       0       0       0       0)
0x001bba80 SplashBitmap::writeImgFile(SplashImageFileFormat, char*, int, int, char const*) (Quality:       0       0       0       0       0       0)
0x001bbaf0 SplashClip::SplashClip(double, double, double, double, bool) (Quality:       0       0       0       0       0       0)
0x001bbc30 SplashClip::SplashClip(SplashClip*)                         (Quality:       0       0       0       0       0       0)
0x001bbdb0 SplashClip::~SplashClip()                                   (Quality:       0       0       0       0       0       0)
0x001bbe40 SplashClip::grow(int)                                       (Quality:       0       0       0       0       0       0)
0x001bbec0 SplashClip::resetToRect(double, double, double, double)     (Quality:       0       0       0       0       0       0)
0x001bc0d0 SplashClip::clipToRect(double, double, double, double)      (Quality:       0       0       0       0       0       0)
0x001bc320 SplashClip::clipToPath(SplashPath*, double*, double, bool)  (Quality:       0       0       0       0       0       0)
0x001bc6b0 SplashClip::testRect(int, int, int, int)                    (Quality:       0       0       0       0       0       0)
0x001bc750 SplashClip::testSpan(int, int, int)                         (Quality:       0       0       0       0       0       0)
0x001bc8c0 SplashClip::clipAALine(SplashBitmap*, int*, int*, int, bool) (Quality:       0       0       0       0       0       0)
0x001bcc00 SplashFTFont::~SplashFTFont()                               (Quality:       0       0       0       0       0       0)
0x001bcc20 SplashFTFont::~SplashFTFont()                               (Quality:       0       0       0       0       0       0)
0x001bcc40 SplashFTFont::getGlyphAdvance(int)                          (Quality:       0       0       0       0       0       0)
0x001bcda0 SplashFTFont::makeGlyph(int, int, int, SplashGlyphBitmap*, int, int, SplashClip*, SplashClipResult*) (Quality:       0       0       0       0       0       0)
0x001bd080 SplashFTFont::getGlyphPath(int)                             (Quality:       0       0       0       0       0       0)
0x001bd210 glyphPathCubicTo(FT_Vector_ const*, FT_Vector_ const*, FT_Vector_ const*, void*) (Quality:       0       0       0       0       0       0)
0x001bd2a0 glyphPathConicTo(FT_Vector_ const*, FT_Vector_ const*, void*) (Quality:       0       0       0       0       0       0)
0x001bd380 glyphPathLineTo(FT_Vector_ const*, void*)                   (Quality:       0       0       0       0       0       0)
0x001bd3d0 glyphPathMoveTo(FT_Vector_ const*, void*)                   (Quality:       0       0       0       0       0       0)
0x001bd440 SplashFTFont::SplashFTFont(SplashFTFontFile*, double*, double*) (Quality:       0       0       0       0       0       0)
0x001bd8d0 SplashFTFont::getGlyph(int, int, int, SplashGlyphBitmap*, int, int, SplashClip*, SplashClipResult*) (Quality:       0       0       0       0       0       0)
0x001bd8e0 SplashFTFontEngine::SplashFTFontEngine(bool, bool, bool, FT_LibraryRec_*) (Quality:       0       0       0       0       0       0)
0x001bd950 SplashFTFontEngine::init(bool, bool, bool)                  (Quality:       0       0       0       0       0       0)
0x001bd9b0 SplashFTFontEngine::~SplashFTFontEngine()                   (Quality:       0       0       0       0       0       0)
0x001bd9c0 SplashFTFontEngine::loadType1Font(SplashFontFileID*, SplashFontSrc*, char const**) (Quality:       0       0       0       0       0       0)
0x001bd9d0 SplashFTFontEngine::loadType1CFont(SplashFontFileID*, SplashFontSrc*, char const**) (Quality:       0       0       0       0       0       0)
0x001bd9e0 SplashFTFontEngine::loadOpenTypeT1CFont(SplashFontFileID*, SplashFontSrc*, char const**) (Quality:       0       0       0       0       0       0)
0x001bd9f0 SplashFTFontEngine::loadCIDFont(SplashFontFileID*, SplashFontSrc*) (Quality:       0       0       0       0       0       0)
0x001bdad0 SplashFTFontEngine::loadOpenTypeCFFFont(SplashFontFileID*, SplashFontSrc*, int*, int) (Quality:       0       0       0       0       0       0)
0x001bdbd0 SplashFTFontEngine::loadTrueTypeFont(SplashFontFileID*, SplashFontSrc*, int*, int, int) (Quality:       0       0       0       0       0       0)
0x001bdbe0 SplashFTFontFile::~SplashFTFontFile()                       (Quality:       0       0       0       0       0       0)
0x001bdc20 SplashFTFontFile::~SplashFTFontFile()                       (Quality:       0       0       0       0       0       0)
0x001bdc40 SplashFTFontFile::makeFont(double*, double*)                (Quality:       0       0       0       0       0       0)
0x001bdc90 SplashFTFontFile::SplashFTFontFile(SplashFTFontEngine*, SplashFontFileID*, SplashFontSrc*, FT_FaceRec_*, int*, int, bool, bool) (Quality:       0       0       0       0       0       0)
0x001bdd00 SplashFTFontFile::loadType1Font(SplashFTFontEngine*, SplashFontFileID*, SplashFontSrc*, char const**) (Quality:       0       0       0       0       0       0)
0x001bde40 SplashFTFontFile::loadCIDFont(SplashFTFontEngine*, SplashFontFileID*, SplashFontSrc*, int*, int) (Quality:       0       0       0       0       0       0)
0x001bdf00 SplashFTFontFile::loadTrueTypeFont(SplashFTFontEngine*, SplashFontFileID*, SplashFontSrc*, int*, int, int) (Quality:       0       0       0       0       0       0)
0x001bdfc0 SplashFont::getGlyph(int, int, int, SplashGlyphBitmap*, int, int, SplashClip*, SplashClipResult*) (Quality:       0       0       0       0       0       0)
0x001be3a0 SplashFont::SplashFont(SplashFontFile*, double*, double*, bool) (Quality:       0       0       0       0       0       0)
0x001be470 SplashFont::initCache()                                     (Quality:       0       0       0       0       0       0)
0x001be610 SplashFont::~SplashFont()                                   (Quality:       0       0       0       0       0       0)
0x001be660 SplashFont::~SplashFont()                                   (Quality:       0       0       0       0       0       0)
0x001be680 SplashFontEngine::SplashFontEngine(bool, bool, bool, bool)  (Quality:       0       0       0       0       0       0)
0x001be6e0 SplashFontEngine::~SplashFontEngine()                       (Quality:       0       0       0       0       0       0)
0x001be740 SplashFontEngine::getFontFile(SplashFontFileID*)            (Quality:       0       0       0       0       0       0)
0x001be7b0 SplashFontEngine::loadType1Font(SplashFontFileID*, SplashFontSrc*, char const**) (Quality:       0       0       0       0       0       0)
0x001be800 SplashFontEngine::loadType1CFont(SplashFontFileID*, SplashFontSrc*, char const**) (Quality:       0       0       0       0       0       0)
0x001be850 SplashFontEngine::loadOpenTypeT1CFont(SplashFontFileID*, SplashFontSrc*, char const**) (Quality:       0       0       0       0       0       0)
0x001be8a0 SplashFontEngine::loadCIDFont(SplashFontFileID*, SplashFontSrc*) (Quality:       0       0       0       0       0       0)
0x001be8f0 SplashFontEngine::loadOpenTypeCFFFont(SplashFontFileID*, SplashFontSrc*, int*, int) (Quality:       0       0       0       0       0       0)
0x001be940 SplashFontEngine::loadTrueTypeFont(SplashFontFileID*, SplashFontSrc*, int*, int, int) (Quality:       0       0       0       0       0       0)
0x001be990 SplashFontEngine::getAA()                                   (Quality:       0       0       0       0       0       0)
0x001be9b0 SplashFontEngine::setAA(bool)                               (Quality:       0       0       0       0       0       0)
0x001be9d0 SplashFontEngine::getFont(SplashFontFile*, double*, double*) (Quality:       0       0       0       0       0       0)
0x001bec80 SplashFontFile::incRefCnt()                                 (Quality:       0       0       0       0       0       0)
0x001bec90 SplashFontFile::decRefCnt()                                 (Quality:       0       0       0       0       0       0)
0x001becb0 SplashFontSrc::SplashFontSrc()                              (Quality:       0       0       0       0       0       0)
0x001becd0 SplashFontSrc::~SplashFontSrc()                             (Quality:       0       0       0       0       0       0)
0x001bed30 SplashFontSrc::ref()                                        (Quality:       0       0       0       0       0       0)
0x001bed40 SplashFontFile::SplashFontFile(SplashFontFileID*, SplashFontSrc*) (Quality:       0       0       0       0       0       0)
0x001bed70 SplashFontSrc::unref()                                      (Quality:       0       0       0       0       0       0)
0x001beda0 SplashFontFile::~SplashFontFile()                           (Quality:       0       0       0       0       0       0)
0x001bede0 SplashFontFile::~SplashFontFile()                           (Quality:       0       0       0       0       0       0)
0x001bee00 SplashFontSrc::setFile(GooString*, bool)                    (Quality:       0       0       0       0       0       0)
0x001bee50 SplashFontSrc::setFile(char const*, bool)                   (Quality:       0       0       0       0       0       0)
0x001beea0 SplashFontSrc::setBuf(char*, int, bool)                     (Quality:       0       0       0       0       0       0)
0x001beeb0 SplashFontFileID::SplashFontFileID()                        (Quality:       0       0       0       0       0       0)
0x001beec0 SplashFontFileID::~SplashFontFileID()                       (Quality:       0       0       0       0       0       0)
0x001beed0 SplashFontFileID::~SplashFontFileID()                       (Quality:       0       0       0       0       0       0)
0x001beef0 SplashPath::SplashPath()                                    (Quality:       0       0       0       0       0       0)
0x001bef30 SplashPath::SplashPath(SplashPath*)                         (Quality:       0       0       0       0       0       0)
0x001befe0 SplashPath::~SplashPath()                                   (Quality:       0       0       0       0       0       0)
0x001bf000 SplashPath::grow(int)                                       (Quality:       0       0       0       0       0       0)
0x001bf060 SplashPath::append(SplashPath*)                             (Quality:       0       0       0       0       0       0)
0x001bf0f0 SplashPath::moveTo(double, double)                          (Quality:       0       0       0       0       0       0)
0x001bf170 SplashPath::lineTo(double, double)                          (Quality:       0       0       0       0       0       0)
0x001bf1e0 SplashPath::curveTo(double, double, double, double, double, double) (Quality:       0       0       0       0       0       0)
0x001bf2d0 SplashPath::close(bool)                                     (Quality:       0       0       0       0       0       0)
0x001bf370 SplashPath::addStrokeAdjustHint(int, int, int, int)         (Quality:       0       0       0       0       0       0)
0x001bf400 SplashPath::offset(double, double)                          (Quality:       0       0       0       0       0       0)
0x001bf450 SplashPath::getCurPt(double*, double*)                      (Quality:       0       0       0       0       0       0)
0x001bf490 SplashSolidColor::getColor(int, int, unsigned char*)        (Quality:       0       0       0       0       0       0)
0x001bf4b0 SplashPattern::SplashPattern()                              (Quality:       0       0       0       0       0       0)
0x001bf4c0 SplashPattern::~SplashPattern()                             (Quality:       0       0       0       0       0       0)
0x001bf4d0 SplashSolidColor::~SplashSolidColor()                       (Quality:       0       0       0       0       0       0)
0x001bf4f0 SplashSolidColor::~SplashSolidColor()                       (Quality:       0       0       0       0       0       0)
0x001bf510 SplashPattern::~SplashPattern()                             (Quality:       0       0       0       0       0       0)
0x001bf530 SplashSolidColor::SplashSolidColor(unsigned char*)          (Quality:       0       0       0       0       0       0)
0x001bf570 SplashSolidColor::testPosition(int, int)                    (Quality:       0       0       0       0       0       0)
0x001bf580 SplashSolidColor::isStatic()                                (Quality:       0       0       0       0       0       0)
0x001bf590 SplashSolidColor::isCMYK()                                  (Quality:       0       0       0       0       0       0)
0x001bf5a0 SplashSolidColor::copy()                                    (Quality:       0       0       0       0       0       0)
0x001bf5d0 void std::__unguarded_linear_insert<SplashScreenPoint*, __gnu_cxx::__ops::_Val_comp_iter<cmpDistancesFunctor> >(SplashScreenPoint*, __gnu_cxx::__ops::_Val_comp_iter<cmpDistancesFunctor>) [clone .isra.5] (Quality:       0       0       0       0       0       0)
0x001bf610 void std::__insertion_sort<SplashScreenPoint*, __gnu_cxx::__ops::_Iter_comp_iter<cmpDistancesFunctor> >(SplashScreenPoint*, SplashScreenPoint*, __gnu_cxx::__ops::_Iter_comp_iter<cmpDistancesFunctor>) [clone .isra.8] (Quality:       0       0       0       0       0       0)
0x001bf6c0 SplashScreen::SplashScreen(SplashScreenParams*)             (Quality:       0       0       0       0       0       0)
0x001bf6f0 SplashScreen::buildDispersedMatrix(int, int, int, int, int) (Quality:       0       0       0       0       0       0)
0x001bf820 SplashScreen::buildClusteredMatrix()                        (Quality:       0       0       0       0       0       0)
0x001bfa90 SplashScreen::distance(int, int, int, int)                  (Quality:       0       0       0       0       0       0)
0x001bfad0 SplashScreen::SplashScreen(SplashScreen*)                   (Quality:       0       0       0       0       0       0)
0x001bfb30 SplashScreen::~SplashScreen()                               (Quality:       0       0       0       0       0       0)
0x001bfb40 SplashScreen::buildSCDMatrix(int)                           (Quality:       0       0       0       0       0       0)
0x001c0260 SplashScreen::createMatrix()                                (Quality:       0       0       0       0       0       0)
0x001c0510 void std::__adjust_heap<SplashScreenPoint*, long, SplashScreenPoint, __gnu_cxx::__ops::_Iter_comp_iter<cmpDistancesFunctor> >(SplashScreenPoint*, long, long, SplashScreenPoint, __gnu_cxx::__ops::_Iter_comp_iter<cmpDistancesFunctor>) (Quality:       0       0       0       0       0       0)
0x001c06a0 void std::__heap_select<SplashScreenPoint*, __gnu_cxx::__ops::_Iter_comp_iter<cmpDistancesFunctor> >(SplashScreenPoint*, SplashScreenPoint*, SplashScreenPoint*, __gnu_cxx::__ops::_Iter_comp_iter<cmpDistancesFunctor>) (Quality:       0       0       0       0       0       0)
0x001c07c0 void std::__introsort_loop<SplashScreenPoint*, long, __gnu_cxx::__ops::_Iter_comp_iter<cmpDistancesFunctor> >(SplashScreenPoint*, SplashScreenPoint*, long, __gnu_cxx::__ops::_Iter_comp_iter<cmpDistancesFunctor>) (Quality:       0       0       0       0       0       0)
0x001c09e0 SplashState::SplashState(int, int, bool, SplashScreenParams*) (Quality:       0       0       0       0       0       0)
0x001c0be0 SplashState::SplashState(int, int, bool, SplashScreen*)     (Quality:       0       0       0       0       0       0)
0x001c0de0 SplashState::SplashState(SplashState*)                      (Quality:       0       0       0       0       0       0)
0x001c1100 SplashState::~SplashState()                                 (Quality:       0       0       0       0       0       0)
0x001c11a0 SplashState::setStrokePattern(SplashPattern*)               (Quality:       0       0       0       0       0       0)
0x001c11d0 SplashState::setFillPattern(SplashPattern*)                 (Quality:       0       0       0       0       0       0)
0x001c1200 SplashState::setScreen(SplashScreen*)                       (Quality:       0       0       0       0       0       0)
0x001c1230 SplashState::setLineDash(double*, int, double)              (Quality:       0       0       0       0       0       0)
0x001c12b0 SplashState::setSoftMask(SplashBitmap*)                     (Quality:       0       0       0       0       0       0)
0x001c1300 SplashState::setTransfer(unsigned char*, unsigned char*, unsigned char*, unsigned char*) (Quality:       0       0       0       0       0       0)
0x001c1420 SplashXPath::strokeAdjust(SplashXPathAdjust*, double*, double*) (Quality:       0       0       0       0       0       0)
0x001c1510 SplashXPath::SplashXPath(SplashXPath*)                      (Quality:       0       0       0       0       0       0)
0x001c1560 SplashXPath::~SplashXPath()                                 (Quality:       0       0       0       0       0       0)
0x001c1570 SplashXPath::grow(int)                                      (Quality:       0       0       0       0       0       0)
0x001c15c0 SplashXPath::addSegment(double, double, double, double)     (Quality:       0       0       0       0       0       0)
0x001c16e0 SplashXPath::addCurve(double, double, double, double, double, double, double, double, double, bool, bool, bool, bool) (Quality:       0       0       0       0       0       0)
0x001c1a10 SplashXPath::SplashXPath(SplashPath*, double*, double, bool, bool, int) (Quality:       0       0       0       0       0       0)
0x001c2140 SplashXPath::aaScale()                                      (Quality:       0       0       0       0       0       0)
0x001c21c0 SplashXPath::sort()                                         (Quality:       0       0       0       0       0       0)
0x001c2290 SplashXPathSeg* std::__unguarded_partition<SplashXPathSeg*, __gnu_cxx::__ops::_Iter_comp_iter<cmpXPathSegsFunctor> >(SplashXPathSeg*, SplashXPathSeg*, SplashXPathSeg*, __gnu_cxx::__ops::_Iter_comp_iter<cmpXPathSegsFunctor>) (Quality:       0       0       0       0       0       0)
0x001c2400 void std::__unguarded_linear_insert<SplashXPathSeg*, __gnu_cxx::__ops::_Val_comp_iter<cmpXPathSegsFunctor> >(SplashXPathSeg*, __gnu_cxx::__ops::_Val_comp_iter<cmpXPathSegsFunctor>) (Quality:       0       0       0       0       0       0)
0x001c2500 void std::__insertion_sort<SplashXPathSeg*, __gnu_cxx::__ops::_Iter_comp_iter<cmpXPathSegsFunctor> >(SplashXPathSeg*, SplashXPathSeg*, __gnu_cxx::__ops::_Iter_comp_iter<cmpXPathSegsFunctor>) (Quality:       0       0       0       0       0       0)
0x001c26a0 void std::__adjust_heap<SplashXPathSeg*, long, SplashXPathSeg, __gnu_cxx::__ops::_Iter_comp_iter<cmpXPathSegsFunctor> >(SplashXPathSeg*, long, long, SplashXPathSeg, __gnu_cxx::__ops::_Iter_comp_iter<cmpXPathSegsFunctor>) (Quality:       0       0       0       0       0       0)
0x001c29f0 void std::__make_heap<SplashXPathSeg*, __gnu_cxx::__ops::_Iter_comp_iter<cmpXPathSegsFunctor> >(SplashXPathSeg*, SplashXPathSeg*, __gnu_cxx::__ops::_Iter_comp_iter<cmpXPathSegsFunctor>) (Quality:       0       0       0       0       0       0)
0x001c2ac0 void std::__introsort_loop<SplashXPathSeg*, long, __gnu_cxx::__ops::_Iter_comp_iter<cmpXPathSegsFunctor> >(SplashXPathSeg*, SplashXPathSeg*, long, __gnu_cxx::__ops::_Iter_comp_iter<cmpXPathSegsFunctor>) (Quality:       0       0       0       0       0       0)
0x001c3090 void std::__unguarded_linear_insert<SplashIntersect*, __gnu_cxx::__ops::_Val_comp_iter<cmpIntersectFunctor> >(SplashIntersect*, __gnu_cxx::__ops::_Val_comp_iter<cmpIntersectFunctor>) [clone .isra.10] (Quality:       0       0       0       0       0       0)
0x001c30e0 void std::__insertion_sort<SplashIntersect*, __gnu_cxx::__ops::_Iter_comp_iter<cmpIntersectFunctor> >(SplashIntersect*, SplashIntersect*, __gnu_cxx::__ops::_Iter_comp_iter<cmpIntersectFunctor>) [clone .isra.13] (Quality:       0       0       0       0       0       0)
0x001c31a0 SplashXPathScanner::~SplashXPathScanner()                   (Quality:       0       0       0       0       0       0)
0x001c31c0 SplashXPathScanner::getBBoxAA(int*, int*, int*, int*)       (Quality:       0       0       0       0       0       0)
0x001c3210 SplashXPathScanner::getSpanBounds(int, int*, int*)          (Quality:       0       0       0       0       0       0)
0x001c32a0 SplashXPathScanner::test(int, int)                          (Quality:       0       0       0       0       0       0)
0x001c3350 SplashXPathScanner::testSpan(int, int, int)                 (Quality:       0       0       0       0       0       0)
0x001c3490 SplashXPathScanner::getNextSpan(int, int*, int*)            (Quality:       0       0       0       0       0       0)
0x001c3590 SplashXPathScanner::addIntersection(double, double, unsigned int, int, int, int) (Quality:       0       0       0       0       0       0)
0x001c36e0 SplashXPathScanner::renderAALine(SplashBitmap*, int*, int*, int, bool) (Quality:       0       0       0       0       0       0)
0x0018e450 TextSelectionSizer::~TextSelectionSizer()                   (Quality:       0       0       0       0       0       0)
0x0017c5d0 PSOutputDev::writePSName(char const*)                       (Quality:       2       1      -1    2305    2307    2304)
0x001602e0 ASCII85Encoder::fillBuf()                                   (Quality:       1       0      -1   13441   13440   13441)
0x00149e00 NameToCharCode::add(char const*, unsigned int)              (Quality:       1       0      -1    4666    4667    4666)
0x000b7f10 NameToCharCode::add(char const*, unsigned int)@plt          (Quality:       3       1      -2    4669    4666    4668)
